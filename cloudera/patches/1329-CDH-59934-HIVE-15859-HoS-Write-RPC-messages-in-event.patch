From ad64356a0233e2996350c17fac80a6beb744afab Mon Sep 17 00:00:00 2001
From: Rui Li <lirui@apache.org>
Date: Mon, 27 Feb 2017 13:29:53 +0800
Subject: [PATCH 1329/1363] CDH-59934 HIVE-15859: HoS: Write RPC messages in
 event loop (Rui reviewed by Xuefu)

Change-Id: I22dd03ced1f966e7eb14581580c62dfd5774f91e
---
 .../java/org/apache/hive/spark/client/rpc/Rpc.java |   17 +++++++++--------
 .../hive/spark/client/rpc/RpcDispatcher.java       |    7 +------
 .../org/apache/hive/spark/client/rpc/TestRpc.java  |    3 +++
 3 files changed, 13 insertions(+), 14 deletions(-)

diff --git a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/Rpc.java b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/Rpc.java
index d8e9592..2f27eee 100644
--- a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/Rpc.java
+++ b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/Rpc.java
@@ -221,7 +221,6 @@ static Rpc createEmbedded(RpcDispatcher dispatcher) {
   private final Channel channel;
   private final Collection<Listener> listeners;
   private final EventExecutorGroup egroup;
-  private final Object channelLock;
   private volatile RpcDispatcher dispatcher;
 
   private Rpc(RpcConfiguration config, Channel channel, EventExecutorGroup egroup) {
@@ -229,7 +228,6 @@ private Rpc(RpcConfiguration config, Channel channel, EventExecutorGroup egroup)
     Preconditions.checkArgument(egroup != null);
     this.config = config;
     this.channel = channel;
-    this.channelLock = new Object();
     this.dispatcher = null;
     this.egroup = egroup;
     this.listeners = Lists.newLinkedList();
@@ -272,13 +270,13 @@ public boolean isActive() {
    * @param retType Type of expected reply.
    * @return A future used to monitor the operation.
    */
-  public <T> Future<T> call(Object msg, Class<T> retType) {
+  public <T> Future<T> call(final Object msg, Class<T> retType) {
     Preconditions.checkArgument(msg != null);
     Preconditions.checkState(channel.isActive(), "RPC channel is closed.");
     try {
       final long id = rpcId.getAndIncrement();
       final Promise<T> promise = createPromise();
-      ChannelFutureListener listener = new ChannelFutureListener() {
+      final ChannelFutureListener listener = new ChannelFutureListener() {
           @Override
           public void operationComplete(ChannelFuture cf) {
             if (!cf.isSuccess() && !promise.isDone()) {
@@ -291,10 +289,13 @@ public void operationComplete(ChannelFuture cf) {
       };
 
       dispatcher.registerRpc(id, promise, msg.getClass().getName());
-      synchronized (channelLock) {
-        channel.write(new MessageHeader(id, Rpc.MessageType.CALL)).addListener(listener);
-        channel.writeAndFlush(msg).addListener(listener);
-      }
+      channel.eventLoop().submit(new Runnable() {
+        @Override
+        public void run() {
+          channel.write(new MessageHeader(id, Rpc.MessageType.CALL)).addListener(listener);
+          channel.writeAndFlush(msg).addListener(listener);
+        }
+      });
       return promise;
     } catch (Exception e) {
       throw Throwables.propagate(e);
diff --git a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcDispatcher.java b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcDispatcher.java
index ebafd13..2b6ab29 100644
--- a/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcDispatcher.java
+++ b/spark-client/src/main/java/org/apache/hive/spark/client/rpc/RpcDispatcher.java
@@ -152,12 +152,7 @@ private void handleError(ChannelHandlerContext ctx, Object msg, OutstandingRpc r
 
   @Override
   public final void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug(String.format("[%s] Caught exception in channel pipeline.", name()), cause);
-    } else {
-      LOG.info("[{}] Closing channel due to exception in pipeline ({}).", name(),
-          cause.getMessage());
-    }
+    LOG.error(String.format("[%s] Closing channel due to exception in pipeline.", name()), cause);
 
     if (lastHeader != null) {
       // There's an RPC waiting for a reply. Exception was most probably caught while processing
diff --git a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
index 5ba018c..fa173e5 100644
--- a/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
+++ b/spark-client/src/test/java/org/apache/hive/spark/client/rpc/TestRpc.java
@@ -320,6 +320,9 @@ private void transfer(Rpc serverRpc, Rpc clientRpc) {
     EmbeddedChannel client = (EmbeddedChannel) clientRpc.getChannel();
     EmbeddedChannel server = (EmbeddedChannel) serverRpc.getChannel();
 
+    server.runPendingTasks();
+    client.runPendingTasks();
+
     int count = 0;
     while (!client.outboundMessages().isEmpty()) {
       server.writeInbound(client.readOutbound());
-- 
1.7.9.5

