From 717db889c2ef266388b9d0a56aa9f098bec31bb4 Mon Sep 17 00:00:00 2001
From: Alexander Kolbasov <akolb@cloudera.com>
Date: Wed, 31 Jan 2018 11:59:40 -0800
Subject: [PATCH 1334/1363] PROPOSED HIVE-18526: Backport HIVE-16886 to Hive 2
 CDH-63965: HIVE-10815 causes HMS to generate
 events with duplicate eventIDs

Change-Id: Ic0e4ea4afb242f09e47e123dfa2d777c4a4a3a82
(cherry picked from commit a81454969d65fc07f5757ca280d13e052af4dfbf)
---
 .../apache/hadoop/hive/metastore/ObjectStore.java  |    7 +
 .../hadoop/hive/metastore/TestObjectStore.java     |  140 ++++++++++++++++++++
 2 files changed, 147 insertions(+)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index d99f543..c7ed2ee 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -7747,6 +7747,13 @@ public void addNotificationEvent(NotificationEvent entry) {
     try {
       openTransaction();
       query = pm.newQuery(MNotificationNextId.class);
+
+      // To protect against concurrent modifications of Notification ID, obtain the row lock
+      // on the NOTIFICATION_SEQUENCE table row.
+      // This is a WRITE lock and it is maintained for the duration of transaction.
+      // See http://www.datanucleus.org/products/accessplatform_3_2/jdo/transactions.html
+      query.setSerializeRead(true);
+
       Collection<MNotificationNextId> ids = (Collection) query.execute();
       MNotificationNextId id = null;
       boolean needToPersistId;
diff --git a/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java b/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java
index 0b7f7d6..ae07189 100644
--- a/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java
+++ b/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java
@@ -17,9 +17,16 @@
  */
 package org.apache.hadoop.hive.metastore;
 
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.concurrent.Callable;
+import java.util.concurrent.CyclicBarrier;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Future;
 
 import org.apache.hadoop.hive.common.metrics.common.MetricsConstant;
 import org.apache.hadoop.hive.common.metrics.common.MetricsFactory;
@@ -50,8 +57,11 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
+import static java.util.concurrent.Executors.newFixedThreadPool;
+
 public class TestObjectStore {
   private ObjectStore objectStore = null;
 
@@ -146,6 +156,136 @@ public void testNotificationOps() throws InterruptedException {
   }
 
   /**
+   * Test concurrent updates to notifications.<p>
+   *
+   * The test uses N threads to concurrently add M notifications.
+   * It assumes that no other thread modifies nodifications, but there are no assumptions
+   * about the initial state of notification table.<p>
+   *
+   * The following assertions are verified:
+   * <ul>
+   *   <li>Correct number of events are added in the table</li>
+   *   <li>There are no duplicate events</li>
+   *   <li>There are no holes</li>
+   *   <li>Events returned by getNextNotification() have all the new events in increasing order</li>
+   * </ul>
+   *
+   * @throws ExecutionException
+   * @throws InterruptedException
+   */
+  @Ignore(
+      "This test is here to allow testing with other databases like mysql / postgres etc\n"
+          + " with  user changes to the code. This cannot be run on apache derby because of\n"
+          + " https://db.apache.org/derby/docs/10.10/devguide/cdevconcepts842385.html"
+  )
+  @Test
+  public void testConcurrentNotifications() throws ExecutionException, InterruptedException {
+
+    final int NUM_THREADS = 4;
+    final int NUM_EVENTS = 200;
+    // Barrier is used to ensure that all threads start race at the same time
+    final CyclicBarrier barrier = new CyclicBarrier(NUM_THREADS);
+    ExecutorService executor = newFixedThreadPool(NUM_THREADS);
+
+    final HiveConf conf = new HiveConf();
+    conf.setVar(HiveConf.ConfVars.METASTORE_EXPRESSION_PROXY_CLASS, MockPartitionExpressionProxy.class.getName());
+
+    /*
+     * To tun these tests on real DB you need to
+     * - make sure NOTIFICATION_SEQUENCE schema is initialized
+     * - Uncomment the following settings and fill appropriate values for your setup.
+     * You also need to add test dependency on mysql-connector driver.
+     */
+    // conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_DRIVER,  "com.mysql.jdbc.Driver");
+    // conf.setVar(HiveConf.ConfVars.METASTORECONNECTURLKEY,
+    //   "jdbc:mysql://<HOST>:3306/<DB>");
+    // conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_USER_NAME, "<USER>");
+    // conf.setVar(HiveConf.ConfVars.METASTOREPWD, "<PASSWORD>");
+
+    // We can't rely on this.objectSTore because we are not using derby
+    ObjectStore myStore = new ObjectStore();
+    myStore.setConf(conf);
+
+    // Get current notification value. We assume that no one else modifies notifications
+    long currentEventId = myStore.getCurrentNotificationEventId().getEventId();
+
+    // Add NUM_EVENTS notifications and return list if notification IDs added
+    Callable<List<Long>> addNotifications = new Callable<List<Long>>() {
+      @Override
+      public List<Long> call() throws Exception {
+        // We need thread-local object store
+        ObjectStore store = new ObjectStore();
+        store.setConf(conf);
+        List<Long> result = new ArrayList<>(NUM_EVENTS);
+        NotificationEvent event =
+            new NotificationEvent(0, 0, EventMessage.EventType.CREATE_DATABASE.toString(), "");
+
+        // Prepare for the race
+        barrier.await();
+        // Fun part begins
+        for (int i = 1; i < NUM_EVENTS; i++) {
+          store.addNotificationEvent(event);
+          long evId = store.getCurrentNotificationEventId().getEventId();
+          // Make sure events do not jump backwards
+          Assert.assertTrue(evId >= event.getEventId());
+          result.add(event.getEventId());
+        }
+        return result;
+      }
+    };
+
+    List<Future<List<Long>>> results = new ArrayList<>(NUM_THREADS);
+
+    // Submit work for all threads
+    for (int i = 0; i < NUM_THREADS; i++) {
+      results.add(executor.submit(addNotifications));
+    }
+
+    // Collect all results in a map which counts number of times each notification ID is used.
+    // Later we verify that each count is one
+    Map<Long, Integer> ids = new HashMap<>();
+    for (Future<List<Long>> r: results) {
+      List<Long> values = r.get();
+      for (Long value: values) {
+        Integer oldVal = ids.get(value);
+        Assert.assertNull(oldVal);
+        if (oldVal == null) {
+          ids.put(value, 1);
+        } else {
+          ids.put(value, oldVal + 1);
+        }
+      }
+    }
+
+    // By now all the async work is complete, so we can safely shut down the executor
+    executor.shutdownNow();
+
+    // Get latest notification ID
+    long lastEventId = myStore.getCurrentNotificationEventId().getEventId();
+
+    Assert.assertEquals(NUM_THREADS * (NUM_EVENTS - 1), lastEventId - currentEventId);
+    for(long evId = currentEventId + 1; evId <= lastEventId; evId++) {
+      Integer count = ids.get(evId);
+      Assert.assertNotNull(count);
+      Assert.assertEquals(1L, count.longValue());
+    }
+
+    // Certify that all notifications returned from getNextNotification() are present
+    // and properly ordered.
+    NotificationEventResponse eventResponse =
+        myStore.getNextNotification(new NotificationEventRequest(currentEventId));
+    long prevId = currentEventId;
+    for (NotificationEvent e: eventResponse.getEvents()) {
+      Assert.assertEquals(prevId + 1, e.getEventId());
+      prevId = e.getEventId();
+      Integer count = ids.get(e.getEventId());
+      Assert.assertNotNull(count);
+      Assert.assertEquals(1L, count.longValue());
+    }
+    Assert.assertEquals(prevId, lastEventId);
+  }
+
+  /**
    * Test database operations
    */
   @Test
-- 
1.7.9.5

