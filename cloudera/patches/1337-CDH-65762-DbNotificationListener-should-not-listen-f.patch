From a7743dd306691565107a91864716e91df7464ce9 Mon Sep 17 00:00:00 2001
From: Alexander Kolbasov <akolb@cloudera.com>
Date: Fri, 9 Mar 2018 17:41:23 -0800
Subject: [PATCH 1337/1363] CDH-65762: DbNotificationListener should not
 listen for boring events

Change-Id: I328f6b4f2f240f7c3b341993e7c5b155cbc775f7
---
 .../hcatalog/listener/DbNotificationListener.java  |   98 ++++++++++----------
 1 file changed, 51 insertions(+), 47 deletions(-)

diff --git a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
index 542e5ec..122597c 100644
--- a/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
+++ b/hcatalog/server-extensions/src/main/java/org/apache/hive/hcatalog/listener/DbNotificationListener.java
@@ -65,14 +65,16 @@
  * avoid slowing down other metadata operations with the work of putting the notification into
  * the database.  Also, occasionally the thread needs to clean the database of old records.  We
  * definitely don't want to do that as part of another metadata operation.
+ *
+ * NOTE: This listener is modified to skip events that are not used by Sentry. Currently
+ * Sentry is the only consumer and some workloads generate huge  events that are not
+ * useful for Sentry.
  */
 public class DbNotificationListener extends MetaStoreEventListener {
 
   private static final Log LOG = LogFactory.getLog(DbNotificationListener.class.getName());
   private static CleanerThread cleaner = null;
 
-  private static final Object NOTIFICATION_TBL_LOCK = new Object();
-
   // This is the same object as super.conf, but it's convenient to keep a copy of it as a
   // HiveConf rather than a Configuration.
   private HiveConf hiveConf;
@@ -146,6 +148,28 @@ public void onDropTable (DropTableEvent tableEvent)  throws MetaException {
   public void onAlterTable (AlterTableEvent tableEvent) throws MetaException {
     Table before = tableEvent.getOldTable();
     Table after = tableEvent.getNewTable();
+
+    // Verify whether either the name of the db or table changed or location changed.
+    if (before.getDbName() == null || after.getDbName() == null ||
+        before.getTableName() == null || after.getTableName() == null) {
+      return;
+    }
+
+    if (before.getSd() == null || after.getSd() == null) {
+      return;
+    }
+
+    if (before.getSd().getLocation() == null || after.getSd().getLocation() == null) {
+      return;
+    }
+
+    if (before.getDbName().equals(after.getDbName()) &&
+        before.getTableName().equals(after.getTableName()) &&
+        before.getSd().getLocation().equals(after.getSd().getLocation())) {
+      // Nothing interesting changed
+      return;
+    }
+
     NotificationEvent event = new NotificationEvent(0, now(),
         HCatConstants.HCAT_ALTER_TABLE_EVENT,
         msgFactory.buildAlterTableMessage(before, after).toString());
@@ -190,6 +214,21 @@ public void onDropPartition (DropPartitionEvent partitionEvent)  throws MetaExce
   public void onAlterPartition (AlterPartitionEvent partitionEvent)  throws MetaException {
     Partition before = partitionEvent.getOldPartition();
     Partition after = partitionEvent.getNewPartition();
+
+    // Verify whether either the name of the db or table changed or location changed.
+    if (before.getSd() == null || after.getSd() == null) {
+      return;
+    }
+    if (before.getSd().getLocation() == null || after.getSd().getLocation() == null) {
+      return;
+    }
+
+    if (before.getDbName().equals(after.getDbName()) &&
+        before.getTableName().equals(after.getTableName()) &&
+        before.getSd().getLocation().equals(after.getSd().getLocation())) {
+      return;
+    }
+
     NotificationEvent event = new NotificationEvent(0, now(),
         HCatConstants.HCAT_ALTER_PARTITION_EVENT,
         msgFactory.buildAlterPartitionMessage(partitionEvent.getTable(),before, after).toString());
@@ -229,12 +268,7 @@ public void onDropDatabase (DropDatabaseEvent dbEvent) throws MetaException {
    * @throws MetaException
    */
   public void onCreateFunction (CreateFunctionEvent fnEvent) throws MetaException {
-    Function fn = fnEvent.getFunction();
-    NotificationEvent event = new NotificationEvent(0, now(),
-        HCatConstants.HCAT_CREATE_FUNCTION_EVENT,
-        msgFactory.buildCreateFunctionMessage(fn).toString());
-    event.setDbName(fn.getDbName());
-    enqueue(event, fnEvent);
+    // Sentry doesn't care about this one
   }
 
   /**
@@ -242,12 +276,7 @@ public void onCreateFunction (CreateFunctionEvent fnEvent) throws MetaException
    * @throws MetaException
    */
   public void onDropFunction (DropFunctionEvent fnEvent) throws MetaException {
-    Function fn = fnEvent.getFunction();
-    NotificationEvent event = new NotificationEvent(0, now(),
-        HCatConstants.HCAT_DROP_FUNCTION_EVENT,
-        msgFactory.buildDropFunctionMessage(fn).toString());
-    event.setDbName(fn.getDbName());
-    enqueue(event, fnEvent);
+    // Sentry doesn't care about this one
   }
 
   /**
@@ -255,12 +284,7 @@ public void onDropFunction (DropFunctionEvent fnEvent) throws MetaException {
    * @throws MetaException
    */
   public void onAddIndex (AddIndexEvent indexEvent) throws MetaException {
-    Index index = indexEvent.getIndex();
-    NotificationEvent event = new NotificationEvent(0, now(),
-        HCatConstants.HCAT_CREATE_INDEX_EVENT,
-        msgFactory.buildCreateIndexMessage(index).toString());
-    event.setDbName(index.getDbName());
-    enqueue(event, indexEvent);
+    // Sentry doesn't care about this one
   }
 
   /**
@@ -268,12 +292,7 @@ public void onAddIndex (AddIndexEvent indexEvent) throws MetaException {
    * @throws MetaException
    */
   public void onDropIndex (DropIndexEvent indexEvent) throws MetaException {
-    Index index = indexEvent.getIndex();
-    NotificationEvent event = new NotificationEvent(0, now(),
-        HCatConstants.HCAT_DROP_INDEX_EVENT,
-        msgFactory.buildDropIndexMessage(index).toString());
-    event.setDbName(index.getDbName());
-    enqueue(event, indexEvent);
+    // Sentry doesn't care about this one
   }
 
   /**
@@ -281,23 +300,12 @@ public void onDropIndex (DropIndexEvent indexEvent) throws MetaException {
    * @throws MetaException
    */
   public void onAlterIndex (AlterIndexEvent indexEvent)  throws MetaException {
-    Index before = indexEvent.getOldIndex();
-    Index after = indexEvent.getNewIndex();
-    NotificationEvent event = new NotificationEvent(0, now(),
-        HCatConstants.HCAT_ALTER_INDEX_EVENT,
-        msgFactory.buildAlterIndexMessage(before, after).toString());
-    event.setDbName(before.getDbName());
-    enqueue(event, indexEvent);
+    // Sentry doesn't care about this one
   }
 
   @Override
   public void onInsert(InsertEvent insertEvent) throws MetaException {
-    NotificationEvent event = new NotificationEvent(0, now(), HCatConstants.HCAT_INSERT_EVENT,
-        msgFactory.buildInsertMessage(insertEvent.getDb(), insertEvent.getTable(),
-            insertEvent.getPartitionKeyValues(), insertEvent.getFiles()).toString());
-    event.setDbName(insertEvent.getDb());
-    event.setTableName(insertEvent.getTable());
-    enqueue(event, insertEvent);
+    // Sentry doesn't care about this one
   }
 
   /**
@@ -329,11 +337,9 @@ private int now() {
    *                      DB_NOTIFICATION_EVENT_ID_KEY_NAME for future reference by other listeners.
    */
   private void enqueue(NotificationEvent event, ListenerEvent listenerEvent) {
-    synchronized(NOTIFICATION_TBL_LOCK) {
-      LOG.debug("DbNotificationListener: Processing : " + event.getEventId() +
-          " : " + event.getMessage());
-      HiveMetaStore.HMSHandler.getRawStore().addNotificationEvent(event);
-    }
+    LOG.debug("DbNotificationListener: Processing : " + event.getEventId() +
+        " : " + event.getMessage());
+    HiveMetaStore.HMSHandler.getRawStore().addNotificationEvent(event);
 
       // Set the DB_NOTIFICATION_EVENT_ID for future reference by other listeners.
       if (event.isSetEventId()) {
@@ -359,9 +365,7 @@ private void enqueue(NotificationEvent event, ListenerEvent listenerEvent) {
     @Override
     public void run() {
       while (true) {
-        synchronized(NOTIFICATION_TBL_LOCK) {
-          rs.cleanNotificationEvents(ttl);
-        }
+        rs.cleanNotificationEvents(ttl);
         try {
           Thread.sleep(60000);
         } catch (InterruptedException e) {
-- 
1.7.9.5

