From bf53b540c2490ad539f06420f8fa14a58c8f1219 Mon Sep 17 00:00:00 2001
From: Peter Vary <pvary@cloudera.com>
Date: Fri, 10 Nov 2017 11:50:16 +0100
Subject: [PATCH 1319/1363] CDH-61955: Backport HIVE-17969: Metastore to alter
 table in batches of partitions when renaming
 table (Adam Szita, via Peter Vary)

Change-Id: Ie8b428a4ccb5a2126efea9a3b905e734c647bc81
---
 .../hadoop/hive/metastore/HiveAlterHandler.java    |   44 +++++++++++++-------
 .../apache/hadoop/hive/metastore/ObjectStore.java  |   40 ++++++++++++++----
 2 files changed, 62 insertions(+), 22 deletions(-)

diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
index afa8d41..09af8ed 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveAlterHandler.java
@@ -21,6 +21,7 @@
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
@@ -219,23 +220,36 @@ public void alterTable(RawStore msdb, Warehouse wh, String dbname,
 
         // also the location field in partition
         List<Partition> parts = msdb.getPartitions(dbname, name, -1);
-        for (Partition part : parts) {
-          String oldPartLoc = part.getSd().getLocation();
-          if (oldPartLoc.contains(oldTblLocPath)) {
-            URI oldUri = new Path(oldPartLoc).toUri();
-            String newPath = oldUri.getPath().replace(oldTblLocPath, newTblLocPath);
-            Path newPartLocPath = new Path(oldUri.getScheme(), oldUri.getAuthority(), newPath);
-            altps.add(ObjectPair.create(part, part.getSd().getLocation()));
-            part.getSd().setLocation(newPartLocPath.toString());
-            String oldPartName = Warehouse.makePartName(oldt.getPartitionKeys(), part.getValues());
-            try {
-              //existing partition column stats is no longer valid, remove them
-              msdb.deletePartitionColumnStatistics(dbname, name, oldPartName, part.getValues(), null);
-            } catch (InvalidInputException iie) {
-              throw new InvalidOperationException("Unable to update partition stats in table rename." + iie);
+        int partsToProcess = parts.size();
+        int partitionBatchSize = HiveConf.getIntVar(hiveConf,
+                HiveConf.ConfVars.METASTORE_BATCH_RETRIEVE_MAX);
+        int batchStart = 0;
+        while (partsToProcess > 0) {
+          int batchEnd = Math.min(batchStart + partitionBatchSize, parts.size());
+          List<Partition> partBatch = parts.subList(batchStart, batchEnd);
+          partsToProcess -= partBatch.size();
+          batchStart += partBatch.size();
+          List<List<String>> partValues = new LinkedList<>();
+
+          for (Partition part : partBatch) {
+            String oldPartLoc = part.getSd().getLocation();
+            if (oldPartLoc.contains(oldTblLocPath)) {
+              URI oldUri = new Path(oldPartLoc).toUri();
+              String newPath = oldUri.getPath().replace(oldTblLocPath, newTblLocPath);
+              Path newPartLocPath = new Path(oldUri.getScheme(), oldUri.getAuthority(), newPath);
+              altps.add(ObjectPair.create(part, part.getSd().getLocation()));
+              part.getSd().setLocation(newPartLocPath.toString());
+              String oldPartName = Warehouse.makePartName(oldt.getPartitionKeys(), part.getValues());
+              try {
+                //existing partition column stats is no longer valid, remove them
+                msdb.deletePartitionColumnStatistics(dbname, name, oldPartName, part.getValues(), null);
+              } catch (InvalidInputException iie) {
+                throw new InvalidOperationException("Unable to update partition stats in table rename." + iie);
+              }
+              partValues.add(part.getValues());
             }
-            msdb.alterPartition(dbname, name, part.getValues(), part);
           }
+          msdb.alterPartitions(dbname, name, partValues, partBatch);
         }
       } else if (MetaStoreUtils.requireCalStats(hiveConf, null, null, newt) &&
         (newt.getPartitionKeysSize() == 0)) {
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
index df1e31c..d99f543 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java
@@ -3134,7 +3134,13 @@ public void alterTable(String dbname, String name, Table newTable)
       oldt.setOwner(newt.getOwner());
       // Fully copy over the contents of the new SD into the old SD,
       // so we don't create an extra SD in the metastore db that has no references.
+      MColumnDescriptor oldCD = null;
+      MStorageDescriptor oldSD = oldt.getSd();
+      if (oldSD != null) {
+        oldCD = oldSD.getCD();
+      }
       copyMSD(newt.getSd(), oldt.getSd());
+      removeUnusedColumnDescriptor(oldCD);
       oldt.setRetention(newt.getRetention());
       oldt.setPartitionKeys(newt.getPartitionKeys());
       oldt.setTableType(newt.getTableType());
@@ -3182,12 +3188,27 @@ public void alterIndex(String dbname, String baseTblName, String name, Index new
     }
   }
 
-  private void alterPartitionNoTxn(String dbname, String name, List<String> part_vals,
+  /**
+   * Alters an existing partition. Initiates copy of SD. Returns the old CD.
+   * @param dbname
+   * @param name
+   * @param part_vals Partition values (of the original partition instance)
+   * @param newPart Partition object containing new information
+   * @return The column descriptor of the old partition instance (null if table is a view)
+   * @throws InvalidObjectException
+   * @throws MetaException
+   */
+  private MColumnDescriptor alterPartitionNoTxn(String dbname, String name, List<String> part_vals,
       Partition newPart) throws InvalidObjectException, MetaException {
     name = HiveStringUtils.normalizeIdentifier(name);
     dbname = HiveStringUtils.normalizeIdentifier(dbname);
     MPartition oldp = getMPartition(dbname, name, part_vals);
     MPartition newp = convertToMPart(newPart, false);
+    MColumnDescriptor oldCD = null;
+    MStorageDescriptor oldSD = oldp.getSd();
+    if (oldSD != null) {
+      oldCD = oldSD.getCD();
+    }
     if (oldp == null || newp == null) {
       throw new InvalidObjectException("partition does not exist.");
     }
@@ -3203,6 +3224,7 @@ private void alterPartitionNoTxn(String dbname, String name, List<String> part_v
     if (newp.getLastAccessTime() != oldp.getLastAccessTime()) {
       oldp.setLastAccessTime(newp.getLastAccessTime());
     }
+    return oldCD;
   }
 
   @Override
@@ -3212,7 +3234,8 @@ public void alterPartition(String dbname, String name, List<String> part_vals, P
     Exception e = null;
     try {
       openTransaction();
-      alterPartitionNoTxn(dbname, name, part_vals, newPart);
+      MColumnDescriptor oldCd = alterPartitionNoTxn(dbname, name, part_vals, newPart);
+      removeUnusedColumnDescriptor(oldCd);
       // commit the changes
       success = commitTransaction();
     } catch (Exception exception) {
@@ -3234,9 +3257,16 @@ public void alterPartitions(String dbname, String name, List<List<String>> part_
     try {
       openTransaction();
       Iterator<List<String>> part_val_itr = part_vals.iterator();
+      Set<MColumnDescriptor> oldCds = new HashSet<>();
       for (Partition tmpPart: newParts) {
         List<String> tmpPartVals = part_val_itr.next();
-        alterPartitionNoTxn(dbname, name, tmpPartVals, tmpPart);
+        MColumnDescriptor oldCd = alterPartitionNoTxn(dbname, name, tmpPartVals, tmpPart);
+        if (oldCd != null) {
+          oldCds.add(oldCd);
+        }
+      }
+      for (MColumnDescriptor oldCd : oldCds) {
+        removeUnusedColumnDescriptor(oldCd);
       }
       // commit the changes
       success = commitTransaction();
@@ -3253,7 +3283,6 @@ public void alterPartitions(String dbname, String name, List<List<String>> part_
 
   private void copyMSD(MStorageDescriptor newSd, MStorageDescriptor oldSd) {
     oldSd.setLocation(newSd.getLocation());
-    MColumnDescriptor oldCD = oldSd.getCD();
     // If the columns of the old column descriptor != the columns of the new one,
     // then change the old storage descriptor's column descriptor.
     // Convert the MFieldSchema's to their thrift object counterparts, because we maintain
@@ -3269,9 +3298,6 @@ private void copyMSD(MStorageDescriptor newSd, MStorageDescriptor oldSd) {
         oldSd.setCD(newSd.getCD());
     }
 
-    //If oldCd does not have any more references, then we should delete it
-    // from the backend db
-    removeUnusedColumnDescriptor(oldCD);
     oldSd.setBucketCols(newSd.getBucketCols());
     oldSd.setCompressed(newSd.isCompressed());
     oldSd.setInputFormat(newSd.getInputFormat());
-- 
1.7.9.5

