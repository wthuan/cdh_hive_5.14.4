From 1cf55e1a468a96b66801f8cecc8c59876552969b Mon Sep 17 00:00:00 2001
From: Daniel Dai <daijy@hortonworks.com>
Date: Thu, 14 Apr 2016 10:47:03 -0700
Subject: [PATCH 1250/1363] CDH-58258: HIVE-13514: TestClearDanglingScratchDir
 fail on branch-1 (Daniel Dai, reviewed by Thejas
 Nair)

Change-Id: I8e9be05c4add41dbf216ac3787d6819f0c8919d8
---
 .../ql/session/TestClearDanglingScratchDir.java    |   80 ++++++++------------
 1 file changed, 31 insertions(+), 49 deletions(-)

diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/session/TestClearDanglingScratchDir.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/session/TestClearDanglingScratchDir.java
index 1b3e1c4..98c27f1 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/session/TestClearDanglingScratchDir.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/ql/session/TestClearDanglingScratchDir.java
@@ -26,9 +26,9 @@
 import java.io.PrintWriter;
 import java.nio.channels.FileChannel;
 import java.util.Properties;
+import java.io.PrintStream;
 import java.util.UUID;
 
-import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.CommonConfigurationKeysPublic;
@@ -47,30 +47,12 @@
   private static HiveConf conf;
   private static Path scratchDir;
   private ByteArrayOutputStream stdout;
+  private ByteArrayOutputStream stderr;
   private PrintStream origStdoutPs;
-  private static File logFile;
+  private PrintStream origStderrPs;
 
   @BeforeClass
   static public void oneTimeSetup() throws Exception {
-    logFile = File.createTempFile("log", "");
-    File log4jConfig = File.createTempFile("config", ".properties");
-    log4jConfig.deleteOnExit();
-    PrintWriter pw = new PrintWriter(log4jConfig);
-    pw.println("log4j.rootLogger = INFO, file, console");
-    pw.println("log4j.appender.file = org.apache.log4j.FileAppender");
-    pw.println("log4j.appender.file.File = " + logFile.getAbsolutePath());
-    pw.println("log4j.appender.file.layout = org.apache.log4j.PatternLayout");
-    pw.println("log4j.appender.file.layout.ConversionPattern = %t %-5p %c{2} - %m%n");
-    pw.println("log4j.appender.console = org.apache.log4j.FileAppender");
-    pw.println("log4j.appender.console.Target = System.out");
-    pw.println("log4j.appender.console.layout = org.apache.log4j.PatternLayout");
-    pw.println("log4j.appender.console.layout.ConversionPattern = %t %-5p %c{2} - %m%n");
-    pw.close();
-    //System.setProperty("log4j.configurationFile", log4jConfig.getAbsolutePath());
-    Properties props = new Properties();
-    props.load(new FileInputStream(log4jConfig.getAbsolutePath()));
-    org.apache.log4j.PropertyConfigurator.configure(props);
-
     m_dfs = new MiniDFSCluster.Builder(new Configuration()).numDataNodes(1).format(true).build();
     conf = new HiveConf();
     conf.set(HiveConf.ConfVars.HIVE_SCRATCH_DIR_LOCK.toString(), "true");
@@ -92,67 +74,67 @@ static public void shutdown() throws Exception {
     m_dfs.shutdown();
   }
 
-  public void redirectOutput() throws IOException {
+  public void redirectStdOutErr() {
     stdout = new ByteArrayOutputStream();
     PrintStream psStdout = new PrintStream(stdout);
     origStdoutPs = System.out;
     System.setOut(psStdout);
 
-    FileOutputStream fos = new FileOutputStream(logFile, true);
-    FileChannel outChan = fos.getChannel();
-    outChan.truncate(0);
-    outChan.close();
-    fos.close();
+    stderr = new ByteArrayOutputStream();
+    PrintStream psStderr = new PrintStream(stderr);
+    origStderrPs = System.err;
+    System.setErr(psStderr);
   }
 
-  public void rollbackOutput() {
+  public void rollbackStdOutErr() {
     System.setOut(origStdoutPs);
+    System.setErr(origStderrPs);
   }
 
   @Test
   public void testClearDanglingScratchDir() throws Exception {
 
     // No scratch dir initially
-    redirectOutput();
-    ClearDanglingScratchDir.main(new String[]{"-s",
+    redirectStdOutErr();
+    ClearDanglingScratchDir.main(new String[]{"-v", "-s",
         m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
-    rollbackOutput();
-    Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Cannot find any scratch directory to clear"));
+    rollbackStdOutErr();
+    Assert.assertTrue(stderr.toString().contains("Cannot find any scratch directory to clear"));
 
     // Create scratch dir without lock files
     m_dfs.getFileSystem().mkdirs(new Path(new Path(scratchDir, "dummy"), UUID.randomUUID().toString()));
-    redirectOutput();
-    ClearDanglingScratchDir.main(new String[]{"-s",
+    redirectStdOutErr();
+    ClearDanglingScratchDir.main(new String[]{"-v", "-s",
         m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
-    rollbackOutput();
-    Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile),
+    rollbackStdOutErr();
+    Assert.assertEquals(StringUtils.countMatches(stderr.toString(),
         "since it does not contain " + SessionState.LOCK_FILE_NAME), 1);
-    Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Cannot find any scratch directory to clear"));
+    Assert.assertTrue(stderr.toString().contains("Cannot find any scratch directory to clear"));
 
     // One live session
     SessionState ss = SessionState.start(conf);
-    redirectOutput();
-    ClearDanglingScratchDir.main(new String[]{"-s",
+    redirectStdOutErr();
+    ClearDanglingScratchDir.main(new String[]{"-v", "-s",
         m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
-    rollbackOutput();
-    Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile), "is being used by live process"), 1);
+    rollbackStdOutErr();
+    Assert.assertEquals(StringUtils.countMatches(stderr.toString(), "is being used by live process"), 1);
 
     // One dead session with dry-run
     ss.releaseSessionLockFile();
-    redirectOutput();
-    ClearDanglingScratchDir.main(new String[]{"-r", "-s",
+    redirectStdOutErr();
+    ClearDanglingScratchDir.main(new String[]{"-r", "-v", "-s",
         m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
-    rollbackOutput();
+    rollbackStdOutErr();
     // Find one session dir to remove
     Assert.assertFalse(stdout.toString().isEmpty());
 
     // Remove the dead session dir
-    redirectOutput();
-    ClearDanglingScratchDir.main(new String[]{"-s",
+    redirectStdOutErr();
+    ClearDanglingScratchDir.main(new String[]{"-v", "-s",
         m_dfs.getFileSystem().getUri().toString() + scratchDir.toUri().toString()});
-    rollbackOutput();
-    Assert.assertTrue(FileUtils.readFileToString(logFile).contains("Removing 1 scratch directories"));
-    Assert.assertEquals(StringUtils.countMatches(FileUtils.readFileToString(logFile), "removed"), 1);
+    rollbackStdOutErr();
+    Assert.assertTrue(stderr.toString().contains("Removing 1 scratch directories"));
+    Assert.assertEquals(StringUtils.countMatches(stderr.toString(), "removed"), 1);
     ss.close();
   }
 }
-- 
1.7.9.5

