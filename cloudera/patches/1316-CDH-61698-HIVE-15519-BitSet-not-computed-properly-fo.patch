From ce4c03a48534883e13842be1e62ae4e2859dedf7 Mon Sep 17 00:00:00 2001
From: Rui Li <lirui@apache.org>
Date: Mon, 23 Jan 2017 10:46:16 +0800
Subject: [PATCH 1316/1363] CDH-61698: HIVE-15519: BitSet not computed
 properly for ColumnBuffer subset (Rui Li reviewed
 by Thejas M Nair) Cherry-picked from upstream
 branch-1. Had conflict in TestColumn as it didn't
 exist before in CDH.

(cherry picked from commit f746dc6ab68d437e85239b2487ccbb4e3bf324ec)

Change-Id: Ie18724980c76bf8f4a3457da3f8a6164f74e7197
---
 .../java/org/apache/hive/service/cli/Column.java   |   51 ++--
 .../apache/hive/service/cli/ColumnBasedSet.java    |    2 +-
 .../org/apache/hive/service/cli/TestColumn.java    |  264 ++++++++++++++++++++
 3 files changed, 296 insertions(+), 21 deletions(-)
 create mode 100644 service/src/test/org/apache/hive/service/cli/TestColumn.java

diff --git a/service/src/java/org/apache/hive/service/cli/Column.java b/service/src/java/org/apache/hive/service/cli/Column.java
index 2e21f18..3c1c1e6 100644
--- a/service/src/java/org/apache/hive/service/cli/Column.java
+++ b/service/src/java/org/apache/hive/service/cli/Column.java
@@ -25,6 +25,7 @@
 import java.util.BitSet;
 import java.util.List;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.primitives.Booleans;
 import com.google.common.primitives.Bytes;
 import com.google.common.primitives.Doubles;
@@ -80,7 +81,7 @@ public Column(Type type, BitSet nulls, Object values) {
     } else if (type == Type.BIGINT_TYPE) {
       longVars = (long[]) values;
       size = longVars.length;
-    } else if (type == Type.DOUBLE_TYPE) {
+    } else if (type == Type.DOUBLE_TYPE || type == Type.FLOAT_TYPE) {
       doubleVars = (double[]) values;
       size = doubleVars.length;
     } else if (type == Type.BINARY_TYPE) {
@@ -173,67 +174,77 @@ public Column(TColumn colValues) {
     }
   }
 
-  public Column extractSubset(int start, int end) {
-    BitSet subNulls = nulls.get(start, end);
+  /**
+   * Get a subset of this Column, starting from the 1st value.
+   *
+   * @param end index after the last value to include
+   */
+  public Column extractSubset(int end) {
+    BitSet subNulls = nulls.get(0, end);
     if (type == Type.BOOLEAN_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(boolVars, start, end));
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(boolVars, 0, end));
       boolVars = Arrays.copyOfRange(boolVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = boolVars.length;
       return subset;
     }
     if (type == Type.TINYINT_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(byteVars, start, end));
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(byteVars, 0, end));
       byteVars = Arrays.copyOfRange(byteVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = byteVars.length;
       return subset;
     }
     if (type == Type.SMALLINT_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(shortVars, start, end));
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(shortVars, 0, end));
       shortVars = Arrays.copyOfRange(shortVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = shortVars.length;
       return subset;
     }
     if (type == Type.INT_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(intVars, start, end));
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(intVars, 0, end));
       intVars = Arrays.copyOfRange(intVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = intVars.length;
       return subset;
     }
     if (type == Type.BIGINT_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(longVars, start, end));
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(longVars, 0, end));
       longVars = Arrays.copyOfRange(longVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = longVars.length;
       return subset;
     }
-    if (type == Type.DOUBLE_TYPE) {
-      Column subset = new Column(type, subNulls, Arrays.copyOfRange(doubleVars, start, end));
+    if (type == Type.DOUBLE_TYPE || type == Type.FLOAT_TYPE) {
+      Column subset = new Column(type, subNulls, Arrays.copyOfRange(doubleVars, 0, end));
       doubleVars = Arrays.copyOfRange(doubleVars, end, size);
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = doubleVars.length;
       return subset;
     }
     if (type == Type.BINARY_TYPE) {
-      Column subset = new Column(type, subNulls, binaryVars.subList(start, end));
+      Column subset = new Column(type, subNulls, binaryVars.subList(0, end));
       binaryVars = binaryVars.subList(end, binaryVars.size());
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = binaryVars.size();
       return subset;
     }
     if (type == Type.STRING_TYPE) {
-      Column subset = new Column(type, subNulls, stringVars.subList(start, end));
+      Column subset = new Column(type, subNulls, stringVars.subList(0, end));
       stringVars = stringVars.subList(end, stringVars.size());
-      nulls = nulls.get(start, size);
+      nulls = nulls.get(end, size);
       size = stringVars.size();
       return subset;
     }
     throw new IllegalStateException("invalid union object");
   }
 
+  @VisibleForTesting
+  BitSet getNulls() {
+    return nulls;
+  }
+
   private static final byte[] MASKS = new byte[] {
       0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, (byte)0x80
   };
diff --git a/service/src/java/org/apache/hive/service/cli/ColumnBasedSet.java b/service/src/java/org/apache/hive/service/cli/ColumnBasedSet.java
index 47a582e..46c8adb 100644
--- a/service/src/java/org/apache/hive/service/cli/ColumnBasedSet.java
+++ b/service/src/java/org/apache/hive/service/cli/ColumnBasedSet.java
@@ -87,7 +87,7 @@ public ColumnBasedSet extractSubset(int maxRows) {
 
     List<Column> subset = new ArrayList<Column>();
     for (int i = 0; i < columns.size(); i++) {
-      subset.add(columns.get(i).extractSubset(0, numRows));
+      subset.add(columns.get(i).extractSubset(numRows));
     }
     ColumnBasedSet result = new ColumnBasedSet(types, subset, startOffset);
     startOffset += numRows;
diff --git a/service/src/test/org/apache/hive/service/cli/TestColumn.java b/service/src/test/org/apache/hive/service/cli/TestColumn.java
new file mode 100644
index 0000000..f210890
--- /dev/null
+++ b/service/src/test/org/apache/hive/service/cli/TestColumn.java
@@ -0,0 +1,264 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.service.cli;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import java.nio.ByteBuffer;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.ThreadLocalRandom;
+
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+
+@RunWith(Parameterized.class)
+public class TestColumn {
+
+  private static final int NUM_VARS = 100;
+  private static final int NUM_NULLS = 30;
+  private static final Set<Integer> nullIndices = new HashSet<>();
+
+  private final Type type;
+  private final Object vars;
+
+  @Parameterized.Parameters
+  public static Collection<Object[]> types() {
+    return Arrays.asList(new Object[][]{
+            {Type.BOOLEAN_TYPE},
+            {Type.TINYINT_TYPE},
+            {Type.SMALLINT_TYPE},
+            {Type.INT_TYPE},
+            {Type.BIGINT_TYPE},
+            {Type.DOUBLE_TYPE},
+            {Type.FLOAT_TYPE},
+            {Type.BINARY_TYPE},
+            {Type.STRING_TYPE}
+        }
+    );
+  }
+
+  public TestColumn(Type type) {
+    this.type = type;
+    switch (type) {
+      case BOOLEAN_TYPE:
+        vars = new boolean[NUM_VARS];
+        break;
+      case TINYINT_TYPE:
+        vars = new byte[NUM_VARS];
+        break;
+      case SMALLINT_TYPE:
+        vars = new short[NUM_VARS];
+        break;
+      case INT_TYPE:
+        vars = new int[NUM_VARS];
+        break;
+      case BIGINT_TYPE:
+        vars = new long[NUM_VARS];
+        break;
+      case DOUBLE_TYPE:
+      case FLOAT_TYPE:
+        vars = new double[NUM_VARS];
+        break;
+      case BINARY_TYPE:
+        vars = Arrays.asList(new ByteBuffer[NUM_VARS]);
+        break;
+      case STRING_TYPE:
+        vars = Arrays.asList(new String[NUM_VARS]);
+        break;
+      default:
+        throw new IllegalArgumentException("Invalid type " + type);
+    }
+  }
+
+  private static void prepareNullIndices() {
+    nullIndices.clear();
+    Random random = ThreadLocalRandom.current();
+    while (nullIndices.size() != NUM_NULLS) {
+      nullIndices.add(random.nextInt(NUM_VARS));
+    }
+  }
+
+  /**
+   * Test if the nulls BitSet is maintained properly when we extract subset from ColumnBuffer.
+   * E.g. suppose we have a ColumnBuffer with nulls [0, 0, 1, 0]. When we split it evenly into
+   * two subsets, the subsets should have nulls [0, 0] and [1, 0] respectively.
+   */
+  @Test
+  public void testNullsInSubset() {
+    prepareNullIndices();
+    BitSet nulls = new BitSet(NUM_VARS);
+    for (int index : nullIndices) {
+      nulls.set(index);
+    }
+
+    Column columnBuffer = new Column(type, nulls, vars);
+    Random random = ThreadLocalRandom.current();
+
+    int remaining = NUM_VARS;
+    while (remaining > 0) {
+      int toExtract = random.nextInt(remaining) + 1;
+      Column subset = columnBuffer.extractSubset(toExtract);
+      verifyNulls(subset, NUM_VARS - remaining);
+      remaining -= toExtract;
+    }
+  }
+
+  private static void verifyNulls(Column buffer, int shift) {
+    BitSet nulls = buffer.getNulls();
+    for (int i = 0; i < buffer.size(); i++) {
+      Assert.assertEquals("BitSet in parent and subset not the same.",
+          nullIndices.contains(i + shift), nulls.get(i));
+    }
+  }
+
+  @Test
+  public void testAddValues() {
+    switch (type) {
+      case BOOLEAN_TYPE:
+        testBooleanValues();
+        break;
+      case TINYINT_TYPE:
+      case SMALLINT_TYPE:
+      case INT_TYPE:
+      case BIGINT_TYPE:
+        testAllIntegerTypeValues();
+        break;
+      case DOUBLE_TYPE:
+      case FLOAT_TYPE:
+        testFloatAndDoubleValues();
+        break;
+      case BINARY_TYPE:
+        testBinaryValues();
+        break;
+      case STRING_TYPE:
+        testStringValues();
+        break;
+      default:
+        throw new IllegalArgumentException("Invalid type " + type);
+    }
+  }
+
+  private void testAllIntegerTypeValues() {
+    Map<Type, List<Object>> integerTypesAndValues = new LinkedHashMap<Type, List<Object>>();
+
+    // Add TINYINT values
+    integerTypesAndValues.put(Type.TINYINT_TYPE, Arrays.<Object>asList(
+        Byte.MIN_VALUE, Byte.MAX_VALUE
+    ));
+
+    // Add SMALLINT values
+    integerTypesAndValues.put(Type.SMALLINT_TYPE, Arrays.<Object>asList(
+        Short.MIN_VALUE, Short.MIN_VALUE
+    ));
+
+    // Add INT values
+    integerTypesAndValues.put(Type.INT_TYPE, Arrays.<Object>asList(
+        Integer.MIN_VALUE, Integer.MAX_VALUE
+    ));
+
+    // Add BIGINT values
+    integerTypesAndValues.put(Type.BIGINT_TYPE, Arrays.<Object>asList(
+        Long.MIN_VALUE, Long.MAX_VALUE
+    ));
+
+    // Validate all integer type values are stored correctly
+    for (Map.Entry entry : integerTypesAndValues.entrySet()) {
+      Type type = (Type)entry.getKey();
+      List<Object> values = (List)entry.getValue();
+
+      Column c = new Column(type);
+      for (Object v : values) {
+        c.addValue(type, v);
+      }
+
+      assertEquals(type, c.getType());
+      assertEquals(values.size(), c.size());
+
+      for (int i=0; i<c.size(); i++) {
+        assertEquals(values.get(i), c.get(i));
+      }
+    }
+  }
+
+
+  private void testFloatAndDoubleValues() {
+    Column floatColumn = new Column(Type.FLOAT_TYPE);
+    floatColumn.addValue(Type.FLOAT_TYPE, 1.1f);
+    floatColumn.addValue(Type.FLOAT_TYPE, 2.033f);
+
+    // FLOAT_TYPE is treated as DOUBLE_TYPE
+    assertEquals(Type.DOUBLE_TYPE, floatColumn.getType());
+    assertEquals(2, floatColumn.size());
+    assertEquals(1.100000023841858, floatColumn.get(0));
+    assertEquals(2.0329999923706055, floatColumn.get(1));
+
+    Column doubleColumn = new Column(Type.DOUBLE_TYPE);
+    doubleColumn.addValue(Type.DOUBLE_TYPE, 1.1);
+    doubleColumn.addValue(Type.DOUBLE_TYPE, 2.033);
+
+    assertEquals(Type.DOUBLE_TYPE, doubleColumn.getType());
+    assertEquals(2, doubleColumn.size());
+    assertEquals(1.1, doubleColumn.get(0));
+    assertEquals(2.033, doubleColumn.get(1));
+  }
+
+
+  private void testBooleanValues() {
+    Column boolColumn = new Column(Type.BOOLEAN_TYPE);
+    boolColumn.addValue(Type.BOOLEAN_TYPE, true);
+    boolColumn.addValue(Type.BOOLEAN_TYPE, false);
+
+    assertEquals(Type.BOOLEAN_TYPE, boolColumn.getType());
+    assertEquals(2, boolColumn.size());
+    assertEquals(true, boolColumn.get(0));
+    assertEquals(false, boolColumn.get(1));
+  }
+
+
+  private void testStringValues() {
+    Column stringColumn = new Column(Type.STRING_TYPE);
+    stringColumn.addValue(Type.STRING_TYPE, "12abc456");
+    stringColumn.addValue(Type.STRING_TYPE, "~special$&string");
+
+    assertEquals(Type.STRING_TYPE, stringColumn.getType());
+    assertEquals(2, stringColumn.size());
+    assertEquals("12abc456", stringColumn.get(0));
+    assertEquals("~special$&string", stringColumn.get(1));
+  }
+
+
+  private void testBinaryValues() {
+    Column binaryColumn = new Column(Type.BINARY_TYPE);
+    binaryColumn.addValue(Type.BINARY_TYPE, new byte[]{-1, 0, 3, 4});
+
+    assertEquals(Type.BINARY_TYPE, binaryColumn.getType());
+    assertEquals(1, binaryColumn.size());
+    assertArrayEquals(new byte[]{-1, 0, 3, 4}, (byte[]) binaryColumn.get(0));
+  }
+}
-- 
1.7.9.5

