From e0e25bac3756c7f7f2ddfbd8a96c509715feb969 Mon Sep 17 00:00:00 2001
From: Vihang Karajgaonkar <vihang@cloudera.com>
Date: Tue, 5 Sep 2017 10:43:10 -0700
Subject: [PATCH 1270/1363] CDH-58807 : HIVE-12270: Add DBTokenStore support
 to HS2 delegation token (Chaoyu Tang, reviewed by
 Szehon Ho)

Change-Id: Id2aab6c528947ce9f8748ea98cf0f18654c3f003
---
 .../java/org/apache/hive/minikdc/MiniHiveKdc.java  |   20 +-
 .../hive/minikdc/TestJdbcWithDBTokenStore.java     |   40 +
 .../hadoop/hive/thrift/TestDBTokenStore.java       |    3 +-
 metastore/if/hive_metastore.thrift                 |   24 +
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp |11182 ++++++++++++--------
 .../src/gen/thrift/gen-cpp/ThriftHiveMetastore.h   | 1405 ++-
 .../ThriftHiveMetastore_server.skeleton.cpp        |   40 +
 .../hive/metastore/api/ThriftHiveMetastore.java    | 8308 +++++++++++++--
 .../gen-php/metastore/ThriftHiveMetastore.php      | 1668 +++
 .../hive_metastore/ThriftHiveMetastore-remote      |   56 +
 .../gen-py/hive_metastore/ThriftHiveMetastore.py   | 1376 +++
 .../src/gen/thrift/gen-rb/thrift_hive_metastore.rb |  450 +
 .../hadoop/hive/metastore/HiveMetaStore.java       |  159 +
 .../hadoop/hive/metastore/HiveMetaStoreClient.java |   42 +
 .../hadoop/hive/metastore/IMetaStoreClient.java    |   20 +
 .../apache/hive/service/auth/HiveAuthFactory.java  |   26 +-
 .../apache/hadoop/hive/thrift/DBTokenStore.java    |   49 +-
 17 files changed, 19393 insertions(+), 5475 deletions(-)
 create mode 100644 itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestJdbcWithDBTokenStore.java

diff --git a/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/MiniHiveKdc.java b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/MiniHiveKdc.java
index e191663..de9efcd 100644
--- a/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/MiniHiveKdc.java
+++ b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/MiniHiveKdc.java
@@ -192,5 +192,21 @@ public static MiniHS2 getMiniHS2WithKerb(MiniHiveKdc miniHiveKdc, HiveConf hiveC
 	return new MiniHS2.Builder().withConf(hiveConf).withMiniKdc(hivePrincipal, hiveKeytab).
 		withAuthenticationType(authType).build();
   }
- }
- 
+
+  /**
+   * Create a MiniHS2 with the hive service principal and keytab in MiniHiveKdc
+   * @param miniHiveKdc
+   * @param hiveConf
+   * @return new MiniHS2 instance
+   * @throws Exception
+   */
+  public static MiniHS2 getMiniHS2WithKerbWithRemoteHMS(MiniHiveKdc miniHiveKdc, HiveConf hiveConf) throws Exception {
+    String hivePrincipal =
+        miniHiveKdc.getFullyQualifiedServicePrincipal(MiniHiveKdc.HIVE_SERVICE_PRINCIPAL);
+    String hiveKeytab = miniHiveKdc.getKeyTabFile(
+        miniHiveKdc.getServicePrincipalForUser(MiniHiveKdc.HIVE_SERVICE_PRINCIPAL));
+
+    return new MiniHS2.Builder().withConf(hiveConf).withRemoteMetastore().
+        withMiniKdc(hivePrincipal, hiveKeytab).build();
+  }
+}
diff --git a/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestJdbcWithDBTokenStore.java b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestJdbcWithDBTokenStore.java
new file mode 100644
index 0000000..d690aaa
--- /dev/null
+++ b/itests/hive-minikdc/src/test/java/org/apache/hive/minikdc/TestJdbcWithDBTokenStore.java
@@ -0,0 +1,40 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hive.minikdc;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.apache.hive.jdbc.miniHS2.MiniHS2;
+import org.junit.BeforeClass;
+
+public class TestJdbcWithDBTokenStore extends TestJdbcWithMiniKdc{
+
+  @BeforeClass
+  public static void beforeTest() throws Exception {
+    Class.forName(MiniHS2.getJdbcDriverName());
+    confOverlay.put(ConfVars.HIVE_SERVER2_SESSION_HOOK.varname,
+        SessionHookTest.class.getName());
+
+    HiveConf hiveConf = new HiveConf();
+    hiveConf.setVar(ConfVars.METASTORE_CLUSTER_DELEGATION_TOKEN_STORE_CLS, "org.apache.hadoop.hive.thrift.DBTokenStore");
+    miniHiveKdc = MiniHiveKdc.getMiniHiveKdc(hiveConf);
+    miniHS2 = MiniHiveKdc.getMiniHS2WithKerbWithRemoteHMS(miniHiveKdc, hiveConf);
+    miniHS2.start(confOverlay);
+  }
+}
\ No newline at end of file
diff --git a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestDBTokenStore.java b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestDBTokenStore.java
index f5934ee..4bfa224 100644
--- a/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestDBTokenStore.java
+++ b/itests/hive-unit/src/test/java/org/apache/hadoop/hive/thrift/TestDBTokenStore.java
@@ -27,6 +27,7 @@
 import org.apache.hadoop.hive.metastore.api.MetaException;
 import org.apache.hadoop.hive.metastore.api.NoSuchObjectException;
 import org.apache.hadoop.hive.thrift.DelegationTokenStore.TokenStoreException;
+import org.apache.hadoop.hive.thrift.HadoopThriftAuthBridge.Server.ServerMode;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.security.token.delegation.AbstractDelegationTokenSecretManager.DelegationTokenInformation;
 import org.apache.hadoop.security.token.delegation.HiveDelegationTokenSupport;
@@ -37,7 +38,7 @@
   public void testDBTokenStore() throws TokenStoreException, MetaException, IOException {
 
     DelegationTokenStore ts = new DBTokenStore();
-    ts.init(new HMSHandler("Test handler"), null);
+    ts.init(new HMSHandler("Test handler"), ServerMode.METASTORE);
     assertEquals(0, ts.getMasterKeys().length);
     assertEquals(false,ts.removeMasterKey(-1));
     try{
diff --git a/metastore/if/hive_metastore.thrift b/metastore/if/hive_metastore.thrift
index a30502e..ddb93f0 100755
--- a/metastore/if/hive_metastore.thrift
+++ b/metastore/if/hive_metastore.thrift
@@ -1169,6 +1169,30 @@ service ThriftHiveMetastore extends fb303.FacebookService
   // method to cancel delegation token obtained from metastore server
   void cancel_delegation_token(1:string token_str_form) throws (1:MetaException o1)
 
+  // add a delegation token
+  bool add_token(1:string token_identifier, 2:string delegation_token)
+
+  // remove a delegation token
+  bool remove_token(1:string token_identifier)
+
+  // get a delegation token by identifier
+  string get_token(1:string token_identifier)
+
+  // get all delegation token identifiers
+  list<string> get_all_token_identifiers()
+
+  // add master key
+  i32 add_master_key(1:string key) throws (1:MetaException o1)
+
+  // update master key
+  void update_master_key(1:i32 seq_number, 2:string key) throws (1:NoSuchObjectException o1, 2:MetaException o2)
+
+  // remove master key
+  bool remove_master_key(1:i32 key_seq)
+
+  // get master keys
+  list<string> get_master_keys()
+
   // Transaction and lock management calls
   // Get just list of open transactions
   GetOpenTxnsResponse get_open_txns()
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
index bae49c4..7bde091 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.cpp
@@ -26493,7 +26493,7 @@ uint32_t ThriftHiveMetastore_cancel_delegation_token_presult::read(::apache::thr
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_token_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26511,7 +26511,28 @@ uint32_t ThriftHiveMetastore_get_open_txns_args::read(::apache::thrift::protocol
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->token_identifier);
+          this->__isset.token_identifier = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->delegation_token);
+          this->__isset.delegation_token = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -26520,25 +26541,41 @@ uint32_t ThriftHiveMetastore_get_open_txns_args::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_token_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_token_args");
+
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->token_identifier);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("delegation_token", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->delegation_token);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_token_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_token_pargs");
+
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->token_identifier)));
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("delegation_token", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString((*(this->delegation_token)));
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_token_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26559,8 +26596,8 @@ uint32_t ThriftHiveMetastore_get_open_txns_result::read(::apache::thrift::protoc
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool(this->success);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26578,15 +26615,15 @@ uint32_t ThriftHiveMetastore_get_open_txns_result::read(::apache::thrift::protoc
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_token_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_token_result");
 
   if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
+    xfer += oprot->writeBool(this->success);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -26594,7 +26631,7 @@ uint32_t ThriftHiveMetastore_get_open_txns_result::write(::apache::thrift::proto
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_token_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26615,8 +26652,8 @@ uint32_t ThriftHiveMetastore_get_open_txns_presult::read(::apache::thrift::proto
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool((*(this->success)));
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26634,7 +26671,7 @@ uint32_t ThriftHiveMetastore_get_open_txns_presult::read(::apache::thrift::proto
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_token_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26652,7 +26689,20 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_args::read(::apache::thrift::pro
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->token_identifier);
+          this->__isset.token_identifier = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -26661,25 +26711,33 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_args::read(::apache::thrift::pro
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_token_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_token_args");
+
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->token_identifier);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_token_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_token_pargs");
+
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->token_identifier)));
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_token_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26700,8 +26758,8 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_result::read(::apache::thrift::p
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool(this->success);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26719,15 +26777,15 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_result::read(::apache::thrift::p
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_token_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_token_result");
 
   if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
+    xfer += oprot->writeBool(this->success);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -26735,7 +26793,7 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_result::write(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_open_txns_info_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_token_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26756,8 +26814,8 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_presult::read(::apache::thrift::
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool((*(this->success)));
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26775,7 +26833,7 @@ uint32_t ThriftHiveMetastore_get_open_txns_info_presult::read(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_token_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26796,9 +26854,9 @@ uint32_t ThriftHiveMetastore_open_txns_args::read(::apache::thrift::protocol::TP
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->token_identifier);
+          this->__isset.token_identifier = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -26815,12 +26873,12 @@ uint32_t ThriftHiveMetastore_open_txns_args::read(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_token_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_token_args");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->token_identifier);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -26828,12 +26886,12 @@ uint32_t ThriftHiveMetastore_open_txns_args::write(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_token_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_token_pargs");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldBegin("token_identifier", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->token_identifier)));
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -26841,7 +26899,7 @@ uint32_t ThriftHiveMetastore_open_txns_pargs::write(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_token_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26862,8 +26920,8 @@ uint32_t ThriftHiveMetastore_open_txns_result::read(::apache::thrift::protocol::
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->success);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26881,15 +26939,15 @@ uint32_t ThriftHiveMetastore_open_txns_result::read(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_token_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_token_result");
 
   if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
+    xfer += oprot->writeString(this->success);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -26897,7 +26955,7 @@ uint32_t ThriftHiveMetastore_open_txns_result::write(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_open_txns_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_token_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26918,8 +26976,8 @@ uint32_t ThriftHiveMetastore_open_txns_presult::read(::apache::thrift::protocol:
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString((*(this->success)));
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
@@ -26937,7 +26995,7 @@ uint32_t ThriftHiveMetastore_open_txns_presult::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -26955,20 +27013,7 @@ uint32_t ThriftHiveMetastore_abort_txn_args::read(::apache::thrift::protocol::TP
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
+    xfer += iprot->skip(ftype);
     xfer += iprot->readFieldEnd();
   }
 
@@ -26977,33 +27022,25 @@ uint32_t ThriftHiveMetastore_abort_txn_args::read(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_args");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_token_identifiers_args");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_pargs");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_token_identifiers_pargs");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27023,10 +27060,22 @@ uint32_t ThriftHiveMetastore_abort_txn_result::read(::apache::thrift::protocol::
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->success.clear();
+            uint32_t _size982;
+            ::apache::thrift::protocol::TType _etype985;
+            xfer += iprot->readListBegin(_etype985, _size982);
+            this->success.resize(_size982);
+            uint32_t _i986;
+            for (_i986 = 0; _i986 < _size982; ++_i986)
+            {
+              xfer += iprot->readString(this->success[_i986]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27043,15 +27092,23 @@ uint32_t ThriftHiveMetastore_abort_txn_result::read(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_all_token_identifiers_result");
 
-  if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
+      std::vector<std::string> ::const_iterator _iter987;
+      for (_iter987 = this->success.begin(); _iter987 != this->success.end(); ++_iter987)
+      {
+        xfer += oprot->writeString((*_iter987));
+      }
+      xfer += oprot->writeListEnd();
+    }
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -27059,7 +27116,7 @@ uint32_t ThriftHiveMetastore_abort_txn_result::write(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_abort_txn_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_all_token_identifiers_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27079,10 +27136,22 @@ uint32_t ThriftHiveMetastore_abort_txn_presult::read(::apache::thrift::protocol:
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            (*(this->success)).clear();
+            uint32_t _size988;
+            ::apache::thrift::protocol::TType _etype991;
+            xfer += iprot->readListBegin(_etype991, _size988);
+            (*(this->success)).resize(_size988);
+            uint32_t _i992;
+            for (_i992 = 0; _i992 < _size988; ++_i992)
+            {
+              xfer += iprot->readString((*(this->success))[_i992]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27099,7 +27168,7 @@ uint32_t ThriftHiveMetastore_abort_txn_presult::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_master_key_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27120,9 +27189,9 @@ uint32_t ThriftHiveMetastore_commit_txn_args::read(::apache::thrift::protocol::T
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->key);
+          this->__isset.key = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27139,12 +27208,12 @@ uint32_t ThriftHiveMetastore_commit_txn_args::read(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_master_key_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_master_key_args");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString(this->key);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27152,12 +27221,12 @@ uint32_t ThriftHiveMetastore_commit_txn_args::write(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_master_key_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_master_key_pargs");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
+  xfer += oprot->writeString((*(this->key)));
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27165,7 +27234,7 @@ uint32_t ThriftHiveMetastore_commit_txn_pargs::write(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_master_key_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27185,18 +27254,18 @@ uint32_t ThriftHiveMetastore_commit_txn_result::read(::apache::thrift::protocol:
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_I32) {
+          xfer += iprot->readI32(this->success);
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      case 2:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27213,27 +27282,27 @@ uint32_t ThriftHiveMetastore_commit_txn_result::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_add_master_key_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_add_master_key_result");
 
-  if (this->__isset.o1) {
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
+    xfer += oprot->writeI32(this->success);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
     xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
     xfer += this->o1.write(oprot);
     xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o2) {
-    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
-    xfer += this->o2.write(oprot);
-    xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_commit_txn_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_add_master_key_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27253,18 +27322,18 @@ uint32_t ThriftHiveMetastore_commit_txn_presult::read(::apache::thrift::protocol
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_I32) {
+          xfer += iprot->readI32((*(this->success)));
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      case 2:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27281,7 +27350,7 @@ uint32_t ThriftHiveMetastore_commit_txn_presult::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_update_master_key_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27302,31 +27371,43 @@ uint32_t ThriftHiveMetastore_lock_args::read(::apache::thrift::protocol::TProtoc
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
+        if (ftype == ::apache::thrift::protocol::T_I32) {
+          xfer += iprot->readI32(this->seq_number);
+          this->__isset.seq_number = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
-    xfer += iprot->readFieldEnd();
-  }
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->key);
+          this->__isset.key = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
 
   xfer += iprot->readStructEnd();
 
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_update_master_key_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_update_master_key_args");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldBegin("seq_number", ::apache::thrift::protocol::T_I32, 1);
+  xfer += oprot->writeI32(this->seq_number);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString(this->key);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27334,12 +27415,16 @@ uint32_t ThriftHiveMetastore_lock_args::write(::apache::thrift::protocol::TProto
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_update_master_key_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_update_master_key_pargs");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldBegin("seq_number", ::apache::thrift::protocol::T_I32, 1);
+  xfer += oprot->writeI32((*(this->seq_number)));
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
+  xfer += oprot->writeString((*(this->key)));
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27347,7 +27432,7 @@ uint32_t ThriftHiveMetastore_lock_pargs::write(::apache::thrift::protocol::TProt
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_update_master_key_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27367,14 +27452,6 @@ uint32_t ThriftHiveMetastore_lock_result::read(::apache::thrift::protocol::TProt
     }
     switch (fid)
     {
-      case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
-          this->__isset.success = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->o1.read(iprot);
@@ -27403,17 +27480,13 @@ uint32_t ThriftHiveMetastore_lock_result::read(::apache::thrift::protocol::TProt
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_update_master_key_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_update_master_key_result");
 
-  if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o1) {
+  if (this->__isset.o1) {
     xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
     xfer += this->o1.write(oprot);
     xfer += oprot->writeFieldEnd();
@@ -27427,7 +27500,7 @@ uint32_t ThriftHiveMetastore_lock_result::write(::apache::thrift::protocol::TPro
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_lock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_update_master_key_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27447,14 +27520,6 @@ uint32_t ThriftHiveMetastore_lock_presult::read(::apache::thrift::protocol::TPro
     }
     switch (fid)
     {
-      case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
-          this->__isset.success = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
           xfer += this->o1.read(iprot);
@@ -27483,7 +27548,7 @@ uint32_t ThriftHiveMetastore_lock_presult::read(::apache::thrift::protocol::TPro
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_master_key_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27504,9 +27569,9 @@ uint32_t ThriftHiveMetastore_check_lock_args::read(::apache::thrift::protocol::T
     switch (fid)
     {
       case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
+        if (ftype == ::apache::thrift::protocol::T_I32) {
+          xfer += iprot->readI32(this->key_seq);
+          this->__isset.key_seq = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27523,12 +27588,12 @@ uint32_t ThriftHiveMetastore_check_lock_args::read(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_master_key_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_master_key_args");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 1);
+  xfer += oprot->writeI32(this->key_seq);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27536,12 +27601,12 @@ uint32_t ThriftHiveMetastore_check_lock_args::write(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_master_key_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_master_key_pargs");
 
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldBegin("key_seq", ::apache::thrift::protocol::T_I32, 1);
+  xfer += oprot->writeI32((*(this->key_seq)));
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -27549,7 +27614,7 @@ uint32_t ThriftHiveMetastore_check_lock_pargs::write(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_master_key_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27570,37 +27635,13 @@ uint32_t ThriftHiveMetastore_check_lock_result::read(::apache::thrift::protocol:
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool(this->success);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o3.read(iprot);
-          this->__isset.o3 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -27613,27 +27654,15 @@ uint32_t ThriftHiveMetastore_check_lock_result::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_remove_master_key_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_remove_master_key_result");
 
   if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o2) {
-    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
-    xfer += this->o2.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o3) {
-    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
-    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 0);
+    xfer += oprot->writeBool(this->success);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -27641,7 +27670,7 @@ uint32_t ThriftHiveMetastore_check_lock_result::write(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_check_lock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_remove_master_key_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27662,37 +27691,13 @@ uint32_t ThriftHiveMetastore_check_lock_presult::read(::apache::thrift::protocol
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
+        if (ftype == ::apache::thrift::protocol::T_BOOL) {
+          xfer += iprot->readBool((*(this->success)));
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o3.read(iprot);
-          this->__isset.o3 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -27705,7 +27710,7 @@ uint32_t ThriftHiveMetastore_check_lock_presult::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_master_keys_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27723,20 +27728,7 @@ uint32_t ThriftHiveMetastore_unlock_args::read(::apache::thrift::protocol::TProt
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
+    xfer += iprot->skip(ftype);
     xfer += iprot->readFieldEnd();
   }
 
@@ -27745,33 +27737,25 @@ uint32_t ThriftHiveMetastore_unlock_args::read(::apache::thrift::protocol::TProt
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_master_keys_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_args");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_master_keys_args");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_master_keys_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_pargs");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_master_keys_pargs");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_master_keys_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27791,18 +27775,22 @@ uint32_t ThriftHiveMetastore_unlock_result::read(::apache::thrift::protocol::TPr
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            this->success.clear();
+            uint32_t _size993;
+            ::apache::thrift::protocol::TType _etype996;
+            xfer += iprot->readListBegin(_etype996, _size993);
+            this->success.resize(_size993);
+            uint32_t _i997;
+            for (_i997 = 0; _i997 < _size993; ++_i997)
+            {
+              xfer += iprot->readString(this->success[_i997]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27819,19 +27807,23 @@ uint32_t ThriftHiveMetastore_unlock_result::read(::apache::thrift::protocol::TPr
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_master_keys_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_master_keys_result");
 
-  if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o2) {
-    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
-    xfer += this->o2.write(oprot);
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
+    {
+      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->success.size()));
+      std::vector<std::string> ::const_iterator _iter998;
+      for (_iter998 = this->success.begin(); _iter998 != this->success.end(); ++_iter998)
+      {
+        xfer += oprot->writeString((*_iter998));
+      }
+      xfer += oprot->writeListEnd();
+    }
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -27839,7 +27831,7 @@ uint32_t ThriftHiveMetastore_unlock_result::write(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_unlock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_master_keys_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27859,18 +27851,22 @@ uint32_t ThriftHiveMetastore_unlock_presult::read(::apache::thrift::protocol::TP
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_LIST) {
+          {
+            (*(this->success)).clear();
+            uint32_t _size999;
+            ::apache::thrift::protocol::TType _etype1002;
+            xfer += iprot->readListBegin(_etype1002, _size999);
+            (*(this->success)).resize(_size999);
+            uint32_t _i1003;
+            for (_i1003 = 0; _i1003 < _size999; ++_i1003)
+            {
+              xfer += iprot->readString((*(this->success))[_i1003]);
+            }
+            xfer += iprot->readListEnd();
+          }
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -27887,7 +27883,7 @@ uint32_t ThriftHiveMetastore_unlock_presult::read(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27905,20 +27901,7 @@ uint32_t ThriftHiveMetastore_show_locks_args::read(::apache::thrift::protocol::T
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->rqst.read(iprot);
-          this->__isset.rqst = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
+    xfer += iprot->skip(ftype);
     xfer += iprot->readFieldEnd();
   }
 
@@ -27927,33 +27910,25 @@ uint32_t ThriftHiveMetastore_show_locks_args::read(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_args");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->rqst.write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_args");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_pargs");
-
-  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->rqst)).write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_pargs");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -27993,11 +27968,11 @@ uint32_t ThriftHiveMetastore_show_locks_result::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_result");
 
   if (this->__isset.success) {
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
@@ -28009,7 +27984,7 @@ uint32_t ThriftHiveMetastore_show_locks_result::write(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_locks_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28049,7 +28024,7 @@ uint32_t ThriftHiveMetastore_show_locks_presult::read(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_info_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28067,20 +28042,7 @@ uint32_t ThriftHiveMetastore_heartbeat_args::read(::apache::thrift::protocol::TP
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    switch (fid)
-    {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->ids.read(iprot);
-          this->__isset.ids = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      default:
-        xfer += iprot->skip(ftype);
-        break;
-    }
+    xfer += iprot->skip(ftype);
     xfer += iprot->readFieldEnd();
   }
 
@@ -28089,33 +28051,25 @@ uint32_t ThriftHiveMetastore_heartbeat_args::read(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_info_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_args");
-
-  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->ids.write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_args");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_info_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_pargs");
-
-  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->ids)).write(oprot);
-  xfer += oprot->writeFieldEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_pargs");
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_info_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28135,26 +28089,10 @@ uint32_t ThriftHiveMetastore_heartbeat_result::read(::apache::thrift::protocol::
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
+      case 0:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o3.read(iprot);
-          this->__isset.o3 = true;
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -28171,23 +28109,15 @@ uint32_t ThriftHiveMetastore_heartbeat_result::read(::apache::thrift::protocol::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_get_open_txns_info_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_open_txns_info_result");
 
-  if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o2) {
-    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
-    xfer += this->o2.write(oprot);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o3) {
-    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
-    xfer += this->o3.write(oprot);
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -28195,7 +28125,7 @@ uint32_t ThriftHiveMetastore_heartbeat_result::write(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_get_open_txns_info_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28215,26 +28145,10 @@ uint32_t ThriftHiveMetastore_heartbeat_presult::read(::apache::thrift::protocol:
     }
     switch (fid)
     {
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 2:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o2.read(iprot);
-          this->__isset.o2 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
-      case 3:
+      case 0:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o3.read(iprot);
-          this->__isset.o3 = true;
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -28251,7 +28165,7 @@ uint32_t ThriftHiveMetastore_heartbeat_presult::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_open_txns_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28273,8 +28187,8 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::read(::apache::thrift::pr
     {
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->txns.read(iprot);
-          this->__isset.txns = true;
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -28291,12 +28205,12 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::read(::apache::thrift::pr
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_open_txns_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_args");
 
-  xfer += oprot->writeFieldBegin("txns", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += this->txns.write(oprot);
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -28304,12 +28218,12 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::write(::apache::thrift::p
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_open_txns_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_pargs");
 
-  xfer += oprot->writeFieldBegin("txns", ::apache::thrift::protocol::T_STRUCT, 1);
-  xfer += (*(this->txns)).write(oprot);
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
   xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
@@ -28317,7 +28231,7 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_pargs::write(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_open_txns_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28357,11 +28271,11 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::read(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_open_txns_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_open_txns_result");
 
   if (this->__isset.success) {
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
@@ -28373,7 +28287,7 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::write(::apache::thrift:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_heartbeat_txn_range_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_open_txns_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28413,7 +28327,7 @@ uint32_t ThriftHiveMetastore_heartbeat_txn_range_presult::read(::apache::thrift:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_abort_txn_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28453,9 +28367,9 @@ uint32_t ThriftHiveMetastore_compact_args::read(::apache::thrift::protocol::TPro
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_abort_txn_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_args");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += this->rqst.write(oprot);
@@ -28466,9 +28380,9 @@ uint32_t ThriftHiveMetastore_compact_args::write(::apache::thrift::protocol::TPr
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_abort_txn_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_pargs");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += (*(this->rqst)).write(oprot);
@@ -28479,7 +28393,7 @@ uint32_t ThriftHiveMetastore_compact_pargs::write(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_abort_txn_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28497,7 +28411,20 @@ uint32_t ThriftHiveMetastore_compact_result::read(::apache::thrift::protocol::TP
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -28506,18 +28433,23 @@ uint32_t ThriftHiveMetastore_compact_result::read(::apache::thrift::protocol::TP
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_abort_txn_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_abort_txn_result");
 
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_compact_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_abort_txn_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28535,7 +28467,20 @@ uint32_t ThriftHiveMetastore_compact_presult::read(::apache::thrift::protocol::T
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -28544,7 +28489,7 @@ uint32_t ThriftHiveMetastore_compact_presult::read(::apache::thrift::protocol::T
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_commit_txn_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28584,9 +28529,9 @@ uint32_t ThriftHiveMetastore_show_compact_args::read(::apache::thrift::protocol:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_commit_txn_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_args");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += this->rqst.write(oprot);
@@ -28597,9 +28542,9 @@ uint32_t ThriftHiveMetastore_show_compact_args::write(::apache::thrift::protocol
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_commit_txn_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_pargs");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += (*(this->rqst)).write(oprot);
@@ -28610,7 +28555,7 @@ uint32_t ThriftHiveMetastore_show_compact_pargs::write(::apache::thrift::protoco
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_commit_txn_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28630,10 +28575,18 @@ uint32_t ThriftHiveMetastore_show_compact_result::read(::apache::thrift::protoco
     }
     switch (fid)
     {
-      case 0:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
-          this->__isset.success = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -28650,15 +28603,19 @@ uint32_t ThriftHiveMetastore_show_compact_result::read(::apache::thrift::protoco
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_commit_txn_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_commit_txn_result");
 
-  if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -28666,7 +28623,7 @@ uint32_t ThriftHiveMetastore_show_compact_result::write(::apache::thrift::protoc
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_show_compact_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_commit_txn_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28686,10 +28643,18 @@ uint32_t ThriftHiveMetastore_show_compact_presult::read(::apache::thrift::protoc
     }
     switch (fid)
     {
-      case 0:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
-          this->__isset.success = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -28706,7 +28671,7 @@ uint32_t ThriftHiveMetastore_show_compact_presult::read(::apache::thrift::protoc
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_lock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28746,9 +28711,9 @@ uint32_t ThriftHiveMetastore_get_next_notification_args::read(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_lock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_args");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += this->rqst.write(oprot);
@@ -28759,9 +28724,9 @@ uint32_t ThriftHiveMetastore_get_next_notification_args::write(::apache::thrift:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_lock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_pargs");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += (*(this->rqst)).write(oprot);
@@ -28772,7 +28737,7 @@ uint32_t ThriftHiveMetastore_get_next_notification_pargs::write(::apache::thrift
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_lock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28800,6 +28765,22 @@ uint32_t ThriftHiveMetastore_get_next_notification_result::read(::apache::thrift
           xfer += iprot->skip(ftype);
         }
         break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -28812,23 +28793,31 @@ uint32_t ThriftHiveMetastore_get_next_notification_result::read(::apache::thrift
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_lock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_lock_result");
 
   if (this->__isset.success) {
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
     xfer += this->success.write(oprot);
     xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_next_notification_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_lock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28856,6 +28845,22 @@ uint32_t ThriftHiveMetastore_get_next_notification_presult::read(::apache::thrif
           xfer += iprot->skip(ftype);
         }
         break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -28868,7 +28873,7 @@ uint32_t ThriftHiveMetastore_get_next_notification_presult::read(::apache::thrif
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_check_lock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28886,7 +28891,20 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::read(::apache
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -28895,25 +28913,33 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::read(::apache
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_check_lock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_check_lock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_check_lock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28941,6 +28967,30 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::read(::apac
           xfer += iprot->skip(ftype);
         }
         break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -28953,23 +29003,35 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::read(::apac
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_check_lock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_check_lock_result");
 
   if (this->__isset.success) {
     xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
     xfer += this->success.write(oprot);
     xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o3) {
+    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
+    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_current_notificationEventId_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_check_lock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -28997,6 +29059,30 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_presult::read(::apa
           xfer += iprot->skip(ftype);
         }
         break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -29009,7 +29095,7 @@ uint32_t ThriftHiveMetastore_get_current_notificationEventId_presult::read(::apa
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_unlock_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29049,9 +29135,9 @@ uint32_t ThriftHiveMetastore_fire_listener_event_args::read(::apache::thrift::pr
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_unlock_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_args");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += this->rqst.write(oprot);
@@ -29062,9 +29148,9 @@ uint32_t ThriftHiveMetastore_fire_listener_event_args::write(::apache::thrift::p
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_unlock_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_pargs");
 
   xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
   xfer += (*(this->rqst)).write(oprot);
@@ -29075,7 +29161,7 @@ uint32_t ThriftHiveMetastore_fire_listener_event_pargs::write(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_unlock_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29095,10 +29181,18 @@ uint32_t ThriftHiveMetastore_fire_listener_event_result::read(::apache::thrift::
     }
     switch (fid)
     {
-      case 0:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->success.read(iprot);
-          this->__isset.success = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -29115,15 +29209,19 @@ uint32_t ThriftHiveMetastore_fire_listener_event_result::read(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_unlock_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_unlock_result");
 
-  if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
-    xfer += this->success.write(oprot);
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -29131,7 +29229,7 @@ uint32_t ThriftHiveMetastore_fire_listener_event_result::write(::apache::thrift:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_fire_listener_event_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_unlock_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29151,10 +29249,18 @@ uint32_t ThriftHiveMetastore_fire_listener_event_presult::read(::apache::thrift:
     }
     switch (fid)
     {
-      case 0:
+      case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += (*(this->success)).read(iprot);
-          this->__isset.success = true;
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -29171,7 +29277,7 @@ uint32_t ThriftHiveMetastore_fire_listener_event_presult::read(::apache::thrift:
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_show_locks_args::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29189,7 +29295,20 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::read(::apache::thrift::
     if (ftype == ::apache::thrift::protocol::T_STOP) {
       break;
     }
-    xfer += iprot->skip(ftype);
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
     xfer += iprot->readFieldEnd();
   }
 
@@ -29198,25 +29317,33 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::read(::apache::thrift::
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_show_locks_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_args");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_show_locks_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
   uint32_t xfer = 0;
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_pargs");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
 
   xfer += oprot->writeFieldStop();
   xfer += oprot->writeStructEnd();
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_show_locks_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29237,21 +29364,13 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::read(::apache::thrift
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString(this->success);
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
-      case 1:
-        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
-        } else {
-          xfer += iprot->skip(ftype);
-        }
-        break;
       default:
         xfer += iprot->skip(ftype);
         break;
@@ -29264,19 +29383,15 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::read(::apache::thrift
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+uint32_t ThriftHiveMetastore_show_locks_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
   uint32_t xfer = 0;
 
-  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_result");
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_locks_result");
 
   if (this->__isset.success) {
-    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
-    xfer += oprot->writeString(this->success);
-    xfer += oprot->writeFieldEnd();
-  } else if (this->__isset.o1) {
-    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
-    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
     xfer += oprot->writeFieldEnd();
   }
   xfer += oprot->writeFieldStop();
@@ -29284,7 +29399,7 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::write(::apache::thrif
   return xfer;
 }
 
-uint32_t ThriftHiveMetastore_get_metastore_db_uuid_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+uint32_t ThriftHiveMetastore_show_locks_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
   uint32_t xfer = 0;
   std::string fname;
@@ -29305,17 +29420,49 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_presult::read(::apache::thrif
     switch (fid)
     {
       case 0:
-        if (ftype == ::apache::thrift::protocol::T_STRING) {
-          xfer += iprot->readString((*(this->success)));
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
           this->__isset.success = true;
         } else {
           xfer += iprot->skip(ftype);
         }
         break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
       case 1:
         if (ftype == ::apache::thrift::protocol::T_STRUCT) {
-          xfer += this->o1.read(iprot);
-          this->__isset.o1 = true;
+          xfer += this->ids.read(iprot);
+          this->__isset.ids = true;
         } else {
           xfer += iprot->skip(ftype);
         }
@@ -29332,145 +29479,2016 @@ uint32_t ThriftHiveMetastore_get_metastore_db_uuid_presult::read(::apache::thrif
   return xfer;
 }
 
-void ThriftHiveMetastoreClient::getMetaConf(std::string& _return, const std::string& key)
-{
-  send_getMetaConf(key);
-  recv_getMetaConf(_return);
+uint32_t ThriftHiveMetastore_heartbeat_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_args");
+
+  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->ids.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
 }
 
-void ThriftHiveMetastoreClient::send_getMetaConf(const std::string& key)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_CALL, cseqid);
+uint32_t ThriftHiveMetastore_heartbeat_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_pargs");
 
-  ThriftHiveMetastore_getMetaConf_pargs args;
-  args.key = &key;
-  args.write(oprot_);
+  xfer += oprot->writeFieldBegin("ids", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->ids)).write(oprot);
+  xfer += oprot->writeFieldEnd();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
 }
 
-void ThriftHiveMetastoreClient::recv_getMetaConf(std::string& _return)
-{
+uint32_t ThriftHiveMetastore_heartbeat_result::read(::apache::thrift::protocol::TProtocol* iprot) {
 
-  int32_t rseqid = 0;
+  uint32_t xfer = 0;
   std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
 
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
-  }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-  }
-  if (fname.compare("getMetaConf") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-  }
-  ThriftHiveMetastore_getMetaConf_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
+  xfer += iprot->readStructBegin(fname);
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getMetaConf failed: unknown result");
-}
+  using ::apache::thrift::protocol::TProtocolException;
 
-void ThriftHiveMetastoreClient::setMetaConf(const std::string& key, const std::string& value)
-{
-  send_setMetaConf(key, value);
-  recv_setMetaConf();
-}
 
-void ThriftHiveMetastoreClient::send_setMetaConf(const std::string& key, const std::string& value)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_CALL, cseqid);
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
 
-  ThriftHiveMetastore_setMetaConf_pargs args;
-  args.key = &key;
-  args.value = &value;
-  args.write(oprot_);
+  xfer += iprot->readStructEnd();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  return xfer;
 }
 
-void ThriftHiveMetastoreClient::recv_setMetaConf()
-{
+uint32_t ThriftHiveMetastore_heartbeat_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
 
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
+  uint32_t xfer = 0;
 
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
-  }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-  }
-  if (fname.compare("setMetaConf") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-  }
-  ThriftHiveMetastore_setMetaConf_presult result;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_result");
 
-  if (result.__isset.o1) {
-    throw result.o1;
+  if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o2) {
+    xfer += oprot->writeFieldBegin("o2", ::apache::thrift::protocol::T_STRUCT, 2);
+    xfer += this->o2.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o3) {
+    xfer += oprot->writeFieldBegin("o3", ::apache::thrift::protocol::T_STRUCT, 3);
+    xfer += this->o3.write(oprot);
+    xfer += oprot->writeFieldEnd();
   }
-  return;
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
 }
 
-void ThriftHiveMetastoreClient::create_database(const Database& database)
-{
-  send_create_database(database);
-  recv_create_database();
-}
+uint32_t ThriftHiveMetastore_heartbeat_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
 
-void ThriftHiveMetastoreClient::send_create_database(const Database& database)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_database", ::apache::thrift::protocol::T_CALL, cseqid);
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
 
-  ThriftHiveMetastore_create_database_pargs args;
-  args.database = &database;
-  args.write(oprot_);
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 2:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o2.read(iprot);
+          this->__isset.o2 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 3:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o3.read(iprot);
+          this->__isset.o3 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->txns.read(iprot);
+          this->__isset.txns = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_args");
+
+  xfer += oprot->writeFieldBegin("txns", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->txns.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_pargs");
+
+  xfer += oprot->writeFieldBegin("txns", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->txns)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_heartbeat_txn_range_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_heartbeat_txn_range_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_compact_result");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_compact_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_show_compact_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_show_compact_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_next_notification_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_next_notification_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_args");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_pargs");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_current_notificationEventId_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_current_notificationEventId_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->rqst.read(iprot);
+          this->__isset.rqst = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_args");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += this->rqst.write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_pargs");
+
+  xfer += oprot->writeFieldBegin("rqst", ::apache::thrift::protocol::T_STRUCT, 1);
+  xfer += (*(this->rqst)).write(oprot);
+  xfer += oprot->writeFieldEnd();
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->success.read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_fire_listener_event_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
+    xfer += this->success.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_fire_listener_event_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += (*(this->success)).read(iprot);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    xfer += iprot->skip(ftype);
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_args");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
+  uint32_t xfer = 0;
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_pargs");
+
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString(this->success);
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
+
+  uint32_t xfer = 0;
+
+  xfer += oprot->writeStructBegin("ThriftHiveMetastore_get_metastore_db_uuid_result");
+
+  if (this->__isset.success) {
+    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
+    xfer += oprot->writeString(this->success);
+    xfer += oprot->writeFieldEnd();
+  } else if (this->__isset.o1) {
+    xfer += oprot->writeFieldBegin("o1", ::apache::thrift::protocol::T_STRUCT, 1);
+    xfer += this->o1.write(oprot);
+    xfer += oprot->writeFieldEnd();
+  }
+  xfer += oprot->writeFieldStop();
+  xfer += oprot->writeStructEnd();
+  return xfer;
+}
+
+uint32_t ThriftHiveMetastore_get_metastore_db_uuid_presult::read(::apache::thrift::protocol::TProtocol* iprot) {
+
+  uint32_t xfer = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TType ftype;
+  int16_t fid;
+
+  xfer += iprot->readStructBegin(fname);
+
+  using ::apache::thrift::protocol::TProtocolException;
+
+
+  while (true)
+  {
+    xfer += iprot->readFieldBegin(fname, ftype, fid);
+    if (ftype == ::apache::thrift::protocol::T_STOP) {
+      break;
+    }
+    switch (fid)
+    {
+      case 0:
+        if (ftype == ::apache::thrift::protocol::T_STRING) {
+          xfer += iprot->readString((*(this->success)));
+          this->__isset.success = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      case 1:
+        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
+          xfer += this->o1.read(iprot);
+          this->__isset.o1 = true;
+        } else {
+          xfer += iprot->skip(ftype);
+        }
+        break;
+      default:
+        xfer += iprot->skip(ftype);
+        break;
+    }
+    xfer += iprot->readFieldEnd();
+  }
+
+  xfer += iprot->readStructEnd();
+
+  return xfer;
+}
+
+void ThriftHiveMetastoreClient::getMetaConf(std::string& _return, const std::string& key)
+{
+  send_getMetaConf(key);
+  recv_getMetaConf(_return);
+}
+
+void ThriftHiveMetastoreClient::send_getMetaConf(const std::string& key)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_getMetaConf_pargs args;
+  args.key = &key;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_getMetaConf(std::string& _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("getMetaConf") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_getMetaConf_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getMetaConf failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::setMetaConf(const std::string& key, const std::string& value)
+{
+  send_setMetaConf(key, value);
+  recv_setMetaConf();
+}
+
+void ThriftHiveMetastoreClient::send_setMetaConf(const std::string& key, const std::string& value)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_setMetaConf_pargs args;
+  args.key = &key;
+  args.value = &value;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_setMetaConf()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("setMetaConf") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_setMetaConf_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  return;
+}
+
+void ThriftHiveMetastoreClient::create_database(const Database& database)
+{
+  send_create_database(database);
+  recv_create_database();
+}
+
+void ThriftHiveMetastoreClient::send_create_database(const Database& database)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("create_database", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_create_database_pargs args;
+  args.database = &database;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_create_database()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("create_database") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_create_database_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  return;
+}
+
+void ThriftHiveMetastoreClient::get_database(Database& _return, const std::string& name)
+{
+  send_get_database(name);
+  recv_get_database(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_database(const std::string& name)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_database", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_database_pargs args;
+  args.name = &name;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_database(Database& _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_database") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_database_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_database failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::drop_database(const std::string& name, const bool deleteData, const bool cascade)
+{
+  send_drop_database(name, deleteData, cascade);
+  recv_drop_database();
+}
+
+void ThriftHiveMetastoreClient::send_drop_database(const std::string& name, const bool deleteData, const bool cascade)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_drop_database_pargs args;
+  args.name = &name;
+  args.deleteData = &deleteData;
+  args.cascade = &cascade;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_drop_database()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("drop_database") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_drop_database_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  return;
+}
+
+void ThriftHiveMetastoreClient::get_databases(std::vector<std::string> & _return, const std::string& pattern)
+{
+  send_get_databases(pattern);
+  recv_get_databases(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_databases(const std::string& pattern)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_databases_pargs args;
+  args.pattern = &pattern;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_databases(std::vector<std::string> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_databases") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_databases_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_databases failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::get_all_databases(std::vector<std::string> & _return)
+{
+  send_get_all_databases();
+  recv_get_all_databases(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_all_databases()
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_all_databases_pargs args;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_all_databases(std::vector<std::string> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_all_databases") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_all_databases_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_databases failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::alter_database(const std::string& dbname, const Database& db)
+{
+  send_alter_database(dbname, db);
+  recv_alter_database();
+}
+
+void ThriftHiveMetastoreClient::send_alter_database(const std::string& dbname, const Database& db)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_alter_database_pargs args;
+  args.dbname = &dbname;
+  args.db = &db;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_alter_database()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("alter_database") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_alter_database_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  return;
+}
+
+void ThriftHiveMetastoreClient::get_type(Type& _return, const std::string& name)
+{
+  send_get_type(name);
+  recv_get_type(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_type(const std::string& name)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_type", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_type_pargs args;
+  args.name = &name;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_type(Type& _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_type") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_type_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_type failed: unknown result");
+}
+
+bool ThriftHiveMetastoreClient::create_type(const Type& type)
+{
+  send_create_type(type);
+  return recv_create_type();
+}
+
+void ThriftHiveMetastoreClient::send_create_type(const Type& type)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("create_type", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_create_type_pargs args;
+  args.type = &type;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+bool ThriftHiveMetastoreClient::recv_create_type()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("create_type") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  bool _return;
+  ThriftHiveMetastore_create_type_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    return _return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_type failed: unknown result");
+}
+
+bool ThriftHiveMetastoreClient::drop_type(const std::string& type)
+{
+  send_drop_type(type);
+  return recv_drop_type();
+}
+
+void ThriftHiveMetastoreClient::send_drop_type(const std::string& type)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_drop_type_pargs args;
+  args.type = &type;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+bool ThriftHiveMetastoreClient::recv_drop_type()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("drop_type") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  bool _return;
+  ThriftHiveMetastore_drop_type_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    return _return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_type failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::get_type_all(std::map<std::string, Type> & _return, const std::string& name)
+{
+  send_get_type_all(name);
+  recv_get_type_all(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_type_all(const std::string& name)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_type_all_pargs args;
+  args.name = &name;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_type_all(std::map<std::string, Type> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_type_all") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_type_all_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_type_all failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name)
+{
+  send_get_fields(db_name, table_name);
+  recv_get_fields(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_fields(const std::string& db_name, const std::string& table_name)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_fields_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.write(oprot_);
 
   oprot_->writeMessageEnd();
   oprot_->getTransport()->writeEnd();
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_create_database()
+void ThriftHiveMetastoreClient::recv_get_fields(std::vector<FieldSchema> & _return)
 {
 
   int32_t rseqid = 0;
@@ -29490,16 +31508,21 @@ void ThriftHiveMetastoreClient::recv_create_database()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_database") != 0) {
+  if (fname.compare("get_fields") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_create_database_presult result;
+  ThriftHiveMetastore_get_fields_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
@@ -29509,22 +31532,24 @@ void ThriftHiveMetastoreClient::recv_create_database()
   if (result.__isset.o3) {
     throw result.o3;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_database(Database& _return, const std::string& name)
+void ThriftHiveMetastoreClient::get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
 {
-  send_get_database(name);
-  recv_get_database(_return);
+  send_get_fields_with_environment_context(db_name, table_name, environment_context);
+  recv_get_fields_with_environment_context(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_database(const std::string& name)
+void ThriftHiveMetastoreClient::send_get_fields_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_database", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_database_pargs args;
-  args.name = &name;
+  ThriftHiveMetastore_get_fields_with_environment_context_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29532,7 +31557,7 @@ void ThriftHiveMetastoreClient::send_get_database(const std::string& name)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_database(Database& _return)
+void ThriftHiveMetastoreClient::recv_get_fields_with_environment_context(std::vector<FieldSchema> & _return)
 {
 
   int32_t rseqid = 0;
@@ -29552,12 +31577,12 @@ void ThriftHiveMetastoreClient::recv_get_database(Database& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_database") != 0) {
+  if (fname.compare("get_fields_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_database_presult result;
+  ThriftHiveMetastore_get_fields_with_environment_context_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -29573,24 +31598,228 @@ void ThriftHiveMetastoreClient::recv_get_database(Database& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_database failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::drop_database(const std::string& name, const bool deleteData, const bool cascade)
+void ThriftHiveMetastoreClient::get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name)
 {
-  send_drop_database(name, deleteData, cascade);
-  recv_drop_database();
+  send_get_schema(db_name, table_name);
+  recv_get_schema(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_database(const std::string& name, const bool deleteData, const bool cascade)
+void ThriftHiveMetastoreClient::send_get_schema(const std::string& db_name, const std::string& table_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_database_pargs args;
-  args.name = &name;
-  args.deleteData = &deleteData;
-  args.cascade = &cascade;
+  ThriftHiveMetastore_get_schema_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_schema(std::vector<FieldSchema> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_schema") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_schema_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  send_get_schema_with_environment_context(db_name, table_name, environment_context);
+  recv_get_schema_with_environment_context(_return);
+}
+
+void ThriftHiveMetastoreClient::send_get_schema_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_get_schema_with_environment_context_pargs args;
+  args.db_name = &db_name;
+  args.table_name = &table_name;
+  args.environment_context = &environment_context;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_get_schema_with_environment_context(std::vector<FieldSchema> & _return)
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("get_schema_with_environment_context") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_get_schema_with_environment_context_presult result;
+  result.success = &_return;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema_with_environment_context failed: unknown result");
+}
+
+void ThriftHiveMetastoreClient::create_table(const Table& tbl)
+{
+  send_create_table(tbl);
+  recv_create_table();
+}
+
+void ThriftHiveMetastoreClient::send_create_table(const Table& tbl)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("create_table", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_create_table_pargs args;
+  args.tbl = &tbl;
+  args.write(oprot_);
+
+  oprot_->writeMessageEnd();
+  oprot_->getTransport()->writeEnd();
+  oprot_->getTransport()->flush();
+}
+
+void ThriftHiveMetastoreClient::recv_create_table()
+{
+
+  int32_t rseqid = 0;
+  std::string fname;
+  ::apache::thrift::protocol::TMessageType mtype;
+
+  iprot_->readMessageBegin(fname, mtype, rseqid);
+  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
+    ::apache::thrift::TApplicationException x;
+    x.read(iprot_);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+    throw x;
+  }
+  if (mtype != ::apache::thrift::protocol::T_REPLY) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  if (fname.compare("create_table") != 0) {
+    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
+    iprot_->readMessageEnd();
+    iprot_->getTransport()->readEnd();
+  }
+  ThriftHiveMetastore_create_table_presult result;
+  result.read(iprot_);
+  iprot_->readMessageEnd();
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  return;
+}
+
+void ThriftHiveMetastoreClient::create_table_with_environment_context(const Table& tbl, const EnvironmentContext& environment_context)
+{
+  send_create_table_with_environment_context(tbl, environment_context);
+  recv_create_table_with_environment_context();
+}
+
+void ThriftHiveMetastoreClient::send_create_table_with_environment_context(const Table& tbl, const EnvironmentContext& environment_context)
+{
+  int32_t cseqid = 0;
+  oprot_->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_create_table_with_environment_context_pargs args;
+  args.tbl = &tbl;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29598,7 +31827,7 @@ void ThriftHiveMetastoreClient::send_drop_database(const std::string& name, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_drop_database()
+void ThriftHiveMetastoreClient::recv_create_table_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -29618,12 +31847,12 @@ void ThriftHiveMetastoreClient::recv_drop_database()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_database") != 0) {
+  if (fname.compare("create_table_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_drop_database_presult result;
+  ThriftHiveMetastore_create_table_with_environment_context_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
@@ -29637,22 +31866,27 @@ void ThriftHiveMetastoreClient::recv_drop_database()
   if (result.__isset.o3) {
     throw result.o3;
   }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
   return;
 }
 
-void ThriftHiveMetastoreClient::get_databases(std::vector<std::string> & _return, const std::string& pattern)
+void ThriftHiveMetastoreClient::drop_table(const std::string& dbname, const std::string& name, const bool deleteData)
 {
-  send_get_databases(pattern);
-  recv_get_databases(_return);
+  send_drop_table(dbname, name, deleteData);
+  recv_drop_table();
 }
 
-void ThriftHiveMetastoreClient::send_get_databases(const std::string& pattern)
+void ThriftHiveMetastoreClient::send_drop_table(const std::string& dbname, const std::string& name, const bool deleteData)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_databases_pargs args;
-  args.pattern = &pattern;
+  ThriftHiveMetastore_drop_table_pargs args;
+  args.dbname = &dbname;
+  args.name = &name;
+  args.deleteData = &deleteData;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29660,7 +31894,7 @@ void ThriftHiveMetastoreClient::send_get_databases(const std::string& pattern)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_databases(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_drop_table()
 {
 
   int32_t rseqid = 0;
@@ -29680,39 +31914,41 @@ void ThriftHiveMetastoreClient::recv_get_databases(std::vector<std::string> & _r
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_databases") != 0) {
+  if (fname.compare("drop_table") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_databases_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_drop_table_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_databases failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_all_databases(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::drop_table_with_environment_context(const std::string& dbname, const std::string& name, const bool deleteData, const EnvironmentContext& environment_context)
 {
-  send_get_all_databases();
-  recv_get_all_databases(_return);
+  send_drop_table_with_environment_context(dbname, name, deleteData, environment_context);
+  recv_drop_table_with_environment_context();
 }
 
-void ThriftHiveMetastoreClient::send_get_all_databases()
+void ThriftHiveMetastoreClient::send_drop_table_with_environment_context(const std::string& dbname, const std::string& name, const bool deleteData, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_all_databases_pargs args;
+  ThriftHiveMetastore_drop_table_with_environment_context_pargs args;
+  args.dbname = &dbname;
+  args.name = &name;
+  args.deleteData = &deleteData;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29720,7 +31956,7 @@ void ThriftHiveMetastoreClient::send_get_all_databases()
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_all_databases(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_drop_table_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -29740,41 +31976,39 @@ void ThriftHiveMetastoreClient::recv_get_all_databases(std::vector<std::string>
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_all_databases") != 0) {
+  if (fname.compare("drop_table_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_all_databases_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_drop_table_with_environment_context_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_databases failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  return;
 }
 
-void ThriftHiveMetastoreClient::alter_database(const std::string& dbname, const Database& db)
+void ThriftHiveMetastoreClient::get_tables(std::vector<std::string> & _return, const std::string& db_name, const std::string& pattern)
 {
-  send_alter_database(dbname, db);
-  recv_alter_database();
+  send_get_tables(db_name, pattern);
+  recv_get_tables(_return);
 }
 
-void ThriftHiveMetastoreClient::send_alter_database(const std::string& dbname, const Database& db)
+void ThriftHiveMetastoreClient::send_get_tables(const std::string& db_name, const std::string& pattern)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_database_pargs args;
-  args.dbname = &dbname;
-  args.db = &db;
+  ThriftHiveMetastore_get_tables_pargs args;
+  args.db_name = &db_name;
+  args.pattern = &pattern;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29782,7 +32016,7 @@ void ThriftHiveMetastoreClient::send_alter_database(const std::string& dbname, c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_database()
+void ThriftHiveMetastoreClient::recv_get_tables(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -29802,38 +32036,42 @@ void ThriftHiveMetastoreClient::recv_alter_database()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_database") != 0) {
+  if (fname.compare("get_tables") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_database_presult result;
+  ThriftHiveMetastore_get_tables_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_tables failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_type(Type& _return, const std::string& name)
+void ThriftHiveMetastoreClient::get_table_meta(std::vector<TableMeta> & _return, const std::string& db_patterns, const std::string& tbl_patterns, const std::vector<std::string> & tbl_types)
 {
-  send_get_type(name);
-  recv_get_type(_return);
+  send_get_table_meta(db_patterns, tbl_patterns, tbl_types);
+  recv_get_table_meta(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_type(const std::string& name)
+void ThriftHiveMetastoreClient::send_get_table_meta(const std::string& db_patterns, const std::string& tbl_patterns, const std::vector<std::string> & tbl_types)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_type", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_type_pargs args;
-  args.name = &name;
+  ThriftHiveMetastore_get_table_meta_pargs args;
+  args.db_patterns = &db_patterns;
+  args.tbl_patterns = &tbl_patterns;
+  args.tbl_types = &tbl_types;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29841,7 +32079,7 @@ void ThriftHiveMetastoreClient::send_get_type(const std::string& name)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_type(Type& _return)
+void ThriftHiveMetastoreClient::recv_get_table_meta(std::vector<TableMeta> & _return)
 {
 
   int32_t rseqid = 0;
@@ -29861,12 +32099,12 @@ void ThriftHiveMetastoreClient::recv_get_type(Type& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_type") != 0) {
+  if (fname.compare("get_table_meta") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_type_presult result;
+  ThriftHiveMetastore_get_table_meta_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -29879,25 +32117,22 @@ void ThriftHiveMetastoreClient::recv_get_type(Type& _return)
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_type failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_meta failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::create_type(const Type& type)
+void ThriftHiveMetastoreClient::get_all_tables(std::vector<std::string> & _return, const std::string& db_name)
 {
-  send_create_type(type);
-  return recv_create_type();
+  send_get_all_tables(db_name);
+  recv_get_all_tables(_return);
 }
 
-void ThriftHiveMetastoreClient::send_create_type(const Type& type)
+void ThriftHiveMetastoreClient::send_get_all_tables(const std::string& db_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_type", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_create_type_pargs args;
-  args.type = &type;
+  ThriftHiveMetastore_get_all_tables_pargs args;
+  args.db_name = &db_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29905,7 +32140,7 @@ void ThriftHiveMetastoreClient::send_create_type(const Type& type)
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_create_type()
+void ThriftHiveMetastoreClient::recv_get_all_tables(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -29925,46 +32160,41 @@ bool ThriftHiveMetastoreClient::recv_create_type()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_type") != 0) {
+  if (fname.compare("get_all_tables") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_create_type_presult result;
+  ThriftHiveMetastore_get_all_tables_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_type failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_tables failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_type(const std::string& type)
+void ThriftHiveMetastoreClient::get_table(Table& _return, const std::string& dbname, const std::string& tbl_name)
 {
-  send_drop_type(type);
-  return recv_drop_type();
+  send_get_table(dbname, tbl_name);
+  recv_get_table(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_type(const std::string& type)
+void ThriftHiveMetastoreClient::send_get_table(const std::string& dbname, const std::string& tbl_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_type_pargs args;
-  args.type = &type;
+  ThriftHiveMetastore_get_table_pargs args;
+  args.dbname = &dbname;
+  args.tbl_name = &tbl_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -29972,7 +32202,7 @@ void ThriftHiveMetastoreClient::send_drop_type(const std::string& type)
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_type()
+void ThriftHiveMetastoreClient::recv_get_table(Table& _return)
 {
 
   int32_t rseqid = 0;
@@ -29992,20 +32222,20 @@ bool ThriftHiveMetastoreClient::recv_drop_type()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_type") != 0) {
+  if (fname.compare("get_table") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_type_presult result;
+  ThriftHiveMetastore_get_table_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -30013,22 +32243,23 @@ bool ThriftHiveMetastoreClient::recv_drop_type()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_type failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_type_all(std::map<std::string, Type> & _return, const std::string& name)
+void ThriftHiveMetastoreClient::get_table_objects_by_name(std::vector<Table> & _return, const std::string& dbname, const std::vector<std::string> & tbl_names)
 {
-  send_get_type_all(name);
-  recv_get_type_all(_return);
+  send_get_table_objects_by_name(dbname, tbl_names);
+  recv_get_table_objects_by_name(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_type_all(const std::string& name)
+void ThriftHiveMetastoreClient::send_get_table_objects_by_name(const std::string& dbname, const std::vector<std::string> & tbl_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_type_all_pargs args;
-  args.name = &name;
+  ThriftHiveMetastore_get_table_objects_by_name_pargs args;
+  args.dbname = &dbname;
+  args.tbl_names = &tbl_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30036,7 +32267,7 @@ void ThriftHiveMetastoreClient::send_get_type_all(const std::string& name)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_type_all(std::map<std::string, Type> & _return)
+void ThriftHiveMetastoreClient::recv_get_table_objects_by_name(std::vector<Table> & _return)
 {
 
   int32_t rseqid = 0;
@@ -30056,12 +32287,12 @@ void ThriftHiveMetastoreClient::recv_get_type_all(std::map<std::string, Type> &
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_type_all") != 0) {
+  if (fname.compare("get_table_objects_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_type_all_presult result;
+  ThriftHiveMetastore_get_table_objects_by_name_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30071,26 +32302,33 @@ void ThriftHiveMetastoreClient::recv_get_type_all(std::map<std::string, Type> &
     // _return pointer has now been filled
     return;
   }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_type_all failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_objects_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_fields(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name)
+void ThriftHiveMetastoreClient::get_table_names_by_filter(std::vector<std::string> & _return, const std::string& dbname, const std::string& filter, const int16_t max_tables)
 {
-  send_get_fields(db_name, table_name);
-  recv_get_fields(_return);
+  send_get_table_names_by_filter(dbname, filter, max_tables);
+  recv_get_table_names_by_filter(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_fields(const std::string& db_name, const std::string& table_name)
+void ThriftHiveMetastoreClient::send_get_table_names_by_filter(const std::string& dbname, const std::string& filter, const int16_t max_tables)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_fields_pargs args;
-  args.db_name = &db_name;
-  args.table_name = &table_name;
+  ThriftHiveMetastore_get_table_names_by_filter_pargs args;
+  args.dbname = &dbname;
+  args.filter = &filter;
+  args.max_tables = &max_tables;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30098,7 +32336,7 @@ void ThriftHiveMetastoreClient::send_get_fields(const std::string& db_name, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_fields(std::vector<FieldSchema> & _return)
+void ThriftHiveMetastoreClient::recv_get_table_names_by_filter(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -30118,12 +32356,12 @@ void ThriftHiveMetastoreClient::recv_get_fields(std::vector<FieldSchema> & _retu
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_fields") != 0) {
+  if (fname.compare("get_table_names_by_filter") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_fields_presult result;
+  ThriftHiveMetastore_get_table_names_by_filter_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30142,24 +32380,24 @@ void ThriftHiveMetastoreClient::recv_get_fields(std::vector<FieldSchema> & _retu
   if (result.__isset.o3) {
     throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_names_by_filter failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_fields_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl)
 {
-  send_get_fields_with_environment_context(db_name, table_name, environment_context);
-  recv_get_fields_with_environment_context(_return);
+  send_alter_table(dbname, tbl_name, new_tbl);
+  recv_alter_table();
 }
 
-void ThriftHiveMetastoreClient::send_get_fields_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_fields_with_environment_context_pargs args;
-  args.db_name = &db_name;
-  args.table_name = &table_name;
-  args.environment_context = &environment_context;
+  ThriftHiveMetastore_alter_table_pargs args;
+  args.dbname = &dbname;
+  args.tbl_name = &tbl_name;
+  args.new_tbl = &new_tbl;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30167,7 +32405,7 @@ void ThriftHiveMetastoreClient::send_get_fields_with_environment_context(const s
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_fields_with_environment_context(std::vector<FieldSchema> & _return)
+void ThriftHiveMetastoreClient::recv_alter_table()
 {
 
   int32_t rseqid = 0;
@@ -30187,47 +32425,41 @@ void ThriftHiveMetastoreClient::recv_get_fields_with_environment_context(std::ve
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_fields_with_environment_context") != 0) {
+  if (fname.compare("alter_table") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_fields_with_environment_context_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_table_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_fields_with_environment_context failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_schema(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name)
+void ThriftHiveMetastoreClient::alter_table_with_environment_context(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const EnvironmentContext& environment_context)
 {
-  send_get_schema(db_name, table_name);
-  recv_get_schema(_return);
+  send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
+  recv_alter_table_with_environment_context();
 }
 
-void ThriftHiveMetastoreClient::send_get_schema(const std::string& db_name, const std::string& table_name)
+void ThriftHiveMetastoreClient::send_alter_table_with_environment_context(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_schema_pargs args;
-  args.db_name = &db_name;
-  args.table_name = &table_name;
+  ThriftHiveMetastore_alter_table_with_environment_context_pargs args;
+  args.dbname = &dbname;
+  args.tbl_name = &tbl_name;
+  args.new_tbl = &new_tbl;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30235,7 +32467,7 @@ void ThriftHiveMetastoreClient::send_get_schema(const std::string& db_name, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_schema(std::vector<FieldSchema> & _return)
+void ThriftHiveMetastoreClient::recv_alter_table_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -30255,48 +32487,41 @@ void ThriftHiveMetastoreClient::recv_get_schema(std::vector<FieldSchema> & _retu
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_schema") != 0) {
+  if (fname.compare("alter_table_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_schema_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_table_with_environment_context_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_schema_with_environment_context(std::vector<FieldSchema> & _return, const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::alter_table_with_cascade(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const bool cascade)
 {
-  send_get_schema_with_environment_context(db_name, table_name, environment_context);
-  recv_get_schema_with_environment_context(_return);
+  send_alter_table_with_cascade(dbname, tbl_name, new_tbl, cascade);
+  recv_alter_table_with_cascade();
 }
 
-void ThriftHiveMetastoreClient::send_get_schema_with_environment_context(const std::string& db_name, const std::string& table_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_alter_table_with_cascade(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const bool cascade)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_schema_with_environment_context_pargs args;
-  args.db_name = &db_name;
-  args.table_name = &table_name;
-  args.environment_context = &environment_context;
+  ThriftHiveMetastore_alter_table_with_cascade_pargs args;
+  args.dbname = &dbname;
+  args.tbl_name = &tbl_name;
+  args.new_tbl = &new_tbl;
+  args.cascade = &cascade;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30304,7 +32529,7 @@ void ThriftHiveMetastoreClient::send_get_schema_with_environment_context(const s
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_schema_with_environment_context(std::vector<FieldSchema> & _return)
+void ThriftHiveMetastoreClient::recv_alter_table_with_cascade()
 {
 
   int32_t rseqid = 0;
@@ -30324,46 +32549,38 @@ void ThriftHiveMetastoreClient::recv_get_schema_with_environment_context(std::ve
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_schema_with_environment_context") != 0) {
+  if (fname.compare("alter_table_with_cascade") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_schema_with_environment_context_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_table_with_cascade_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_schema_with_environment_context failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::create_table(const Table& tbl)
+void ThriftHiveMetastoreClient::add_partition(Partition& _return, const Partition& new_part)
 {
-  send_create_table(tbl);
-  recv_create_table();
+  send_add_partition(new_part);
+  recv_add_partition(_return);
 }
 
-void ThriftHiveMetastoreClient::send_create_table(const Table& tbl)
+void ThriftHiveMetastoreClient::send_add_partition(const Partition& new_part)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_table", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_create_table_pargs args;
-  args.tbl = &tbl;
+  ThriftHiveMetastore_add_partition_pargs args;
+  args.new_part = &new_part;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30371,7 +32588,7 @@ void ThriftHiveMetastoreClient::send_create_table(const Table& tbl)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_create_table()
+void ThriftHiveMetastoreClient::recv_add_partition(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30391,16 +32608,21 @@ void ThriftHiveMetastoreClient::recv_create_table()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_table") != 0) {
+  if (fname.compare("add_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_create_table_presult result;
+  ThriftHiveMetastore_add_partition_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
@@ -30410,25 +32632,22 @@ void ThriftHiveMetastoreClient::recv_create_table()
   if (result.__isset.o3) {
     throw result.o3;
   }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partition failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::create_table_with_environment_context(const Table& tbl, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::add_partition_with_environment_context(Partition& _return, const Partition& new_part, const EnvironmentContext& environment_context)
 {
-  send_create_table_with_environment_context(tbl, environment_context);
-  recv_create_table_with_environment_context();
+  send_add_partition_with_environment_context(new_part, environment_context);
+  recv_add_partition_with_environment_context(_return);
 }
 
-void ThriftHiveMetastoreClient::send_create_table_with_environment_context(const Table& tbl, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_add_partition_with_environment_context(const Partition& new_part, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_create_table_with_environment_context_pargs args;
-  args.tbl = &tbl;
+  ThriftHiveMetastore_add_partition_with_environment_context_pargs args;
+  args.new_part = &new_part;
   args.environment_context = &environment_context;
   args.write(oprot_);
 
@@ -30437,7 +32656,7 @@ void ThriftHiveMetastoreClient::send_create_table_with_environment_context(const
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_create_table_with_environment_context()
+void ThriftHiveMetastoreClient::recv_add_partition_with_environment_context(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30457,16 +32676,21 @@ void ThriftHiveMetastoreClient::recv_create_table_with_environment_context()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_table_with_environment_context") != 0) {
+  if (fname.compare("add_partition_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_create_table_with_environment_context_presult result;
+  ThriftHiveMetastore_add_partition_with_environment_context_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
@@ -30476,27 +32700,22 @@ void ThriftHiveMetastoreClient::recv_create_table_with_environment_context()
   if (result.__isset.o3) {
     throw result.o3;
   }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partition_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::drop_table(const std::string& dbname, const std::string& name, const bool deleteData)
+int32_t ThriftHiveMetastoreClient::add_partitions(const std::vector<Partition> & new_parts)
 {
-  send_drop_table(dbname, name, deleteData);
-  recv_drop_table();
+  send_add_partitions(new_parts);
+  return recv_add_partitions();
 }
 
-void ThriftHiveMetastoreClient::send_drop_table(const std::string& dbname, const std::string& name, const bool deleteData)
+void ThriftHiveMetastoreClient::send_add_partitions(const std::vector<Partition> & new_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_table_pargs args;
-  args.dbname = &dbname;
-  args.name = &name;
-  args.deleteData = &deleteData;
+  ThriftHiveMetastore_add_partitions_pargs args;
+  args.new_parts = &new_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30504,7 +32723,7 @@ void ThriftHiveMetastoreClient::send_drop_table(const std::string& dbname, const
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_drop_table()
+int32_t ThriftHiveMetastoreClient::recv_add_partitions()
 {
 
   int32_t rseqid = 0;
@@ -30524,41 +32743,46 @@ void ThriftHiveMetastoreClient::recv_drop_table()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_table") != 0) {
+  if (fname.compare("add_partitions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_drop_table_presult result;
+  int32_t _return;
+  ThriftHiveMetastore_add_partitions_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
   if (result.__isset.o3) {
     throw result.o3;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::drop_table_with_environment_context(const std::string& dbname, const std::string& name, const bool deleteData, const EnvironmentContext& environment_context)
+int32_t ThriftHiveMetastoreClient::add_partitions_pspec(const std::vector<PartitionSpec> & new_parts)
 {
-  send_drop_table_with_environment_context(dbname, name, deleteData, environment_context);
-  recv_drop_table_with_environment_context();
+  send_add_partitions_pspec(new_parts);
+  return recv_add_partitions_pspec();
 }
 
-void ThriftHiveMetastoreClient::send_drop_table_with_environment_context(const std::string& dbname, const std::string& name, const bool deleteData, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_add_partitions_pspec(const std::vector<PartitionSpec> & new_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_table_with_environment_context_pargs args;
-  args.dbname = &dbname;
-  args.name = &name;
-  args.deleteData = &deleteData;
-  args.environment_context = &environment_context;
+  ThriftHiveMetastore_add_partitions_pspec_pargs args;
+  args.new_parts = &new_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30566,7 +32790,7 @@ void ThriftHiveMetastoreClient::send_drop_table_with_environment_context(const s
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_drop_table_with_environment_context()
+int32_t ThriftHiveMetastoreClient::recv_add_partitions_pspec()
 {
 
   int32_t rseqid = 0;
@@ -30586,39 +32810,48 @@ void ThriftHiveMetastoreClient::recv_drop_table_with_environment_context()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_table_with_environment_context") != 0) {
+  if (fname.compare("add_partitions_pspec") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_drop_table_with_environment_context_presult result;
+  int32_t _return;
+  ThriftHiveMetastore_add_partitions_pspec_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
   if (result.__isset.o3) {
     throw result.o3;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions_pspec failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_tables(std::vector<std::string> & _return, const std::string& db_name, const std::string& pattern)
+void ThriftHiveMetastoreClient::append_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
 {
-  send_get_tables(db_name, pattern);
-  recv_get_tables(_return);
+  send_append_partition(db_name, tbl_name, part_vals);
+  recv_append_partition(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_tables(const std::string& db_name, const std::string& pattern)
+void ThriftHiveMetastoreClient::send_append_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_tables_pargs args;
+  ThriftHiveMetastore_append_partition_pargs args;
   args.db_name = &db_name;
-  args.pattern = &pattern;
+  args.tbl_name = &tbl_name;
+  args.part_vals = &part_vals;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30626,7 +32859,7 @@ void ThriftHiveMetastoreClient::send_get_tables(const std::string& db_name, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_tables(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_append_partition(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30646,12 +32879,12 @@ void ThriftHiveMetastoreClient::recv_get_tables(std::vector<std::string> & _retu
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_tables") != 0) {
+  if (fname.compare("append_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_tables_presult result;
+  ThriftHiveMetastore_append_partition_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30664,24 +32897,28 @@ void ThriftHiveMetastoreClient::recv_get_tables(std::vector<std::string> & _retu
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_tables failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table_meta(std::vector<TableMeta> & _return, const std::string& db_patterns, const std::string& tbl_patterns, const std::vector<std::string> & tbl_types)
+void ThriftHiveMetastoreClient::add_partitions_req(AddPartitionsResult& _return, const AddPartitionsRequest& request)
 {
-  send_get_table_meta(db_patterns, tbl_patterns, tbl_types);
-  recv_get_table_meta(_return);
+  send_add_partitions_req(request);
+  recv_add_partitions_req(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_table_meta(const std::string& db_patterns, const std::string& tbl_patterns, const std::vector<std::string> & tbl_types)
+void ThriftHiveMetastoreClient::send_add_partitions_req(const AddPartitionsRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_meta_pargs args;
-  args.db_patterns = &db_patterns;
-  args.tbl_patterns = &tbl_patterns;
-  args.tbl_types = &tbl_types;
+  ThriftHiveMetastore_add_partitions_req_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30689,7 +32926,7 @@ void ThriftHiveMetastoreClient::send_get_table_meta(const std::string& db_patter
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table_meta(std::vector<TableMeta> & _return)
+void ThriftHiveMetastoreClient::recv_add_partitions_req(AddPartitionsResult& _return)
 {
 
   int32_t rseqid = 0;
@@ -30709,12 +32946,12 @@ void ThriftHiveMetastoreClient::recv_get_table_meta(std::vector<TableMeta> & _re
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table_meta") != 0) {
+  if (fname.compare("add_partitions_req") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_meta_presult result;
+  ThriftHiveMetastore_add_partitions_req_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30727,22 +32964,31 @@ void ThriftHiveMetastoreClient::recv_get_table_meta(std::vector<TableMeta> & _re
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_meta failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions_req failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_all_tables(std::vector<std::string> & _return, const std::string& db_name)
+void ThriftHiveMetastoreClient::append_partition_with_environment_context(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const EnvironmentContext& environment_context)
 {
-  send_get_all_tables(db_name);
-  recv_get_all_tables(_return);
+  send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context);
+  recv_append_partition_with_environment_context(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_all_tables(const std::string& db_name)
+void ThriftHiveMetastoreClient::send_append_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_all_tables_pargs args;
+  ThriftHiveMetastore_append_partition_with_environment_context_pargs args;
   args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_vals = &part_vals;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30750,7 +32996,7 @@ void ThriftHiveMetastoreClient::send_get_all_tables(const std::string& db_name)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_all_tables(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_append_partition_with_environment_context(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30770,12 +33016,12 @@ void ThriftHiveMetastoreClient::recv_get_all_tables(std::vector<std::string> & _
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_all_tables") != 0) {
+  if (fname.compare("append_partition_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_all_tables_presult result;
+  ThriftHiveMetastore_append_partition_with_environment_context_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30788,23 +33034,30 @@ void ThriftHiveMetastoreClient::recv_get_all_tables(std::vector<std::string> & _
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_tables failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table(Table& _return, const std::string& dbname, const std::string& tbl_name)
+void ThriftHiveMetastoreClient::append_partition_by_name(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
 {
-  send_get_table(dbname, tbl_name);
-  recv_get_table(_return);
+  send_append_partition_by_name(db_name, tbl_name, part_name);
+  recv_append_partition_by_name(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_table(const std::string& dbname, const std::string& tbl_name)
+void ThriftHiveMetastoreClient::send_append_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_pargs args;
-  args.dbname = &dbname;
+  ThriftHiveMetastore_append_partition_by_name_pargs args;
+  args.db_name = &db_name;
   args.tbl_name = &tbl_name;
+  args.part_name = &part_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30812,7 +33065,7 @@ void ThriftHiveMetastoreClient::send_get_table(const std::string& dbname, const
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table(Table& _return)
+void ThriftHiveMetastoreClient::recv_append_partition_by_name(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30832,12 +33085,12 @@ void ThriftHiveMetastoreClient::recv_get_table(Table& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table") != 0) {
+  if (fname.compare("append_partition_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_presult result;
+  ThriftHiveMetastore_append_partition_by_name_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30853,23 +33106,28 @@ void ThriftHiveMetastoreClient::recv_get_table(Table& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table_objects_by_name(std::vector<Table> & _return, const std::string& dbname, const std::vector<std::string> & tbl_names)
+void ThriftHiveMetastoreClient::append_partition_by_name_with_environment_context(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const EnvironmentContext& environment_context)
 {
-  send_get_table_objects_by_name(dbname, tbl_names);
-  recv_get_table_objects_by_name(_return);
+  send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context);
+  recv_append_partition_by_name_with_environment_context(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_table_objects_by_name(const std::string& dbname, const std::vector<std::string> & tbl_names)
+void ThriftHiveMetastoreClient::send_append_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_objects_by_name_pargs args;
-  args.dbname = &dbname;
-  args.tbl_names = &tbl_names;
+  ThriftHiveMetastore_append_partition_by_name_with_environment_context_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_name = &part_name;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30877,7 +33135,7 @@ void ThriftHiveMetastoreClient::send_get_table_objects_by_name(const std::string
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table_objects_by_name(std::vector<Table> & _return)
+void ThriftHiveMetastoreClient::recv_append_partition_by_name_with_environment_context(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -30897,12 +33155,12 @@ void ThriftHiveMetastoreClient::recv_get_table_objects_by_name(std::vector<Table
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table_objects_by_name") != 0) {
+  if (fname.compare("append_partition_by_name_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_objects_by_name_presult result;
+  ThriftHiveMetastore_append_partition_by_name_with_environment_context_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -30921,24 +33179,25 @@ void ThriftHiveMetastoreClient::recv_get_table_objects_by_name(std::vector<Table
   if (result.__isset.o3) {
     throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_objects_by_name failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_by_name_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table_names_by_filter(std::vector<std::string> & _return, const std::string& dbname, const std::string& filter, const int16_t max_tables)
+bool ThriftHiveMetastoreClient::drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData)
 {
-  send_get_table_names_by_filter(dbname, filter, max_tables);
-  recv_get_table_names_by_filter(_return);
+  send_drop_partition(db_name, tbl_name, part_vals, deleteData);
+  return recv_drop_partition();
 }
 
-void ThriftHiveMetastoreClient::send_get_table_names_by_filter(const std::string& dbname, const std::string& filter, const int16_t max_tables)
+void ThriftHiveMetastoreClient::send_drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_names_by_filter_pargs args;
-  args.dbname = &dbname;
-  args.filter = &filter;
-  args.max_tables = &max_tables;
+  ThriftHiveMetastore_drop_partition_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_vals = &part_vals;
+  args.deleteData = &deleteData;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -30946,7 +33205,7 @@ void ThriftHiveMetastoreClient::send_get_table_names_by_filter(const std::string
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table_names_by_filter(std::vector<std::string> & _return)
+bool ThriftHiveMetastoreClient::recv_drop_partition()
 {
 
   int32_t rseqid = 0;
@@ -30966,20 +33225,20 @@ void ThriftHiveMetastoreClient::recv_get_table_names_by_filter(std::vector<std::
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table_names_by_filter") != 0) {
+  if (fname.compare("drop_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_names_by_filter_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_partition_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -30987,27 +33246,26 @@ void ThriftHiveMetastoreClient::recv_get_table_names_by_filter(std::vector<std::
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_names_by_filter failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl)
+bool ThriftHiveMetastoreClient::drop_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData, const EnvironmentContext& environment_context)
 {
-  send_alter_table(dbname, tbl_name, new_tbl);
-  recv_alter_table();
+  send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context);
+  return recv_drop_partition_with_environment_context();
 }
 
-void ThriftHiveMetastoreClient::send_alter_table(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl)
+void ThriftHiveMetastoreClient::send_drop_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_table_pargs args;
-  args.dbname = &dbname;
+  ThriftHiveMetastore_drop_partition_with_environment_context_pargs args;
+  args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_tbl = &new_tbl;
+  args.part_vals = &part_vals;
+  args.deleteData = &deleteData;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31015,7 +33273,7 @@ void ThriftHiveMetastoreClient::send_alter_table(const std::string& dbname, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_table()
+bool ThriftHiveMetastoreClient::recv_drop_partition_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -31035,41 +33293,46 @@ void ThriftHiveMetastoreClient::recv_alter_table()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_table") != 0) {
+  if (fname.compare("drop_partition_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_table_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_partition_with_environment_context_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_table_with_environment_context(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const EnvironmentContext& environment_context)
+bool ThriftHiveMetastoreClient::drop_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData)
 {
-  send_alter_table_with_environment_context(dbname, tbl_name, new_tbl, environment_context);
-  recv_alter_table_with_environment_context();
+  send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
+  return recv_drop_partition_by_name();
 }
 
-void ThriftHiveMetastoreClient::send_alter_table_with_environment_context(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_drop_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_table_with_environment_context_pargs args;
-  args.dbname = &dbname;
+  ThriftHiveMetastore_drop_partition_by_name_pargs args;
+  args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_tbl = &new_tbl;
-  args.environment_context = &environment_context;
+  args.part_name = &part_name;
+  args.deleteData = &deleteData;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31077,7 +33340,7 @@ void ThriftHiveMetastoreClient::send_alter_table_with_environment_context(const
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_table_with_environment_context()
+bool ThriftHiveMetastoreClient::recv_drop_partition_by_name()
 {
 
   int32_t rseqid = 0;
@@ -31097,41 +33360,47 @@ void ThriftHiveMetastoreClient::recv_alter_table_with_environment_context()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_table_with_environment_context") != 0) {
+  if (fname.compare("drop_partition_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_table_with_environment_context_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_partition_by_name_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_table_with_cascade(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const bool cascade)
+bool ThriftHiveMetastoreClient::drop_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData, const EnvironmentContext& environment_context)
 {
-  send_alter_table_with_cascade(dbname, tbl_name, new_tbl, cascade);
-  recv_alter_table_with_cascade();
+  send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context);
+  return recv_drop_partition_by_name_with_environment_context();
 }
 
-void ThriftHiveMetastoreClient::send_alter_table_with_cascade(const std::string& dbname, const std::string& tbl_name, const Table& new_tbl, const bool cascade)
+void ThriftHiveMetastoreClient::send_drop_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_table_with_cascade_pargs args;
-  args.dbname = &dbname;
+  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_pargs args;
+  args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_tbl = &new_tbl;
-  args.cascade = &cascade;
+  args.part_name = &part_name;
+  args.deleteData = &deleteData;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31139,7 +33408,7 @@ void ThriftHiveMetastoreClient::send_alter_table_with_cascade(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_table_with_cascade()
+bool ThriftHiveMetastoreClient::recv_drop_partition_by_name_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -31159,38 +33428,43 @@ void ThriftHiveMetastoreClient::recv_alter_table_with_cascade()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_table_with_cascade") != 0) {
+  if (fname.compare("drop_partition_by_name_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_table_with_cascade_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_by_name_with_environment_context failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::add_partition(Partition& _return, const Partition& new_part)
+void ThriftHiveMetastoreClient::drop_partitions_req(DropPartitionsResult& _return, const DropPartitionsRequest& req)
 {
-  send_add_partition(new_part);
-  recv_add_partition(_return);
+  send_drop_partitions_req(req);
+  recv_drop_partitions_req(_return);
 }
 
-void ThriftHiveMetastoreClient::send_add_partition(const Partition& new_part)
+void ThriftHiveMetastoreClient::send_drop_partitions_req(const DropPartitionsRequest& req)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_partition_pargs args;
-  args.new_part = &new_part;
+  ThriftHiveMetastore_drop_partitions_req_pargs args;
+  args.req = &req;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31198,7 +33472,7 @@ void ThriftHiveMetastoreClient::send_add_partition(const Partition& new_part)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_add_partition(Partition& _return)
+void ThriftHiveMetastoreClient::recv_drop_partitions_req(DropPartitionsResult& _return)
 {
 
   int32_t rseqid = 0;
@@ -31218,12 +33492,12 @@ void ThriftHiveMetastoreClient::recv_add_partition(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_partition") != 0) {
+  if (fname.compare("drop_partitions_req") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_add_partition_presult result;
+  ThriftHiveMetastore_drop_partitions_req_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31239,26 +33513,24 @@ void ThriftHiveMetastoreClient::recv_add_partition(Partition& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partition failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partitions_req failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::add_partition_with_environment_context(Partition& _return, const Partition& new_part, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
 {
-  send_add_partition_with_environment_context(new_part, environment_context);
-  recv_add_partition_with_environment_context(_return);
+  send_get_partition(db_name, tbl_name, part_vals);
+  recv_get_partition(_return);
 }
 
-void ThriftHiveMetastoreClient::send_add_partition_with_environment_context(const Partition& new_part, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_partition_with_environment_context_pargs args;
-  args.new_part = &new_part;
-  args.environment_context = &environment_context;
+  ThriftHiveMetastore_get_partition_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_vals = &part_vals;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31266,7 +33538,7 @@ void ThriftHiveMetastoreClient::send_add_partition_with_environment_context(cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_add_partition_with_environment_context(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partition(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -31286,12 +33558,12 @@ void ThriftHiveMetastoreClient::recv_add_partition_with_environment_context(Part
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_partition_with_environment_context") != 0) {
+  if (fname.compare("get_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_add_partition_with_environment_context_presult result;
+  ThriftHiveMetastore_get_partition_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31307,25 +33579,26 @@ void ThriftHiveMetastoreClient::recv_add_partition_with_environment_context(Part
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partition_with_environment_context failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition failed: unknown result");
 }
 
-int32_t ThriftHiveMetastoreClient::add_partitions(const std::vector<Partition> & new_parts)
+void ThriftHiveMetastoreClient::exchange_partition(Partition& _return, const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
 {
-  send_add_partitions(new_parts);
-  return recv_add_partitions();
+  send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
+  recv_exchange_partition(_return);
 }
 
-void ThriftHiveMetastoreClient::send_add_partitions(const std::vector<Partition> & new_parts)
+void ThriftHiveMetastoreClient::send_exchange_partition(const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_partitions_pargs args;
-  args.new_parts = &new_parts;
+  ThriftHiveMetastore_exchange_partition_pargs args;
+  args.partitionSpecs = &partitionSpecs;
+  args.source_db = &source_db;
+  args.source_table_name = &source_table_name;
+  args.dest_db = &dest_db;
+  args.dest_table_name = &dest_table_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31333,7 +33606,7 @@ void ThriftHiveMetastoreClient::send_add_partitions(const std::vector<Partition>
   oprot_->getTransport()->flush();
 }
 
-int32_t ThriftHiveMetastoreClient::recv_add_partitions()
+void ThriftHiveMetastoreClient::recv_exchange_partition(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -31353,20 +33626,20 @@ int32_t ThriftHiveMetastoreClient::recv_add_partitions()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_partitions") != 0) {
+  if (fname.compare("exchange_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  int32_t _return;
-  ThriftHiveMetastore_add_partitions_presult result;
+  ThriftHiveMetastore_exchange_partition_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -31377,22 +33650,29 @@ int32_t ThriftHiveMetastoreClient::recv_add_partitions()
   if (result.__isset.o3) {
     throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions failed: unknown result");
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "exchange_partition failed: unknown result");
 }
 
-int32_t ThriftHiveMetastoreClient::add_partitions_pspec(const std::vector<PartitionSpec> & new_parts)
+void ThriftHiveMetastoreClient::exchange_partitions(std::vector<Partition> & _return, const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
 {
-  send_add_partitions_pspec(new_parts);
-  return recv_add_partitions_pspec();
+  send_exchange_partitions(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
+  recv_exchange_partitions(_return);
 }
 
-void ThriftHiveMetastoreClient::send_add_partitions_pspec(const std::vector<PartitionSpec> & new_parts)
+void ThriftHiveMetastoreClient::send_exchange_partitions(const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_partitions_pspec_pargs args;
-  args.new_parts = &new_parts;
+  ThriftHiveMetastore_exchange_partitions_pargs args;
+  args.partitionSpecs = &partitionSpecs;
+  args.source_db = &source_db;
+  args.source_table_name = &source_table_name;
+  args.dest_db = &dest_db;
+  args.dest_table_name = &dest_table_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31400,7 +33680,7 @@ void ThriftHiveMetastoreClient::send_add_partitions_pspec(const std::vector<Part
   oprot_->getTransport()->flush();
 }
 
-int32_t ThriftHiveMetastoreClient::recv_add_partitions_pspec()
+void ThriftHiveMetastoreClient::recv_exchange_partitions(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31420,20 +33700,20 @@ int32_t ThriftHiveMetastoreClient::recv_add_partitions_pspec()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_partitions_pspec") != 0) {
+  if (fname.compare("exchange_partitions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  int32_t _return;
-  ThriftHiveMetastore_add_partitions_pspec_presult result;
+  ThriftHiveMetastore_exchange_partitions_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -31444,24 +33724,29 @@ int32_t ThriftHiveMetastoreClient::recv_add_partitions_pspec()
   if (result.__isset.o3) {
     throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions_pspec failed: unknown result");
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "exchange_partitions failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::append_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
+void ThriftHiveMetastoreClient::get_partition_with_auth(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const std::string& user_name, const std::vector<std::string> & group_names)
 {
-  send_append_partition(db_name, tbl_name, part_vals);
-  recv_append_partition(_return);
+  send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
+  recv_get_partition_with_auth(_return);
 }
 
-void ThriftHiveMetastoreClient::send_append_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
+void ThriftHiveMetastoreClient::send_get_partition_with_auth(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const std::string& user_name, const std::vector<std::string> & group_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_append_partition_pargs args;
+  ThriftHiveMetastore_get_partition_with_auth_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
   args.part_vals = &part_vals;
+  args.user_name = &user_name;
+  args.group_names = &group_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31469,7 +33754,7 @@ void ThriftHiveMetastoreClient::send_append_partition(const std::string& db_name
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_append_partition(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partition_with_auth(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -31489,12 +33774,12 @@ void ThriftHiveMetastoreClient::recv_append_partition(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("append_partition") != 0) {
+  if (fname.compare("get_partition_with_auth") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_append_partition_presult result;
+  ThriftHiveMetastore_get_partition_with_auth_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31510,25 +33795,24 @@ void ThriftHiveMetastoreClient::recv_append_partition(Partition& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_with_auth failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::add_partitions_req(AddPartitionsResult& _return, const AddPartitionsRequest& request)
+void ThriftHiveMetastoreClient::get_partition_by_name(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
 {
-  send_add_partitions_req(request);
-  recv_add_partitions_req(_return);
+  send_get_partition_by_name(db_name, tbl_name, part_name);
+  recv_get_partition_by_name(_return);
 }
 
-void ThriftHiveMetastoreClient::send_add_partitions_req(const AddPartitionsRequest& request)
+void ThriftHiveMetastoreClient::send_get_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_partitions_req_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_get_partition_by_name_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_name = &part_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31536,7 +33820,7 @@ void ThriftHiveMetastoreClient::send_add_partitions_req(const AddPartitionsReque
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_add_partitions_req(AddPartitionsResult& _return)
+void ThriftHiveMetastoreClient::recv_get_partition_by_name(Partition& _return)
 {
 
   int32_t rseqid = 0;
@@ -31556,12 +33840,12 @@ void ThriftHiveMetastoreClient::recv_add_partitions_req(AddPartitionsResult& _re
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_partitions_req") != 0) {
+  if (fname.compare("get_partition_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_add_partitions_req_presult result;
+  ThriftHiveMetastore_get_partition_by_name_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31577,28 +33861,24 @@ void ThriftHiveMetastoreClient::recv_add_partitions_req(AddPartitionsResult& _re
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_partitions_req failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::append_partition_with_environment_context(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_partitions(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
 {
-  send_append_partition_with_environment_context(db_name, tbl_name, part_vals, environment_context);
-  recv_append_partition_with_environment_context(_return);
+  send_get_partitions(db_name, tbl_name, max_parts);
+  recv_get_partitions(_return);
 }
 
-void ThriftHiveMetastoreClient::send_append_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_partitions(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_append_partition_with_environment_context_pargs args;
+  ThriftHiveMetastore_get_partitions_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.environment_context = &environment_context;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31606,7 +33886,7 @@ void ThriftHiveMetastoreClient::send_append_partition_with_environment_context(c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_append_partition_with_environment_context(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partitions(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31626,12 +33906,12 @@ void ThriftHiveMetastoreClient::recv_append_partition_with_environment_context(P
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("append_partition_with_environment_context") != 0) {
+  if (fname.compare("get_partitions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_append_partition_with_environment_context_presult result;
+  ThriftHiveMetastore_get_partitions_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31647,27 +33927,26 @@ void ThriftHiveMetastoreClient::recv_append_partition_with_environment_context(P
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_with_environment_context failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::append_partition_by_name(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
+void ThriftHiveMetastoreClient::get_partitions_with_auth(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
 {
-  send_append_partition_by_name(db_name, tbl_name, part_name);
-  recv_append_partition_by_name(_return);
+  send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
+  recv_get_partitions_with_auth(_return);
 }
 
-void ThriftHiveMetastoreClient::send_append_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
+void ThriftHiveMetastoreClient::send_get_partitions_with_auth(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_append_partition_by_name_pargs args;
+  ThriftHiveMetastore_get_partitions_with_auth_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
+  args.max_parts = &max_parts;
+  args.user_name = &user_name;
+  args.group_names = &group_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31675,7 +33954,7 @@ void ThriftHiveMetastoreClient::send_append_partition_by_name(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_append_partition_by_name(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partitions_with_auth(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31695,12 +33974,12 @@ void ThriftHiveMetastoreClient::recv_append_partition_by_name(Partition& _return
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("append_partition_by_name") != 0) {
+  if (fname.compare("get_partitions_with_auth") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_append_partition_by_name_presult result;
+  ThriftHiveMetastore_get_partitions_with_auth_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31716,28 +33995,24 @@ void ThriftHiveMetastoreClient::recv_append_partition_by_name(Partition& _return
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_by_name failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_with_auth failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::append_partition_by_name_with_environment_context(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_partitions_pspec(std::vector<PartitionSpec> & _return, const std::string& db_name, const std::string& tbl_name, const int32_t max_parts)
 {
-  send_append_partition_by_name_with_environment_context(db_name, tbl_name, part_name, environment_context);
-  recv_append_partition_by_name_with_environment_context(_return);
+  send_get_partitions_pspec(db_name, tbl_name, max_parts);
+  recv_get_partitions_pspec(_return);
 }
 
-void ThriftHiveMetastoreClient::send_append_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_partitions_pspec(const std::string& db_name, const std::string& tbl_name, const int32_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_append_partition_by_name_with_environment_context_pargs args;
+  ThriftHiveMetastore_get_partitions_pspec_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
-  args.environment_context = &environment_context;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31745,7 +34020,7 @@ void ThriftHiveMetastoreClient::send_append_partition_by_name_with_environment_c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_append_partition_by_name_with_environment_context(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partitions_pspec(std::vector<PartitionSpec> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31765,12 +34040,12 @@ void ThriftHiveMetastoreClient::recv_append_partition_by_name_with_environment_c
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("append_partition_by_name_with_environment_context") != 0) {
+  if (fname.compare("get_partitions_pspec") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_append_partition_by_name_with_environment_context_presult result;
+  ThriftHiveMetastore_get_partitions_pspec_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -31786,28 +34061,24 @@ void ThriftHiveMetastoreClient::recv_append_partition_by_name_with_environment_c
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "append_partition_by_name_with_environment_context failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_pspec failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData)
+void ThriftHiveMetastoreClient::get_partition_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
 {
-  send_drop_partition(db_name, tbl_name, part_vals, deleteData);
-  return recv_drop_partition();
+  send_get_partition_names(db_name, tbl_name, max_parts);
+  recv_get_partition_names(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData)
+void ThriftHiveMetastoreClient::send_get_partition_names(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_partition_pargs args;
+  ThriftHiveMetastore_get_partition_names_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.deleteData = &deleteData;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31815,7 +34086,7 @@ void ThriftHiveMetastoreClient::send_drop_partition(const std::string& db_name,
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_partition()
+void ThriftHiveMetastoreClient::recv_get_partition_names(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31835,47 +34106,43 @@ bool ThriftHiveMetastoreClient::recv_drop_partition()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_partition") != 0) {
+  if (fname.compare("get_partition_names") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_partition_presult result;
+  ThriftHiveMetastore_get_partition_names_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
-
-  if (result.__isset.success) {
-    return _return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
+  iprot_->getTransport()->readEnd();
+
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_names failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_partitions_ps(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
 {
-  send_drop_partition_with_environment_context(db_name, tbl_name, part_vals, deleteData, environment_context);
-  return recv_drop_partition_with_environment_context();
+  send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
+  recv_get_partitions_ps(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const bool deleteData, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_partitions_ps(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_partition_with_environment_context_pargs args;
+  ThriftHiveMetastore_get_partitions_ps_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
   args.part_vals = &part_vals;
-  args.deleteData = &deleteData;
-  args.environment_context = &environment_context;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31883,7 +34150,7 @@ void ThriftHiveMetastoreClient::send_drop_partition_with_environment_context(con
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_partition_with_environment_context()
+void ThriftHiveMetastoreClient::recv_get_partitions_ps(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31903,20 +34170,20 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_with_environment_context()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_partition_with_environment_context") != 0) {
+  if (fname.compare("get_partitions_ps") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_partition_with_environment_context_presult result;
+  ThriftHiveMetastore_get_partitions_ps_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -31924,25 +34191,27 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_with_environment_context()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_with_environment_context failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_ps failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData)
+void ThriftHiveMetastoreClient::get_partitions_ps_with_auth(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
 {
-  send_drop_partition_by_name(db_name, tbl_name, part_name, deleteData);
-  return recv_drop_partition_by_name();
+  send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
+  recv_get_partitions_ps_with_auth(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData)
+void ThriftHiveMetastoreClient::send_get_partitions_ps_with_auth(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_partition_by_name_pargs args;
+  ThriftHiveMetastore_get_partitions_ps_with_auth_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
-  args.deleteData = &deleteData;
+  args.part_vals = &part_vals;
+  args.max_parts = &max_parts;
+  args.user_name = &user_name;
+  args.group_names = &group_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -31950,7 +34219,7 @@ void ThriftHiveMetastoreClient::send_drop_partition_by_name(const std::string& d
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_partition_by_name()
+void ThriftHiveMetastoreClient::recv_get_partitions_ps_with_auth(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -31970,20 +34239,20 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_by_name()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_partition_by_name") != 0) {
+  if (fname.compare("get_partitions_ps_with_auth") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_partition_by_name_presult result;
+  ThriftHiveMetastore_get_partitions_ps_with_auth_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -31991,26 +34260,25 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_by_name()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_by_name failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_ps_with_auth failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_partition_names_ps(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
 {
-  send_drop_partition_by_name_with_environment_context(db_name, tbl_name, part_name, deleteData, environment_context);
-  return recv_drop_partition_by_name_with_environment_context();
+  send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
+  recv_get_partition_names_ps(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_partition_by_name_with_environment_context(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const bool deleteData, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_partition_names_ps(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_pargs args;
+  ThriftHiveMetastore_get_partition_names_ps_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
-  args.deleteData = &deleteData;
-  args.environment_context = &environment_context;
+  args.part_vals = &part_vals;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32018,7 +34286,7 @@ void ThriftHiveMetastoreClient::send_drop_partition_by_name_with_environment_con
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_partition_by_name_with_environment_context()
+void ThriftHiveMetastoreClient::recv_get_partition_names_ps(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32038,20 +34306,20 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_by_name_with_environment_con
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_partition_by_name_with_environment_context") != 0) {
+  if (fname.compare("get_partition_names_ps") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_presult result;
+  ThriftHiveMetastore_get_partition_names_ps_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -32059,22 +34327,25 @@ bool ThriftHiveMetastoreClient::recv_drop_partition_by_name_with_environment_con
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partition_by_name_with_environment_context failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_names_ps failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::drop_partitions_req(DropPartitionsResult& _return, const DropPartitionsRequest& req)
+void ThriftHiveMetastoreClient::get_partitions_by_filter(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int16_t max_parts)
 {
-  send_drop_partitions_req(req);
-  recv_drop_partitions_req(_return);
+  send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
+  recv_get_partitions_by_filter(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_partitions_req(const DropPartitionsRequest& req)
+void ThriftHiveMetastoreClient::send_get_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int16_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_partitions_req_pargs args;
-  args.req = &req;
+  ThriftHiveMetastore_get_partitions_by_filter_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.filter = &filter;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32082,7 +34353,7 @@ void ThriftHiveMetastoreClient::send_drop_partitions_req(const DropPartitionsReq
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_drop_partitions_req(DropPartitionsResult& _return)
+void ThriftHiveMetastoreClient::recv_get_partitions_by_filter(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32102,12 +34373,12 @@ void ThriftHiveMetastoreClient::recv_drop_partitions_req(DropPartitionsResult& _
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_partitions_req") != 0) {
+  if (fname.compare("get_partitions_by_filter") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_drop_partitions_req_presult result;
+  ThriftHiveMetastore_get_partitions_by_filter_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32123,24 +34394,24 @@ void ThriftHiveMetastoreClient::recv_drop_partitions_req(DropPartitionsResult& _
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_partitions_req failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_filter failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partition(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
+int32_t ThriftHiveMetastoreClient::get_num_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter)
 {
-  send_get_partition(db_name, tbl_name, part_vals);
-  recv_get_partition(_return);
+  send_get_num_partitions_by_filter(db_name, tbl_name, filter);
+  return recv_get_num_partitions_by_filter();
 }
 
-void ThriftHiveMetastoreClient::send_get_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals)
+void ThriftHiveMetastoreClient::send_get_num_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_pargs args;
+  ThriftHiveMetastore_get_num_partitions_by_filter_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
+  args.filter = &filter;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32148,7 +34419,7 @@ void ThriftHiveMetastoreClient::send_get_partition(const std::string& db_name, c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition(Partition& _return)
+int32_t ThriftHiveMetastoreClient::recv_get_num_partitions_by_filter()
 {
 
   int32_t rseqid = 0;
@@ -32168,20 +34439,20 @@ void ThriftHiveMetastoreClient::recv_get_partition(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition") != 0) {
+  if (fname.compare("get_num_partitions_by_filter") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partition_presult result;
+  int32_t _return;
+  ThriftHiveMetastore_get_num_partitions_by_filter_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -32189,26 +34460,25 @@ void ThriftHiveMetastoreClient::recv_get_partition(Partition& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_num_partitions_by_filter failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::exchange_partition(Partition& _return, const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
+void ThriftHiveMetastoreClient::get_part_specs_by_filter(std::vector<PartitionSpec> & _return, const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int32_t max_parts)
 {
-  send_exchange_partition(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
-  recv_exchange_partition(_return);
+  send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts);
+  recv_get_part_specs_by_filter(_return);
 }
 
-void ThriftHiveMetastoreClient::send_exchange_partition(const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
+void ThriftHiveMetastoreClient::send_get_part_specs_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int32_t max_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_exchange_partition_pargs args;
-  args.partitionSpecs = &partitionSpecs;
-  args.source_db = &source_db;
-  args.source_table_name = &source_table_name;
-  args.dest_db = &dest_db;
-  args.dest_table_name = &dest_table_name;
+  ThriftHiveMetastore_get_part_specs_by_filter_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.filter = &filter;
+  args.max_parts = &max_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32216,7 +34486,7 @@ void ThriftHiveMetastoreClient::send_exchange_partition(const std::map<std::stri
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_exchange_partition(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_part_specs_by_filter(std::vector<PartitionSpec> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32236,12 +34506,12 @@ void ThriftHiveMetastoreClient::recv_exchange_partition(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("exchange_partition") != 0) {
+  if (fname.compare("get_part_specs_by_filter") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_exchange_partition_presult result;
+  ThriftHiveMetastore_get_part_specs_by_filter_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32257,32 +34527,22 @@ void ThriftHiveMetastoreClient::recv_exchange_partition(Partition& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "exchange_partition failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_part_specs_by_filter failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::exchange_partitions(std::vector<Partition> & _return, const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
+void ThriftHiveMetastoreClient::get_partitions_by_expr(PartitionsByExprResult& _return, const PartitionsByExprRequest& req)
 {
-  send_exchange_partitions(partitionSpecs, source_db, source_table_name, dest_db, dest_table_name);
-  recv_exchange_partitions(_return);
+  send_get_partitions_by_expr(req);
+  recv_get_partitions_by_expr(_return);
 }
 
-void ThriftHiveMetastoreClient::send_exchange_partitions(const std::map<std::string, std::string> & partitionSpecs, const std::string& source_db, const std::string& source_table_name, const std::string& dest_db, const std::string& dest_table_name)
+void ThriftHiveMetastoreClient::send_get_partitions_by_expr(const PartitionsByExprRequest& req)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_exchange_partitions_pargs args;
-  args.partitionSpecs = &partitionSpecs;
-  args.source_db = &source_db;
-  args.source_table_name = &source_table_name;
-  args.dest_db = &dest_db;
-  args.dest_table_name = &dest_table_name;
+  ThriftHiveMetastore_get_partitions_by_expr_pargs args;
+  args.req = &req;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32290,7 +34550,7 @@ void ThriftHiveMetastoreClient::send_exchange_partitions(const std::map<std::str
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_exchange_partitions(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_get_partitions_by_expr(PartitionsByExprResult& _return)
 {
 
   int32_t rseqid = 0;
@@ -32310,12 +34570,12 @@ void ThriftHiveMetastoreClient::recv_exchange_partitions(std::vector<Partition>
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("exchange_partitions") != 0) {
+  if (fname.compare("get_partitions_by_expr") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_exchange_partitions_presult result;
+  ThriftHiveMetastore_get_partitions_by_expr_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32331,32 +34591,24 @@ void ThriftHiveMetastoreClient::recv_exchange_partitions(std::vector<Partition>
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "exchange_partitions failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_expr failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partition_with_auth(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::get_partitions_by_names(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & names)
 {
-  send_get_partition_with_auth(db_name, tbl_name, part_vals, user_name, group_names);
-  recv_get_partition_with_auth(_return);
+  send_get_partitions_by_names(db_name, tbl_name, names);
+  recv_get_partitions_by_names(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_partition_with_auth(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::send_get_partitions_by_names(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_with_auth_pargs args;
+  ThriftHiveMetastore_get_partitions_by_names_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.user_name = &user_name;
-  args.group_names = &group_names;
+  args.names = &names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32364,7 +34616,7 @@ void ThriftHiveMetastoreClient::send_get_partition_with_auth(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition_with_auth(Partition& _return)
+void ThriftHiveMetastoreClient::recv_get_partitions_by_names(std::vector<Partition> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32384,12 +34636,12 @@ void ThriftHiveMetastoreClient::recv_get_partition_with_auth(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition_with_auth") != 0) {
+  if (fname.compare("get_partitions_by_names") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partition_with_auth_presult result;
+  ThriftHiveMetastore_get_partitions_by_names_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32405,24 +34657,24 @@ void ThriftHiveMetastoreClient::recv_get_partition_with_auth(Partition& _return)
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_with_auth failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_names failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partition_by_name(Partition& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
+void ThriftHiveMetastoreClient::alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part)
 {
-  send_get_partition_by_name(db_name, tbl_name, part_name);
-  recv_get_partition_by_name(_return);
+  send_alter_partition(db_name, tbl_name, new_part);
+  recv_alter_partition();
 }
 
-void ThriftHiveMetastoreClient::send_get_partition_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& part_name)
+void ThriftHiveMetastoreClient::send_alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_by_name_pargs args;
+  ThriftHiveMetastore_alter_partition_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
+  args.new_part = &new_part;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32430,7 +34682,7 @@ void ThriftHiveMetastoreClient::send_get_partition_by_name(const std::string& db
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition_by_name(Partition& _return)
+void ThriftHiveMetastoreClient::recv_alter_partition()
 {
 
   int32_t rseqid = 0;
@@ -32450,45 +34702,40 @@ void ThriftHiveMetastoreClient::recv_get_partition_by_name(Partition& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition_by_name") != 0) {
+  if (fname.compare("alter_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
-  }
-  ThriftHiveMetastore_get_partition_by_name_presult result;
-  result.success = &_return;
+  }
+  ThriftHiveMetastore_alter_partition_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_by_name failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_partitions(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
+void ThriftHiveMetastoreClient::alter_partitions(const std::string& db_name, const std::string& tbl_name, const std::vector<Partition> & new_parts)
 {
-  send_get_partitions(db_name, tbl_name, max_parts);
-  recv_get_partitions(_return);
+  send_alter_partitions(db_name, tbl_name, new_parts);
+  recv_alter_partitions();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
+void ThriftHiveMetastoreClient::send_alter_partitions(const std::string& db_name, const std::string& tbl_name, const std::vector<Partition> & new_parts)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_pargs args;
+  ThriftHiveMetastore_alter_partitions_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.max_parts = &max_parts;
+  args.new_parts = &new_parts;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32496,7 +34743,7 @@ void ThriftHiveMetastoreClient::send_get_partitions(const std::string& db_name,
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_alter_partitions()
 {
 
   int32_t rseqid = 0;
@@ -32516,47 +34763,41 @@ void ThriftHiveMetastoreClient::recv_get_partitions(std::vector<Partition> & _re
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions") != 0) {
+  if (fname.compare("alter_partitions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_partitions_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_partitions_with_auth(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::alter_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const Partition& new_part, const EnvironmentContext& environment_context)
 {
-  send_get_partitions_with_auth(db_name, tbl_name, max_parts, user_name, group_names);
-  recv_get_partitions_with_auth(_return);
+  send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
+  recv_alter_partition_with_environment_context();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_with_auth(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::send_alter_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const Partition& new_part, const EnvironmentContext& environment_context)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_with_auth_pargs args;
+  ThriftHiveMetastore_alter_partition_with_environment_context_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.max_parts = &max_parts;
-  args.user_name = &user_name;
-  args.group_names = &group_names;
+  args.new_part = &new_part;
+  args.environment_context = &environment_context;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32564,7 +34805,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_with_auth(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_with_auth(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_alter_partition_with_environment_context()
 {
 
   int32_t rseqid = 0;
@@ -32584,45 +34825,41 @@ void ThriftHiveMetastoreClient::recv_get_partitions_with_auth(std::vector<Partit
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_with_auth") != 0) {
+  if (fname.compare("alter_partition_with_environment_context") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_with_auth_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_partition_with_environment_context_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_with_auth failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_partitions_pspec(std::vector<PartitionSpec> & _return, const std::string& db_name, const std::string& tbl_name, const int32_t max_parts)
+void ThriftHiveMetastoreClient::rename_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const Partition& new_part)
 {
-  send_get_partitions_pspec(db_name, tbl_name, max_parts);
-  recv_get_partitions_pspec(_return);
+  send_rename_partition(db_name, tbl_name, part_vals, new_part);
+  recv_rename_partition();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_pspec(const std::string& db_name, const std::string& tbl_name, const int32_t max_parts)
+void ThriftHiveMetastoreClient::send_rename_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const Partition& new_part)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_pspec_pargs args;
+  ThriftHiveMetastore_rename_partition_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.max_parts = &max_parts;
+  args.part_vals = &part_vals;
+  args.new_part = &new_part;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32630,7 +34867,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_pspec(const std::string& db_
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_pspec(std::vector<PartitionSpec> & _return)
+void ThriftHiveMetastoreClient::recv_rename_partition()
 {
 
   int32_t rseqid = 0;
@@ -32650,45 +34887,39 @@ void ThriftHiveMetastoreClient::recv_get_partitions_pspec(std::vector<PartitionS
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_pspec") != 0) {
+  if (fname.compare("rename_partition") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_pspec_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_rename_partition_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_pspec failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_partition_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
+bool ThriftHiveMetastoreClient::partition_name_has_valid_characters(const std::vector<std::string> & part_vals, const bool throw_exception)
 {
-  send_get_partition_names(db_name, tbl_name, max_parts);
-  recv_get_partition_names(_return);
+  send_partition_name_has_valid_characters(part_vals, throw_exception);
+  return recv_partition_name_has_valid_characters();
 }
 
-void ThriftHiveMetastoreClient::send_get_partition_names(const std::string& db_name, const std::string& tbl_name, const int16_t max_parts)
+void ThriftHiveMetastoreClient::send_partition_name_has_valid_characters(const std::vector<std::string> & part_vals, const bool throw_exception)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_names_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.max_parts = &max_parts;
+  ThriftHiveMetastore_partition_name_has_valid_characters_pargs args;
+  args.part_vals = &part_vals;
+  args.throw_exception = &throw_exception;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32696,7 +34927,7 @@ void ThriftHiveMetastoreClient::send_get_partition_names(const std::string& db_n
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition_names(std::vector<std::string> & _return)
+bool ThriftHiveMetastoreClient::recv_partition_name_has_valid_characters()
 {
 
   int32_t rseqid = 0;
@@ -32716,43 +34947,41 @@ void ThriftHiveMetastoreClient::recv_get_partition_names(std::vector<std::string
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition_names") != 0) {
+  if (fname.compare("partition_name_has_valid_characters") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partition_names_presult result;
+  bool _return;
+  ThriftHiveMetastore_partition_name_has_valid_characters_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
+  if (result.__isset.o1) {
+    throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_names failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_has_valid_characters failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partitions_ps(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
+void ThriftHiveMetastoreClient::get_config_value(std::string& _return, const std::string& name, const std::string& defaultValue)
 {
-  send_get_partitions_ps(db_name, tbl_name, part_vals, max_parts);
-  recv_get_partitions_ps(_return);
+  send_get_config_value(name, defaultValue);
+  recv_get_config_value(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_ps(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
+void ThriftHiveMetastoreClient::send_get_config_value(const std::string& name, const std::string& defaultValue)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_ps_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.max_parts = &max_parts;
+  ThriftHiveMetastore_get_config_value_pargs args;
+  args.name = &name;
+  args.defaultValue = &defaultValue;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32760,7 +34989,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_ps(const std::string& db_nam
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_ps(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_get_config_value(std::string& _return)
 {
 
   int32_t rseqid = 0;
@@ -32780,12 +35009,12 @@ void ThriftHiveMetastoreClient::recv_get_partitions_ps(std::vector<Partition> &
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_ps") != 0) {
+  if (fname.compare("get_config_value") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_ps_presult result;
+  ThriftHiveMetastore_get_config_value_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32798,30 +35027,22 @@ void ThriftHiveMetastoreClient::recv_get_partitions_ps(std::vector<Partition> &
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_ps failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_config_value failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partitions_ps_with_auth(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::partition_name_to_vals(std::vector<std::string> & _return, const std::string& part_name)
 {
-  send_get_partitions_ps_with_auth(db_name, tbl_name, part_vals, max_parts, user_name, group_names);
-  recv_get_partitions_ps_with_auth(_return);
+  send_partition_name_to_vals(part_name);
+  recv_partition_name_to_vals(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_ps_with_auth(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::send_partition_name_to_vals(const std::string& part_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_ps_with_auth_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.max_parts = &max_parts;
-  args.user_name = &user_name;
-  args.group_names = &group_names;
+  ThriftHiveMetastore_partition_name_to_vals_pargs args;
+  args.part_name = &part_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32829,7 +35050,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_ps_with_auth(const std::stri
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_ps_with_auth(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_partition_name_to_vals(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32849,12 +35070,12 @@ void ThriftHiveMetastoreClient::recv_get_partitions_ps_with_auth(std::vector<Par
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_ps_with_auth") != 0) {
+  if (fname.compare("partition_name_to_vals") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_ps_with_auth_presult result;
+  ThriftHiveMetastore_partition_name_to_vals_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32867,28 +35088,22 @@ void ThriftHiveMetastoreClient::recv_get_partitions_ps_with_auth(std::vector<Par
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_ps_with_auth failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_to_vals failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partition_names_ps(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
+void ThriftHiveMetastoreClient::partition_name_to_spec(std::map<std::string, std::string> & _return, const std::string& part_name)
 {
-  send_get_partition_names_ps(db_name, tbl_name, part_vals, max_parts);
-  recv_get_partition_names_ps(_return);
+  send_partition_name_to_spec(part_name);
+  recv_partition_name_to_spec(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_partition_names_ps(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const int16_t max_parts)
+void ThriftHiveMetastoreClient::send_partition_name_to_spec(const std::string& part_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_names_ps_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.max_parts = &max_parts;
+  ThriftHiveMetastore_partition_name_to_spec_pargs args;
+  args.part_name = &part_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32896,7 +35111,7 @@ void ThriftHiveMetastoreClient::send_get_partition_names_ps(const std::string& d
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition_names_ps(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_partition_name_to_spec(std::map<std::string, std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -32916,12 +35131,12 @@ void ThriftHiveMetastoreClient::recv_get_partition_names_ps(std::vector<std::str
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition_names_ps") != 0) {
+  if (fname.compare("partition_name_to_spec") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partition_names_ps_presult result;
+  ThriftHiveMetastore_partition_name_to_spec_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -32934,28 +35149,25 @@ void ThriftHiveMetastoreClient::recv_get_partition_names_ps(std::vector<std::str
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_names_ps failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_to_spec failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partitions_by_filter(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int16_t max_parts)
+void ThriftHiveMetastoreClient::markPartitionForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
 {
-  send_get_partitions_by_filter(db_name, tbl_name, filter, max_parts);
-  recv_get_partitions_by_filter(_return);
+  send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
+  recv_markPartitionForEvent();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int16_t max_parts)
+void ThriftHiveMetastoreClient::send_markPartitionForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_by_filter_pargs args;
+  ThriftHiveMetastore_markPartitionForEvent_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.filter = &filter;
-  args.max_parts = &max_parts;
+  args.part_vals = &part_vals;
+  args.eventType = &eventType;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -32963,7 +35175,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_by_filter(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_by_filter(std::vector<Partition> & _return)
+void ThriftHiveMetastoreClient::recv_markPartitionForEvent()
 {
 
   int32_t rseqid = 0;
@@ -32983,45 +35195,53 @@ void ThriftHiveMetastoreClient::recv_get_partitions_by_filter(std::vector<Partit
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_by_filter") != 0) {
+  if (fname.compare("markPartitionForEvent") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_by_filter_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_markPartitionForEvent_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_filter failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  if (result.__isset.o5) {
+    throw result.o5;
+  }
+  if (result.__isset.o6) {
+    throw result.o6;
+  }
+  return;
 }
 
-int32_t ThriftHiveMetastoreClient::get_num_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter)
+bool ThriftHiveMetastoreClient::isPartitionMarkedForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
 {
-  send_get_num_partitions_by_filter(db_name, tbl_name, filter);
-  return recv_get_num_partitions_by_filter();
+  send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
+  return recv_isPartitionMarkedForEvent();
 }
 
-void ThriftHiveMetastoreClient::send_get_num_partitions_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter)
+void ThriftHiveMetastoreClient::send_isPartitionMarkedForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_num_partitions_by_filter_pargs args;
+  ThriftHiveMetastore_isPartitionMarkedForEvent_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.filter = &filter;
+  args.part_vals = &part_vals;
+  args.eventType = &eventType;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33029,7 +35249,7 @@ void ThriftHiveMetastoreClient::send_get_num_partitions_by_filter(const std::str
   oprot_->getTransport()->flush();
 }
 
-int32_t ThriftHiveMetastoreClient::recv_get_num_partitions_by_filter()
+bool ThriftHiveMetastoreClient::recv_isPartitionMarkedForEvent()
 {
 
   int32_t rseqid = 0;
@@ -33049,13 +35269,13 @@ int32_t ThriftHiveMetastoreClient::recv_get_num_partitions_by_filter()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_num_partitions_by_filter") != 0) {
+  if (fname.compare("isPartitionMarkedForEvent") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  int32_t _return;
-  ThriftHiveMetastore_get_num_partitions_by_filter_presult result;
+  bool _return;
+  ThriftHiveMetastore_isPartitionMarkedForEvent_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33070,25 +35290,35 @@ int32_t ThriftHiveMetastoreClient::recv_get_num_partitions_by_filter()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_num_partitions_by_filter failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  if (result.__isset.o5) {
+    throw result.o5;
+  }
+  if (result.__isset.o6) {
+    throw result.o6;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "isPartitionMarkedForEvent failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_part_specs_by_filter(std::vector<PartitionSpec> & _return, const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int32_t max_parts)
+void ThriftHiveMetastoreClient::add_index(Index& _return, const Index& new_index, const Table& index_table)
 {
-  send_get_part_specs_by_filter(db_name, tbl_name, filter, max_parts);
-  recv_get_part_specs_by_filter(_return);
+  send_add_index(new_index, index_table);
+  recv_add_index(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_part_specs_by_filter(const std::string& db_name, const std::string& tbl_name, const std::string& filter, const int32_t max_parts)
+void ThriftHiveMetastoreClient::send_add_index(const Index& new_index, const Table& index_table)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_index", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_part_specs_by_filter_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.filter = &filter;
-  args.max_parts = &max_parts;
+  ThriftHiveMetastore_add_index_pargs args;
+  args.new_index = &new_index;
+  args.index_table = &index_table;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33096,7 +35326,7 @@ void ThriftHiveMetastoreClient::send_get_part_specs_by_filter(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_part_specs_by_filter(std::vector<PartitionSpec> & _return)
+void ThriftHiveMetastoreClient::recv_add_index(Index& _return)
 {
 
   int32_t rseqid = 0;
@@ -33116,12 +35346,12 @@ void ThriftHiveMetastoreClient::recv_get_part_specs_by_filter(std::vector<Partit
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_part_specs_by_filter") != 0) {
+  if (fname.compare("add_index") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_part_specs_by_filter_presult result;
+  ThriftHiveMetastore_add_index_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33137,22 +35367,28 @@ void ThriftHiveMetastoreClient::recv_get_part_specs_by_filter(std::vector<Partit
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_part_specs_by_filter failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_index failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partitions_by_expr(PartitionsByExprResult& _return, const PartitionsByExprRequest& req)
+void ThriftHiveMetastoreClient::alter_index(const std::string& dbname, const std::string& base_tbl_name, const std::string& idx_name, const Index& new_idx)
 {
-  send_get_partitions_by_expr(req);
-  recv_get_partitions_by_expr(_return);
+  send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
+  recv_alter_index();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_by_expr(const PartitionsByExprRequest& req)
+void ThriftHiveMetastoreClient::send_alter_index(const std::string& dbname, const std::string& base_tbl_name, const std::string& idx_name, const Index& new_idx)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_by_expr_pargs args;
-  args.req = &req;
+  ThriftHiveMetastore_alter_index_pargs args;
+  args.dbname = &dbname;
+  args.base_tbl_name = &base_tbl_name;
+  args.idx_name = &idx_name;
+  args.new_idx = &new_idx;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33160,7 +35396,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_by_expr(const PartitionsByEx
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_by_expr(PartitionsByExprResult& _return)
+void ThriftHiveMetastoreClient::recv_alter_index()
 {
 
   int32_t rseqid = 0;
@@ -33180,45 +35416,41 @@ void ThriftHiveMetastoreClient::recv_get_partitions_by_expr(PartitionsByExprResu
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_by_expr") != 0) {
+  if (fname.compare("alter_index") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_by_expr_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_index_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_expr failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_partitions_by_names(std::vector<Partition> & _return, const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & names)
+bool ThriftHiveMetastoreClient::drop_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name, const bool deleteData)
 {
-  send_get_partitions_by_names(db_name, tbl_name, names);
-  recv_get_partitions_by_names(_return);
+  send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
+  return recv_drop_index_by_name();
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_by_names(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & names)
+void ThriftHiveMetastoreClient::send_drop_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name, const bool deleteData)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_by_names_pargs args;
+  ThriftHiveMetastore_drop_index_by_name_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.names = &names;
+  args.index_name = &index_name;
+  args.deleteData = &deleteData;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33226,7 +35458,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_by_names(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_by_names(std::vector<Partition> & _return)
+bool ThriftHiveMetastoreClient::recv_drop_index_by_name()
 {
 
   int32_t rseqid = 0;
@@ -33246,20 +35478,20 @@ void ThriftHiveMetastoreClient::recv_get_partitions_by_names(std::vector<Partiti
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_by_names") != 0) {
+  if (fname.compare("drop_index_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_by_names_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_index_by_name_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -33267,24 +35499,24 @@ void ThriftHiveMetastoreClient::recv_get_partitions_by_names(std::vector<Partiti
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_by_names failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_index_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part)
+void ThriftHiveMetastoreClient::get_index_by_name(Index& _return, const std::string& db_name, const std::string& tbl_name, const std::string& index_name)
 {
-  send_alter_partition(db_name, tbl_name, new_part);
-  recv_alter_partition();
+  send_get_index_by_name(db_name, tbl_name, index_name);
+  recv_get_index_by_name(_return);
 }
 
-void ThriftHiveMetastoreClient::send_alter_partition(const std::string& db_name, const std::string& tbl_name, const Partition& new_part)
+void ThriftHiveMetastoreClient::send_get_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_partition_pargs args;
+  ThriftHiveMetastore_get_index_by_name_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_part = &new_part;
+  args.index_name = &index_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33292,7 +35524,7 @@ void ThriftHiveMetastoreClient::send_alter_partition(const std::string& db_name,
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_partition()
+void ThriftHiveMetastoreClient::recv_get_index_by_name(Index& _return)
 {
 
   int32_t rseqid = 0;
@@ -33312,40 +35544,45 @@ void ThriftHiveMetastoreClient::recv_alter_partition()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_partition") != 0) {
+  if (fname.compare("get_index_by_name") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_partition_presult result;
+  ThriftHiveMetastore_get_index_by_name_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_index_by_name failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_partitions(const std::string& db_name, const std::string& tbl_name, const std::vector<Partition> & new_parts)
+void ThriftHiveMetastoreClient::get_indexes(std::vector<Index> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
 {
-  send_alter_partitions(db_name, tbl_name, new_parts);
-  recv_alter_partitions();
+  send_get_indexes(db_name, tbl_name, max_indexes);
+  recv_get_indexes(_return);
 }
 
-void ThriftHiveMetastoreClient::send_alter_partitions(const std::string& db_name, const std::string& tbl_name, const std::vector<Partition> & new_parts)
+void ThriftHiveMetastoreClient::send_get_indexes(const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_partitions_pargs args;
+  ThriftHiveMetastore_get_indexes_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_parts = &new_parts;
+  args.max_indexes = &max_indexes;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33353,7 +35590,7 @@ void ThriftHiveMetastoreClient::send_alter_partitions(const std::string& db_name
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_partitions()
+void ThriftHiveMetastoreClient::recv_get_indexes(std::vector<Index> & _return)
 {
 
   int32_t rseqid = 0;
@@ -33373,41 +35610,45 @@ void ThriftHiveMetastoreClient::recv_alter_partitions()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_partitions") != 0) {
+  if (fname.compare("get_indexes") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_partitions_presult result;
+  ThriftHiveMetastore_get_indexes_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_indexes failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const Partition& new_part, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::get_index_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
 {
-  send_alter_partition_with_environment_context(db_name, tbl_name, new_part, environment_context);
-  recv_alter_partition_with_environment_context();
+  send_get_index_names(db_name, tbl_name, max_indexes);
+  recv_get_index_names(_return);
 }
 
-void ThriftHiveMetastoreClient::send_alter_partition_with_environment_context(const std::string& db_name, const std::string& tbl_name, const Partition& new_part, const EnvironmentContext& environment_context)
+void ThriftHiveMetastoreClient::send_get_index_names(const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_partition_with_environment_context_pargs args;
+  ThriftHiveMetastore_get_index_names_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.new_part = &new_part;
-  args.environment_context = &environment_context;
+  args.max_indexes = &max_indexes;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33415,7 +35656,7 @@ void ThriftHiveMetastoreClient::send_alter_partition_with_environment_context(co
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_partition_with_environment_context()
+void ThriftHiveMetastoreClient::recv_get_index_names(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -33435,41 +35676,40 @@ void ThriftHiveMetastoreClient::recv_alter_partition_with_environment_context()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_partition_with_environment_context") != 0) {
+  if (fname.compare("get_index_names") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_partition_with_environment_context_presult result;
+  ThriftHiveMetastore_get_index_names_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.o1) {
-    throw result.o1;
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_index_names failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::rename_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const Partition& new_part)
+bool ThriftHiveMetastoreClient::update_table_column_statistics(const ColumnStatistics& stats_obj)
 {
-  send_rename_partition(db_name, tbl_name, part_vals, new_part);
-  recv_rename_partition();
+  send_update_table_column_statistics(stats_obj);
+  return recv_update_table_column_statistics();
 }
 
-void ThriftHiveMetastoreClient::send_rename_partition(const std::string& db_name, const std::string& tbl_name, const std::vector<std::string> & part_vals, const Partition& new_part)
+void ThriftHiveMetastoreClient::send_update_table_column_statistics(const ColumnStatistics& stats_obj)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_rename_partition_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.new_part = &new_part;
+  ThriftHiveMetastore_update_table_column_statistics_pargs args;
+  args.stats_obj = &stats_obj;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33477,7 +35717,7 @@ void ThriftHiveMetastoreClient::send_rename_partition(const std::string& db_name
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_rename_partition()
+bool ThriftHiveMetastoreClient::recv_update_table_column_statistics()
 {
 
   int32_t rseqid = 0;
@@ -33497,39 +35737,49 @@ void ThriftHiveMetastoreClient::recv_rename_partition()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("rename_partition") != 0) {
+  if (fname.compare("update_table_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_rename_partition_presult result;
+  bool _return;
+  ThriftHiveMetastore_update_table_column_statistics_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_table_column_statistics failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::partition_name_has_valid_characters(const std::vector<std::string> & part_vals, const bool throw_exception)
+bool ThriftHiveMetastoreClient::update_partition_column_statistics(const ColumnStatistics& stats_obj)
 {
-  send_partition_name_has_valid_characters(part_vals, throw_exception);
-  return recv_partition_name_has_valid_characters();
+  send_update_partition_column_statistics(stats_obj);
+  return recv_update_partition_column_statistics();
 }
 
-void ThriftHiveMetastoreClient::send_partition_name_has_valid_characters(const std::vector<std::string> & part_vals, const bool throw_exception)
+void ThriftHiveMetastoreClient::send_update_partition_column_statistics(const ColumnStatistics& stats_obj)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_partition_name_has_valid_characters_pargs args;
-  args.part_vals = &part_vals;
-  args.throw_exception = &throw_exception;
+  ThriftHiveMetastore_update_partition_column_statistics_pargs args;
+  args.stats_obj = &stats_obj;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33537,7 +35787,7 @@ void ThriftHiveMetastoreClient::send_partition_name_has_valid_characters(const s
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_partition_name_has_valid_characters()
+bool ThriftHiveMetastoreClient::recv_update_partition_column_statistics()
 {
 
   int32_t rseqid = 0;
@@ -33557,13 +35807,13 @@ bool ThriftHiveMetastoreClient::recv_partition_name_has_valid_characters()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("partition_name_has_valid_characters") != 0) {
+  if (fname.compare("update_partition_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
   bool _return;
-  ThriftHiveMetastore_partition_name_has_valid_characters_presult result;
+  ThriftHiveMetastore_update_partition_column_statistics_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33575,23 +35825,33 @@ bool ThriftHiveMetastoreClient::recv_partition_name_has_valid_characters()
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_has_valid_characters failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_partition_column_statistics failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_config_value(std::string& _return, const std::string& name, const std::string& defaultValue)
+void ThriftHiveMetastoreClient::get_table_column_statistics(ColumnStatistics& _return, const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
 {
-  send_get_config_value(name, defaultValue);
-  recv_get_config_value(_return);
+  send_get_table_column_statistics(db_name, tbl_name, col_name);
+  recv_get_table_column_statistics(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_config_value(const std::string& name, const std::string& defaultValue)
+void ThriftHiveMetastoreClient::send_get_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_config_value_pargs args;
-  args.name = &name;
-  args.defaultValue = &defaultValue;
+  ThriftHiveMetastore_get_table_column_statistics_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.col_name = &col_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33599,7 +35859,7 @@ void ThriftHiveMetastoreClient::send_get_config_value(const std::string& name, c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_config_value(std::string& _return)
+void ThriftHiveMetastoreClient::recv_get_table_column_statistics(ColumnStatistics& _return)
 {
 
   int32_t rseqid = 0;
@@ -33619,12 +35879,12 @@ void ThriftHiveMetastoreClient::recv_get_config_value(std::string& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_config_value") != 0) {
+  if (fname.compare("get_table_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_config_value_presult result;
+  ThriftHiveMetastore_get_table_column_statistics_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33637,22 +35897,34 @@ void ThriftHiveMetastoreClient::recv_get_config_value(std::string& _return)
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_config_value failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_column_statistics failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::partition_name_to_vals(std::vector<std::string> & _return, const std::string& part_name)
+void ThriftHiveMetastoreClient::get_partition_column_statistics(ColumnStatistics& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
 {
-  send_partition_name_to_vals(part_name);
-  recv_partition_name_to_vals(_return);
+  send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
+  recv_get_partition_column_statistics(_return);
 }
 
-void ThriftHiveMetastoreClient::send_partition_name_to_vals(const std::string& part_name)
+void ThriftHiveMetastoreClient::send_get_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_partition_name_to_vals_pargs args;
+  ThriftHiveMetastore_get_partition_column_statistics_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
   args.part_name = &part_name;
+  args.col_name = &col_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33660,7 +35932,7 @@ void ThriftHiveMetastoreClient::send_partition_name_to_vals(const std::string& p
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_partition_name_to_vals(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_get_partition_column_statistics(ColumnStatistics& _return)
 {
 
   int32_t rseqid = 0;
@@ -33680,12 +35952,12 @@ void ThriftHiveMetastoreClient::recv_partition_name_to_vals(std::vector<std::str
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("partition_name_to_vals") != 0) {
+  if (fname.compare("get_partition_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_partition_name_to_vals_presult result;
+  ThriftHiveMetastore_get_partition_column_statistics_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33698,22 +35970,31 @@ void ThriftHiveMetastoreClient::recv_partition_name_to_vals(std::vector<std::str
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_to_vals failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_column_statistics failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::partition_name_to_spec(std::map<std::string, std::string> & _return, const std::string& part_name)
+void ThriftHiveMetastoreClient::get_table_statistics_req(TableStatsResult& _return, const TableStatsRequest& request)
 {
-  send_partition_name_to_spec(part_name);
-  recv_partition_name_to_spec(_return);
+  send_get_table_statistics_req(request);
+  recv_get_table_statistics_req(_return);
 }
 
-void ThriftHiveMetastoreClient::send_partition_name_to_spec(const std::string& part_name)
+void ThriftHiveMetastoreClient::send_get_table_statistics_req(const TableStatsRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_partition_name_to_spec_pargs args;
-  args.part_name = &part_name;
+  ThriftHiveMetastore_get_table_statistics_req_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33721,7 +36002,7 @@ void ThriftHiveMetastoreClient::send_partition_name_to_spec(const std::string& p
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_partition_name_to_spec(std::map<std::string, std::string> & _return)
+void ThriftHiveMetastoreClient::recv_get_table_statistics_req(TableStatsResult& _return)
 {
 
   int32_t rseqid = 0;
@@ -33741,12 +36022,12 @@ void ThriftHiveMetastoreClient::recv_partition_name_to_spec(std::map<std::string
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("partition_name_to_spec") != 0) {
+  if (fname.compare("get_table_statistics_req") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_partition_name_to_spec_presult result;
+  ThriftHiveMetastore_get_table_statistics_req_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -33759,25 +36040,25 @@ void ThriftHiveMetastoreClient::recv_partition_name_to_spec(std::map<std::string
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "partition_name_to_spec failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_statistics_req failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::markPartitionForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
+void ThriftHiveMetastoreClient::get_partitions_statistics_req(PartitionsStatsResult& _return, const PartitionsStatsRequest& request)
 {
-  send_markPartitionForEvent(db_name, tbl_name, part_vals, eventType);
-  recv_markPartitionForEvent();
+  send_get_partitions_statistics_req(request);
+  recv_get_partitions_statistics_req(_return);
 }
 
-void ThriftHiveMetastoreClient::send_markPartitionForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
+void ThriftHiveMetastoreClient::send_get_partitions_statistics_req(const PartitionsStatsRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_markPartitionForEvent_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.eventType = &eventType;
+  ThriftHiveMetastore_get_partitions_statistics_req_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33785,7 +36066,7 @@ void ThriftHiveMetastoreClient::send_markPartitionForEvent(const std::string& db
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_markPartitionForEvent()
+void ThriftHiveMetastoreClient::recv_get_partitions_statistics_req(PartitionsStatsResult& _return)
 {
 
   int32_t rseqid = 0;
@@ -33805,53 +36086,43 @@ void ThriftHiveMetastoreClient::recv_markPartitionForEvent()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("markPartitionForEvent") != 0) {
+  if (fname.compare("get_partitions_statistics_req") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_markPartitionForEvent_presult result;
+  ThriftHiveMetastore_get_partitions_statistics_req_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  if (result.__isset.o5) {
-    throw result.o5;
-  }
-  if (result.__isset.o6) {
-    throw result.o6;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_statistics_req failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::isPartitionMarkedForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
+void ThriftHiveMetastoreClient::get_aggr_stats_for(AggrStats& _return, const PartitionsStatsRequest& request)
 {
-  send_isPartitionMarkedForEvent(db_name, tbl_name, part_vals, eventType);
-  return recv_isPartitionMarkedForEvent();
+  send_get_aggr_stats_for(request);
+  recv_get_aggr_stats_for(_return);
 }
 
-void ThriftHiveMetastoreClient::send_isPartitionMarkedForEvent(const std::string& db_name, const std::string& tbl_name, const std::map<std::string, std::string> & part_vals, const PartitionEventType::type eventType)
+void ThriftHiveMetastoreClient::send_get_aggr_stats_for(const PartitionsStatsRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_isPartitionMarkedForEvent_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_vals = &part_vals;
-  args.eventType = &eventType;
+  ThriftHiveMetastore_get_aggr_stats_for_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33859,7 +36130,7 @@ void ThriftHiveMetastoreClient::send_isPartitionMarkedForEvent(const std::string
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_isPartitionMarkedForEvent()
+void ThriftHiveMetastoreClient::recv_get_aggr_stats_for(AggrStats& _return)
 {
 
   int32_t rseqid = 0;
@@ -33879,20 +36150,20 @@ bool ThriftHiveMetastoreClient::recv_isPartitionMarkedForEvent()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("isPartitionMarkedForEvent") != 0) {
+  if (fname.compare("get_aggr_stats_for") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_isPartitionMarkedForEvent_presult result;
+  ThriftHiveMetastore_get_aggr_stats_for_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -33900,35 +36171,22 @@ bool ThriftHiveMetastoreClient::recv_isPartitionMarkedForEvent()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  if (result.__isset.o5) {
-    throw result.o5;
-  }
-  if (result.__isset.o6) {
-    throw result.o6;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "isPartitionMarkedForEvent failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_aggr_stats_for failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::add_index(Index& _return, const Index& new_index, const Table& index_table)
+bool ThriftHiveMetastoreClient::set_aggr_stats_for(const SetPartitionsStatsRequest& request)
 {
-  send_add_index(new_index, index_table);
-  recv_add_index(_return);
+  send_set_aggr_stats_for(request);
+  return recv_set_aggr_stats_for();
 }
 
-void ThriftHiveMetastoreClient::send_add_index(const Index& new_index, const Table& index_table)
+void ThriftHiveMetastoreClient::send_set_aggr_stats_for(const SetPartitionsStatsRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("add_index", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_add_index_pargs args;
-  args.new_index = &new_index;
-  args.index_table = &index_table;
+  ThriftHiveMetastore_set_aggr_stats_for_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -33936,7 +36194,7 @@ void ThriftHiveMetastoreClient::send_add_index(const Index& new_index, const Tab
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_add_index(Index& _return)
+bool ThriftHiveMetastoreClient::recv_set_aggr_stats_for()
 {
 
   int32_t rseqid = 0;
@@ -33956,20 +36214,20 @@ void ThriftHiveMetastoreClient::recv_add_index(Index& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("add_index") != 0) {
+  if (fname.compare("set_aggr_stats_for") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_add_index_presult result;
+  bool _return;
+  ThriftHiveMetastore_set_aggr_stats_for_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -33980,25 +36238,28 @@ void ThriftHiveMetastoreClient::recv_add_index(Index& _return)
   if (result.__isset.o3) {
     throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_index failed: unknown result");
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_aggr_stats_for failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_index(const std::string& dbname, const std::string& base_tbl_name, const std::string& idx_name, const Index& new_idx)
+bool ThriftHiveMetastoreClient::delete_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
 {
-  send_alter_index(dbname, base_tbl_name, idx_name, new_idx);
-  recv_alter_index();
+  send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
+  return recv_delete_partition_column_statistics();
 }
 
-void ThriftHiveMetastoreClient::send_alter_index(const std::string& dbname, const std::string& base_tbl_name, const std::string& idx_name, const Index& new_idx)
+void ThriftHiveMetastoreClient::send_delete_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_index_pargs args;
-  args.dbname = &dbname;
-  args.base_tbl_name = &base_tbl_name;
-  args.idx_name = &idx_name;
-  args.new_idx = &new_idx;
+  ThriftHiveMetastore_delete_partition_column_statistics_pargs args;
+  args.db_name = &db_name;
+  args.tbl_name = &tbl_name;
+  args.part_name = &part_name;
+  args.col_name = &col_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34006,7 +36267,7 @@ void ThriftHiveMetastoreClient::send_alter_index(const std::string& dbname, cons
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_index()
+bool ThriftHiveMetastoreClient::recv_delete_partition_column_statistics()
 {
 
   int32_t rseqid = 0;
@@ -34026,41 +36287,51 @@ void ThriftHiveMetastoreClient::recv_alter_index()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_index") != 0) {
+  if (fname.compare("delete_partition_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_index_presult result;
+  bool _return;
+  ThriftHiveMetastore_delete_partition_column_statistics_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    return _return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  return;
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "delete_partition_column_statistics failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name, const bool deleteData)
+bool ThriftHiveMetastoreClient::delete_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
 {
-  send_drop_index_by_name(db_name, tbl_name, index_name, deleteData);
-  return recv_drop_index_by_name();
+  send_delete_table_column_statistics(db_name, tbl_name, col_name);
+  return recv_delete_table_column_statistics();
 }
 
-void ThriftHiveMetastoreClient::send_drop_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name, const bool deleteData)
+void ThriftHiveMetastoreClient::send_delete_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_index_by_name_pargs args;
+  ThriftHiveMetastore_delete_table_column_statistics_pargs args;
   args.db_name = &db_name;
   args.tbl_name = &tbl_name;
-  args.index_name = &index_name;
-  args.deleteData = &deleteData;
+  args.col_name = &col_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34068,7 +36339,7 @@ void ThriftHiveMetastoreClient::send_drop_index_by_name(const std::string& db_na
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_index_by_name()
+bool ThriftHiveMetastoreClient::recv_delete_table_column_statistics()
 {
 
   int32_t rseqid = 0;
@@ -34088,13 +36359,13 @@ bool ThriftHiveMetastoreClient::recv_drop_index_by_name()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_index_by_name") != 0) {
+  if (fname.compare("delete_table_column_statistics") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
   bool _return;
-  ThriftHiveMetastore_drop_index_by_name_presult result;
+  ThriftHiveMetastore_delete_table_column_statistics_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -34109,24 +36380,28 @@ bool ThriftHiveMetastoreClient::recv_drop_index_by_name()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_index_by_name failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "delete_table_column_statistics failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_index_by_name(Index& _return, const std::string& db_name, const std::string& tbl_name, const std::string& index_name)
+void ThriftHiveMetastoreClient::create_function(const Function& func)
 {
-  send_get_index_by_name(db_name, tbl_name, index_name);
-  recv_get_index_by_name(_return);
+  send_create_function(func);
+  recv_create_function();
 }
 
-void ThriftHiveMetastoreClient::send_get_index_by_name(const std::string& db_name, const std::string& tbl_name, const std::string& index_name)
+void ThriftHiveMetastoreClient::send_create_function(const Function& func)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("create_function", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_index_by_name_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.index_name = &index_name;
+  ThriftHiveMetastore_create_function_pargs args;
+  args.func = &func;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34134,7 +36409,7 @@ void ThriftHiveMetastoreClient::send_get_index_by_name(const std::string& db_nam
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_index_by_name(Index& _return)
+void ThriftHiveMetastoreClient::recv_create_function()
 {
 
   int32_t rseqid = 0;
@@ -34154,45 +36429,45 @@ void ThriftHiveMetastoreClient::recv_get_index_by_name(Index& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_index_by_name") != 0) {
+  if (fname.compare("create_function") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_index_by_name_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_create_function_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_index_by_name failed: unknown result");
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  if (result.__isset.o4) {
+    throw result.o4;
+  }
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_indexes(std::vector<Index> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
+void ThriftHiveMetastoreClient::drop_function(const std::string& dbName, const std::string& funcName)
 {
-  send_get_indexes(db_name, tbl_name, max_indexes);
-  recv_get_indexes(_return);
+  send_drop_function(dbName, funcName);
+  recv_drop_function();
 }
 
-void ThriftHiveMetastoreClient::send_get_indexes(const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
+void ThriftHiveMetastoreClient::send_drop_function(const std::string& dbName, const std::string& funcName)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_indexes_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.max_indexes = &max_indexes;
+  ThriftHiveMetastore_drop_function_pargs args;
+  args.dbName = &dbName;
+  args.funcName = &funcName;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34200,7 +36475,7 @@ void ThriftHiveMetastoreClient::send_get_indexes(const std::string& db_name, con
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_indexes(std::vector<Index> & _return)
+void ThriftHiveMetastoreClient::recv_drop_function()
 {
 
   int32_t rseqid = 0;
@@ -34220,45 +36495,40 @@ void ThriftHiveMetastoreClient::recv_get_indexes(std::vector<Index> & _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_indexes") != 0) {
+  if (fname.compare("drop_function") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_indexes_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_drop_function_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
+  if (result.__isset.o3) {
+    throw result.o3;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_indexes failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::get_index_names(std::vector<std::string> & _return, const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
+void ThriftHiveMetastoreClient::alter_function(const std::string& dbName, const std::string& funcName, const Function& newFunc)
 {
-  send_get_index_names(db_name, tbl_name, max_indexes);
-  recv_get_index_names(_return);
+  send_alter_function(dbName, funcName, newFunc);
+  recv_alter_function();
 }
 
-void ThriftHiveMetastoreClient::send_get_index_names(const std::string& db_name, const std::string& tbl_name, const int16_t max_indexes)
+void ThriftHiveMetastoreClient::send_alter_function(const std::string& dbName, const std::string& funcName, const Function& newFunc)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_index_names_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.max_indexes = &max_indexes;
+  ThriftHiveMetastore_alter_function_pargs args;
+  args.dbName = &dbName;
+  args.funcName = &funcName;
+  args.newFunc = &newFunc;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34266,7 +36536,7 @@ void ThriftHiveMetastoreClient::send_get_index_names(const std::string& db_name,
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_index_names(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_alter_function()
 {
 
   int32_t rseqid = 0;
@@ -34286,40 +36556,39 @@ void ThriftHiveMetastoreClient::recv_get_index_names(std::vector<std::string> &
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_index_names") != 0) {
+  if (fname.compare("alter_function") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_index_names_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_alter_function_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+  if (result.__isset.o1) {
+    throw result.o1;
   }
   if (result.__isset.o2) {
     throw result.o2;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_index_names failed: unknown result");
+  return;
 }
 
-bool ThriftHiveMetastoreClient::update_table_column_statistics(const ColumnStatistics& stats_obj)
+void ThriftHiveMetastoreClient::get_functions(std::vector<std::string> & _return, const std::string& dbName, const std::string& pattern)
 {
-  send_update_table_column_statistics(stats_obj);
-  return recv_update_table_column_statistics();
+  send_get_functions(dbName, pattern);
+  recv_get_functions(_return);
 }
 
-void ThriftHiveMetastoreClient::send_update_table_column_statistics(const ColumnStatistics& stats_obj)
+void ThriftHiveMetastoreClient::send_get_functions(const std::string& dbName, const std::string& pattern)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_update_table_column_statistics_pargs args;
-  args.stats_obj = &stats_obj;
+  ThriftHiveMetastore_get_functions_pargs args;
+  args.dbName = &dbName;
+  args.pattern = &pattern;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34327,7 +36596,7 @@ void ThriftHiveMetastoreClient::send_update_table_column_statistics(const Column
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_update_table_column_statistics()
+void ThriftHiveMetastoreClient::recv_get_functions(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -34347,49 +36616,41 @@ bool ThriftHiveMetastoreClient::recv_update_table_column_statistics()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("update_table_column_statistics") != 0) {
+  if (fname.compare("get_functions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_update_table_column_statistics_presult result;
+  ThriftHiveMetastore_get_functions_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_table_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_functions failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::update_partition_column_statistics(const ColumnStatistics& stats_obj)
+void ThriftHiveMetastoreClient::get_function(Function& _return, const std::string& dbName, const std::string& funcName)
 {
-  send_update_partition_column_statistics(stats_obj);
-  return recv_update_partition_column_statistics();
+  send_get_function(dbName, funcName);
+  recv_get_function(_return);
 }
 
-void ThriftHiveMetastoreClient::send_update_partition_column_statistics(const ColumnStatistics& stats_obj)
+void ThriftHiveMetastoreClient::send_get_function(const std::string& dbName, const std::string& funcName)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_function", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_update_partition_column_statistics_pargs args;
-  args.stats_obj = &stats_obj;
+  ThriftHiveMetastore_get_function_pargs args;
+  args.dbName = &dbName;
+  args.funcName = &funcName;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34397,7 +36658,7 @@ void ThriftHiveMetastoreClient::send_update_partition_column_statistics(const Co
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_update_partition_column_statistics()
+void ThriftHiveMetastoreClient::recv_get_function(Function& _return)
 {
 
   int32_t rseqid = 0;
@@ -34417,20 +36678,20 @@ bool ThriftHiveMetastoreClient::recv_update_partition_column_statistics()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("update_partition_column_statistics") != 0) {
+  if (fname.compare("get_function") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_update_partition_column_statistics_presult result;
+  ThriftHiveMetastore_get_function_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
@@ -34438,30 +36699,21 @@ bool ThriftHiveMetastoreClient::recv_update_partition_column_statistics()
   if (result.__isset.o2) {
     throw result.o2;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_partition_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_function failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table_column_statistics(ColumnStatistics& _return, const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::get_all_functions(GetAllFunctionsResponse& _return)
 {
-  send_get_table_column_statistics(db_name, tbl_name, col_name);
-  recv_get_table_column_statistics(_return);
+  send_get_all_functions();
+  recv_get_all_functions(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::send_get_all_functions()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_column_statistics_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.col_name = &col_name;
+  ThriftHiveMetastore_get_all_functions_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34469,7 +36721,7 @@ void ThriftHiveMetastoreClient::send_get_table_column_statistics(const std::stri
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table_column_statistics(ColumnStatistics& _return)
+void ThriftHiveMetastoreClient::recv_get_all_functions(GetAllFunctionsResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -34489,12 +36741,12 @@ void ThriftHiveMetastoreClient::recv_get_table_column_statistics(ColumnStatistic
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table_column_statistics") != 0) {
+  if (fname.compare("get_all_functions") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_column_statistics_presult result;
+  ThriftHiveMetastore_get_all_functions_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -34507,34 +36759,22 @@ void ThriftHiveMetastoreClient::recv_get_table_column_statistics(ColumnStatistic
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_functions failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partition_column_statistics(ColumnStatistics& _return, const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
+bool ThriftHiveMetastoreClient::create_role(const Role& role)
 {
-  send_get_partition_column_statistics(db_name, tbl_name, part_name, col_name);
-  recv_get_partition_column_statistics(_return);
+  send_create_role(role);
+  return recv_create_role();
 }
 
-void ThriftHiveMetastoreClient::send_get_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::send_create_role(const Role& role)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("create_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partition_column_statistics_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
-  args.col_name = &col_name;
+  ThriftHiveMetastore_create_role_pargs args;
+  args.role = &role;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34542,7 +36782,7 @@ void ThriftHiveMetastoreClient::send_get_partition_column_statistics(const std::
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partition_column_statistics(ColumnStatistics& _return)
+bool ThriftHiveMetastoreClient::recv_create_role()
 {
 
   int32_t rseqid = 0;
@@ -34562,49 +36802,40 @@ void ThriftHiveMetastoreClient::recv_get_partition_column_statistics(ColumnStati
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partition_column_statistics") != 0) {
+  if (fname.compare("create_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partition_column_statistics_presult result;
+  bool _return;
+  ThriftHiveMetastore_create_role_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partition_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_role failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_table_statistics_req(TableStatsResult& _return, const TableStatsRequest& request)
+bool ThriftHiveMetastoreClient::drop_role(const std::string& role_name)
 {
-  send_get_table_statistics_req(request);
-  recv_get_table_statistics_req(_return);
+  send_drop_role(role_name);
+  return recv_drop_role();
 }
 
-void ThriftHiveMetastoreClient::send_get_table_statistics_req(const TableStatsRequest& request)
+void ThriftHiveMetastoreClient::send_drop_role(const std::string& role_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_table_statistics_req_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_drop_role_pargs args;
+  args.role_name = &role_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34612,7 +36843,7 @@ void ThriftHiveMetastoreClient::send_get_table_statistics_req(const TableStatsRe
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_table_statistics_req(TableStatsResult& _return)
+bool ThriftHiveMetastoreClient::recv_drop_role()
 {
 
   int32_t rseqid = 0;
@@ -34632,43 +36863,39 @@ void ThriftHiveMetastoreClient::recv_get_table_statistics_req(TableStatsResult&
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_table_statistics_req") != 0) {
+  if (fname.compare("drop_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_table_statistics_req_presult result;
+  bool _return;
+  ThriftHiveMetastore_drop_role_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_table_statistics_req failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_role failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_partitions_statistics_req(PartitionsStatsResult& _return, const PartitionsStatsRequest& request)
+void ThriftHiveMetastoreClient::get_role_names(std::vector<std::string> & _return)
 {
-  send_get_partitions_statistics_req(request);
-  recv_get_partitions_statistics_req(_return);
+  send_get_role_names();
+  recv_get_role_names(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_partitions_statistics_req(const PartitionsStatsRequest& request)
+void ThriftHiveMetastoreClient::send_get_role_names()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_partitions_statistics_req_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_get_role_names_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34676,7 +36903,7 @@ void ThriftHiveMetastoreClient::send_get_partitions_statistics_req(const Partiti
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_partitions_statistics_req(PartitionsStatsResult& _return)
+void ThriftHiveMetastoreClient::recv_get_role_names(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -34696,12 +36923,12 @@ void ThriftHiveMetastoreClient::recv_get_partitions_statistics_req(PartitionsSta
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_partitions_statistics_req") != 0) {
+  if (fname.compare("get_role_names") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_partitions_statistics_req_presult result;
+  ThriftHiveMetastore_get_role_names_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -34714,25 +36941,27 @@ void ThriftHiveMetastoreClient::recv_get_partitions_statistics_req(PartitionsSta
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_partitions_statistics_req failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_role_names failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_aggr_stats_for(AggrStats& _return, const PartitionsStatsRequest& request)
+bool ThriftHiveMetastoreClient::grant_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type, const std::string& grantor, const PrincipalType::type grantorType, const bool grant_option)
 {
-  send_get_aggr_stats_for(request);
-  recv_get_aggr_stats_for(_return);
+  send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
+  return recv_grant_role();
 }
 
-void ThriftHiveMetastoreClient::send_get_aggr_stats_for(const PartitionsStatsRequest& request)
+void ThriftHiveMetastoreClient::send_grant_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type, const std::string& grantor, const PrincipalType::type grantorType, const bool grant_option)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_aggr_stats_for_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_grant_role_pargs args;
+  args.role_name = &role_name;
+  args.principal_name = &principal_name;
+  args.principal_type = &principal_type;
+  args.grantor = &grantor;
+  args.grantorType = &grantorType;
+  args.grant_option = &grant_option;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34740,7 +36969,7 @@ void ThriftHiveMetastoreClient::send_get_aggr_stats_for(const PartitionsStatsReq
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_aggr_stats_for(AggrStats& _return)
+bool ThriftHiveMetastoreClient::recv_grant_role()
 {
 
   int32_t rseqid = 0;
@@ -34760,43 +36989,42 @@ void ThriftHiveMetastoreClient::recv_get_aggr_stats_for(AggrStats& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_aggr_stats_for") != 0) {
+  if (fname.compare("grant_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_aggr_stats_for_presult result;
+  bool _return;
+  ThriftHiveMetastore_grant_role_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_aggr_stats_for failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_role failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::set_aggr_stats_for(const SetPartitionsStatsRequest& request)
+bool ThriftHiveMetastoreClient::revoke_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type)
 {
-  send_set_aggr_stats_for(request);
-  return recv_set_aggr_stats_for();
+  send_revoke_role(role_name, principal_name, principal_type);
+  return recv_revoke_role();
 }
 
-void ThriftHiveMetastoreClient::send_set_aggr_stats_for(const SetPartitionsStatsRequest& request)
+void ThriftHiveMetastoreClient::send_revoke_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_set_aggr_stats_for_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_revoke_role_pargs args;
+  args.role_name = &role_name;
+  args.principal_name = &principal_name;
+  args.principal_type = &principal_type;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34804,7 +37032,7 @@ void ThriftHiveMetastoreClient::send_set_aggr_stats_for(const SetPartitionsStats
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_set_aggr_stats_for()
+bool ThriftHiveMetastoreClient::recv_revoke_role()
 {
 
   int32_t rseqid = 0;
@@ -34824,13 +37052,13 @@ bool ThriftHiveMetastoreClient::recv_set_aggr_stats_for()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("set_aggr_stats_for") != 0) {
+  if (fname.compare("revoke_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
   bool _return;
-  ThriftHiveMetastore_set_aggr_stats_for_presult result;
+  ThriftHiveMetastore_revoke_role_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -34842,34 +37070,23 @@ bool ThriftHiveMetastoreClient::recv_set_aggr_stats_for()
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_aggr_stats_for failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "revoke_role failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::delete_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::list_roles(std::vector<Role> & _return, const std::string& principal_name, const PrincipalType::type principal_type)
 {
-  send_delete_partition_column_statistics(db_name, tbl_name, part_name, col_name);
-  return recv_delete_partition_column_statistics();
+  send_list_roles(principal_name, principal_type);
+  recv_list_roles(_return);
 }
 
-void ThriftHiveMetastoreClient::send_delete_partition_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& part_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::send_list_roles(const std::string& principal_name, const PrincipalType::type principal_type)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_delete_partition_column_statistics_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.part_name = &part_name;
-  args.col_name = &col_name;
+  ThriftHiveMetastore_list_roles_pargs args;
+  args.principal_name = &principal_name;
+  args.principal_type = &principal_type;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34877,7 +37094,7 @@ void ThriftHiveMetastoreClient::send_delete_partition_column_statistics(const st
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_delete_partition_column_statistics()
+void ThriftHiveMetastoreClient::recv_list_roles(std::vector<Role> & _return)
 {
 
   int32_t rseqid = 0;
@@ -34897,51 +37114,40 @@ bool ThriftHiveMetastoreClient::recv_delete_partition_column_statistics()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("delete_partition_column_statistics") != 0) {
+  if (fname.compare("list_roles") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_delete_partition_column_statistics_presult result;
+  ThriftHiveMetastore_list_roles_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "delete_partition_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "list_roles failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::delete_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::grant_revoke_role(GrantRevokeRoleResponse& _return, const GrantRevokeRoleRequest& request)
 {
-  send_delete_table_column_statistics(db_name, tbl_name, col_name);
-  return recv_delete_table_column_statistics();
+  send_grant_revoke_role(request);
+  recv_grant_revoke_role(_return);
 }
 
-void ThriftHiveMetastoreClient::send_delete_table_column_statistics(const std::string& db_name, const std::string& tbl_name, const std::string& col_name)
+void ThriftHiveMetastoreClient::send_grant_revoke_role(const GrantRevokeRoleRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_delete_table_column_statistics_pargs args;
-  args.db_name = &db_name;
-  args.tbl_name = &tbl_name;
-  args.col_name = &col_name;
+  ThriftHiveMetastore_grant_revoke_role_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -34949,7 +37155,7 @@ void ThriftHiveMetastoreClient::send_delete_table_column_statistics(const std::s
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_delete_table_column_statistics()
+void ThriftHiveMetastoreClient::recv_grant_revoke_role(GrantRevokeRoleResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -34969,49 +37175,40 @@ bool ThriftHiveMetastoreClient::recv_delete_table_column_statistics()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("delete_table_column_statistics") != 0) {
+  if (fname.compare("grant_revoke_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_delete_table_column_statistics_presult result;
+  ThriftHiveMetastore_grant_revoke_role_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "delete_table_column_statistics failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_revoke_role failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::create_function(const Function& func)
+void ThriftHiveMetastoreClient::get_principals_in_role(GetPrincipalsInRoleResponse& _return, const GetPrincipalsInRoleRequest& request)
 {
-  send_create_function(func);
-  recv_create_function();
+  send_get_principals_in_role(request);
+  recv_get_principals_in_role(_return);
 }
 
-void ThriftHiveMetastoreClient::send_create_function(const Function& func)
+void ThriftHiveMetastoreClient::send_get_principals_in_role(const GetPrincipalsInRoleRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_function", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_create_function_pargs args;
-  args.func = &func;
+  ThriftHiveMetastore_get_principals_in_role_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35019,7 +37216,7 @@ void ThriftHiveMetastoreClient::send_create_function(const Function& func)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_create_function()
+void ThriftHiveMetastoreClient::recv_get_principals_in_role(GetPrincipalsInRoleResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -35039,45 +37236,40 @@ void ThriftHiveMetastoreClient::recv_create_function()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_function") != 0) {
+  if (fname.compare("get_principals_in_role") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_create_function_presult result;
+  ThriftHiveMetastore_get_principals_in_role_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  if (result.__isset.o4) {
-    throw result.o4;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_principals_in_role failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::drop_function(const std::string& dbName, const std::string& funcName)
+void ThriftHiveMetastoreClient::get_role_grants_for_principal(GetRoleGrantsForPrincipalResponse& _return, const GetRoleGrantsForPrincipalRequest& request)
 {
-  send_drop_function(dbName, funcName);
-  recv_drop_function();
+  send_get_role_grants_for_principal(request);
+  recv_get_role_grants_for_principal(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_function(const std::string& dbName, const std::string& funcName)
+void ThriftHiveMetastoreClient::send_get_role_grants_for_principal(const GetRoleGrantsForPrincipalRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_function_pargs args;
-  args.dbName = &dbName;
-  args.funcName = &funcName;
+  ThriftHiveMetastore_get_role_grants_for_principal_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35085,7 +37277,7 @@ void ThriftHiveMetastoreClient::send_drop_function(const std::string& dbName, co
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_drop_function()
+void ThriftHiveMetastoreClient::recv_get_role_grants_for_principal(GetRoleGrantsForPrincipalResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -35105,40 +37297,42 @@ void ThriftHiveMetastoreClient::recv_drop_function()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_function") != 0) {
+  if (fname.compare("get_role_grants_for_principal") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_drop_function_presult result;
+  ThriftHiveMetastore_get_role_grants_for_principal_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_role_grants_for_principal failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::alter_function(const std::string& dbName, const std::string& funcName, const Function& newFunc)
+void ThriftHiveMetastoreClient::get_privilege_set(PrincipalPrivilegeSet& _return, const HiveObjectRef& hiveObject, const std::string& user_name, const std::vector<std::string> & group_names)
 {
-  send_alter_function(dbName, funcName, newFunc);
-  recv_alter_function();
+  send_get_privilege_set(hiveObject, user_name, group_names);
+  recv_get_privilege_set(_return);
 }
 
-void ThriftHiveMetastoreClient::send_alter_function(const std::string& dbName, const std::string& funcName, const Function& newFunc)
+void ThriftHiveMetastoreClient::send_get_privilege_set(const HiveObjectRef& hiveObject, const std::string& user_name, const std::vector<std::string> & group_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_alter_function_pargs args;
-  args.dbName = &dbName;
-  args.funcName = &funcName;
-  args.newFunc = &newFunc;
+  ThriftHiveMetastore_get_privilege_set_pargs args;
+  args.hiveObject = &hiveObject;
+  args.user_name = &user_name;
+  args.group_names = &group_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35146,7 +37340,7 @@ void ThriftHiveMetastoreClient::send_alter_function(const std::string& dbName, c
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_alter_function()
+void ThriftHiveMetastoreClient::recv_get_privilege_set(PrincipalPrivilegeSet& _return)
 {
 
   int32_t rseqid = 0;
@@ -35166,39 +37360,42 @@ void ThriftHiveMetastoreClient::recv_alter_function()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("alter_function") != 0) {
+  if (fname.compare("get_privilege_set") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_alter_function_presult result;
+  ThriftHiveMetastore_get_privilege_set_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_privilege_set failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_functions(std::vector<std::string> & _return, const std::string& dbName, const std::string& pattern)
+void ThriftHiveMetastoreClient::list_privileges(std::vector<HiveObjectPrivilege> & _return, const std::string& principal_name, const PrincipalType::type principal_type, const HiveObjectRef& hiveObject)
 {
-  send_get_functions(dbName, pattern);
-  recv_get_functions(_return);
+  send_list_privileges(principal_name, principal_type, hiveObject);
+  recv_list_privileges(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_functions(const std::string& dbName, const std::string& pattern)
+void ThriftHiveMetastoreClient::send_list_privileges(const std::string& principal_name, const PrincipalType::type principal_type, const HiveObjectRef& hiveObject)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_functions_pargs args;
-  args.dbName = &dbName;
-  args.pattern = &pattern;
+  ThriftHiveMetastore_list_privileges_pargs args;
+  args.principal_name = &principal_name;
+  args.principal_type = &principal_type;
+  args.hiveObject = &hiveObject;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35206,7 +37403,7 @@ void ThriftHiveMetastoreClient::send_get_functions(const std::string& dbName, co
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_functions(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_list_privileges(std::vector<HiveObjectPrivilege> & _return)
 {
 
   int32_t rseqid = 0;
@@ -35226,12 +37423,12 @@ void ThriftHiveMetastoreClient::recv_get_functions(std::vector<std::string> & _r
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_functions") != 0) {
+  if (fname.compare("list_privileges") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_functions_presult result;
+  ThriftHiveMetastore_list_privileges_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -35244,23 +37441,22 @@ void ThriftHiveMetastoreClient::recv_get_functions(std::vector<std::string> & _r
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_functions failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "list_privileges failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_function(Function& _return, const std::string& dbName, const std::string& funcName)
+bool ThriftHiveMetastoreClient::grant_privileges(const PrivilegeBag& privileges)
 {
-  send_get_function(dbName, funcName);
-  recv_get_function(_return);
+  send_grant_privileges(privileges);
+  return recv_grant_privileges();
 }
 
-void ThriftHiveMetastoreClient::send_get_function(const std::string& dbName, const std::string& funcName)
+void ThriftHiveMetastoreClient::send_grant_privileges(const PrivilegeBag& privileges)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_function", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_function_pargs args;
-  args.dbName = &dbName;
-  args.funcName = &funcName;
+  ThriftHiveMetastore_grant_privileges_pargs args;
+  args.privileges = &privileges;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35268,7 +37464,7 @@ void ThriftHiveMetastoreClient::send_get_function(const std::string& dbName, con
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_function(Function& _return)
+bool ThriftHiveMetastoreClient::recv_grant_privileges()
 {
 
   int32_t rseqid = 0;
@@ -35288,42 +37484,40 @@ void ThriftHiveMetastoreClient::recv_get_function(Function& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_function") != 0) {
+  if (fname.compare("grant_privileges") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_function_presult result;
+  bool _return;
+  ThriftHiveMetastore_grant_privileges_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_function failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_privileges failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_all_functions(GetAllFunctionsResponse& _return)
+bool ThriftHiveMetastoreClient::revoke_privileges(const PrivilegeBag& privileges)
 {
-  send_get_all_functions();
-  recv_get_all_functions(_return);
+  send_revoke_privileges(privileges);
+  return recv_revoke_privileges();
 }
 
-void ThriftHiveMetastoreClient::send_get_all_functions()
+void ThriftHiveMetastoreClient::send_revoke_privileges(const PrivilegeBag& privileges)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_all_functions_pargs args;
+  ThriftHiveMetastore_revoke_privileges_pargs args;
+  args.privileges = &privileges;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35331,7 +37525,7 @@ void ThriftHiveMetastoreClient::send_get_all_functions()
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_all_functions(GetAllFunctionsResponse& _return)
+bool ThriftHiveMetastoreClient::recv_revoke_privileges()
 {
 
   int32_t rseqid = 0;
@@ -35351,40 +37545,40 @@ void ThriftHiveMetastoreClient::recv_get_all_functions(GetAllFunctionsResponse&
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_all_functions") != 0) {
+  if (fname.compare("revoke_privileges") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_all_functions_presult result;
+  bool _return;
+  ThriftHiveMetastore_revoke_privileges_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_functions failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "revoke_privileges failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::create_role(const Role& role)
+void ThriftHiveMetastoreClient::grant_revoke_privileges(GrantRevokePrivilegeResponse& _return, const GrantRevokePrivilegeRequest& request)
 {
-  send_create_role(role);
-  return recv_create_role();
+  send_grant_revoke_privileges(request);
+  recv_grant_revoke_privileges(_return);
 }
 
-void ThriftHiveMetastoreClient::send_create_role(const Role& role)
+void ThriftHiveMetastoreClient::send_grant_revoke_privileges(const GrantRevokePrivilegeRequest& request)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("create_role", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_create_role_pargs args;
-  args.role = &role;
+  ThriftHiveMetastore_grant_revoke_privileges_pargs args;
+  args.request = &request;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35392,7 +37586,7 @@ void ThriftHiveMetastoreClient::send_create_role(const Role& role)
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_create_role()
+void ThriftHiveMetastoreClient::recv_grant_revoke_privileges(GrantRevokePrivilegeResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -35412,40 +37606,41 @@ bool ThriftHiveMetastoreClient::recv_create_role()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("create_role") != 0) {
+  if (fname.compare("grant_revoke_privileges") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_create_role_presult result;
+  ThriftHiveMetastore_grant_revoke_privileges_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "create_role failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_revoke_privileges failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::drop_role(const std::string& role_name)
+void ThriftHiveMetastoreClient::set_ugi(std::vector<std::string> & _return, const std::string& user_name, const std::vector<std::string> & group_names)
 {
-  send_drop_role(role_name);
-  return recv_drop_role();
+  send_set_ugi(user_name, group_names);
+  recv_set_ugi(_return);
 }
 
-void ThriftHiveMetastoreClient::send_drop_role(const std::string& role_name)
+void ThriftHiveMetastoreClient::send_set_ugi(const std::string& user_name, const std::vector<std::string> & group_names)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_drop_role_pargs args;
-  args.role_name = &role_name;
+  ThriftHiveMetastore_set_ugi_pargs args;
+  args.user_name = &user_name;
+  args.group_names = &group_names;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35453,7 +37648,7 @@ void ThriftHiveMetastoreClient::send_drop_role(const std::string& role_name)
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_drop_role()
+void ThriftHiveMetastoreClient::recv_set_ugi(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -35473,39 +37668,41 @@ bool ThriftHiveMetastoreClient::recv_drop_role()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("drop_role") != 0) {
+  if (fname.compare("set_ugi") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_drop_role_presult result;
+  ThriftHiveMetastore_set_ugi_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
+    // _return pointer has now been filled
+    return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_role failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_ugi failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_role_names(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::get_delegation_token(std::string& _return, const std::string& token_owner, const std::string& renewer_kerberos_principal_name)
 {
-  send_get_role_names();
-  recv_get_role_names(_return);
+  send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
+  recv_get_delegation_token(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_role_names()
+void ThriftHiveMetastoreClient::send_get_delegation_token(const std::string& token_owner, const std::string& renewer_kerberos_principal_name)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_role_names_pargs args;
+  ThriftHiveMetastore_get_delegation_token_pargs args;
+  args.token_owner = &token_owner;
+  args.renewer_kerberos_principal_name = &renewer_kerberos_principal_name;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35513,7 +37710,7 @@ void ThriftHiveMetastoreClient::send_get_role_names()
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_role_names(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_get_delegation_token(std::string& _return)
 {
 
   int32_t rseqid = 0;
@@ -35533,12 +37730,12 @@ void ThriftHiveMetastoreClient::recv_get_role_names(std::vector<std::string> & _
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_role_names") != 0) {
+  if (fname.compare("get_delegation_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_role_names_presult result;
+  ThriftHiveMetastore_get_delegation_token_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -35551,27 +37748,22 @@ void ThriftHiveMetastoreClient::recv_get_role_names(std::vector<std::string> & _
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_role_names failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_delegation_token failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::grant_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type, const std::string& grantor, const PrincipalType::type grantorType, const bool grant_option)
+int64_t ThriftHiveMetastoreClient::renew_delegation_token(const std::string& token_str_form)
 {
-  send_grant_role(role_name, principal_name, principal_type, grantor, grantorType, grant_option);
-  return recv_grant_role();
+  send_renew_delegation_token(token_str_form);
+  return recv_renew_delegation_token();
 }
 
-void ThriftHiveMetastoreClient::send_grant_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type, const std::string& grantor, const PrincipalType::type grantorType, const bool grant_option)
+void ThriftHiveMetastoreClient::send_renew_delegation_token(const std::string& token_str_form)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_grant_role_pargs args;
-  args.role_name = &role_name;
-  args.principal_name = &principal_name;
-  args.principal_type = &principal_type;
-  args.grantor = &grantor;
-  args.grantorType = &grantorType;
-  args.grant_option = &grant_option;
+  ThriftHiveMetastore_renew_delegation_token_pargs args;
+  args.token_str_form = &token_str_form;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35579,7 +37771,7 @@ void ThriftHiveMetastoreClient::send_grant_role(const std::string& role_name, co
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_grant_role()
+int64_t ThriftHiveMetastoreClient::recv_renew_delegation_token()
 {
 
   int32_t rseqid = 0;
@@ -35599,13 +37791,13 @@ bool ThriftHiveMetastoreClient::recv_grant_role()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("grant_role") != 0) {
+  if (fname.compare("renew_delegation_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_grant_role_presult result;
+  int64_t _return;
+  ThriftHiveMetastore_renew_delegation_token_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -35617,24 +37809,22 @@ bool ThriftHiveMetastoreClient::recv_grant_role()
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_role failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "renew_delegation_token failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::revoke_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type)
+void ThriftHiveMetastoreClient::cancel_delegation_token(const std::string& token_str_form)
 {
-  send_revoke_role(role_name, principal_name, principal_type);
-  return recv_revoke_role();
+  send_cancel_delegation_token(token_str_form);
+  recv_cancel_delegation_token();
 }
 
-void ThriftHiveMetastoreClient::send_revoke_role(const std::string& role_name, const std::string& principal_name, const PrincipalType::type principal_type)
+void ThriftHiveMetastoreClient::send_cancel_delegation_token(const std::string& token_str_form)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_CALL, cseqid);
-
-  ThriftHiveMetastore_revoke_role_pargs args;
-  args.role_name = &role_name;
-  args.principal_name = &principal_name;
-  args.principal_type = &principal_type;
+  oprot_->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
+
+  ThriftHiveMetastore_cancel_delegation_token_pargs args;
+  args.token_str_form = &token_str_form;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35642,7 +37832,7 @@ void ThriftHiveMetastoreClient::send_revoke_role(const std::string& role_name, c
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_revoke_role()
+void ThriftHiveMetastoreClient::recv_cancel_delegation_token()
 {
 
   int32_t rseqid = 0;
@@ -35662,41 +37852,36 @@ bool ThriftHiveMetastoreClient::recv_revoke_role()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("revoke_role") != 0) {
+  if (fname.compare("cancel_delegation_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_revoke_role_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_cancel_delegation_token_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    return _return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "revoke_role failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::list_roles(std::vector<Role> & _return, const std::string& principal_name, const PrincipalType::type principal_type)
+bool ThriftHiveMetastoreClient::add_token(const std::string& token_identifier, const std::string& delegation_token)
 {
-  send_list_roles(principal_name, principal_type);
-  recv_list_roles(_return);
+  send_add_token(token_identifier, delegation_token);
+  return recv_add_token();
 }
 
-void ThriftHiveMetastoreClient::send_list_roles(const std::string& principal_name, const PrincipalType::type principal_type)
+void ThriftHiveMetastoreClient::send_add_token(const std::string& token_identifier, const std::string& delegation_token)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_token", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_list_roles_pargs args;
-  args.principal_name = &principal_name;
-  args.principal_type = &principal_type;
+  ThriftHiveMetastore_add_token_pargs args;
+  args.token_identifier = &token_identifier;
+  args.delegation_token = &delegation_token;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35704,7 +37889,7 @@ void ThriftHiveMetastoreClient::send_list_roles(const std::string& principal_nam
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_list_roles(std::vector<Role> & _return)
+bool ThriftHiveMetastoreClient::recv_add_token()
 {
 
   int32_t rseqid = 0;
@@ -35724,40 +37909,37 @@ void ThriftHiveMetastoreClient::recv_list_roles(std::vector<Role> & _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("list_roles") != 0) {
+  if (fname.compare("add_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_list_roles_presult result;
+  bool _return;
+  ThriftHiveMetastore_add_token_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
+    return _return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "list_roles failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_token failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::grant_revoke_role(GrantRevokeRoleResponse& _return, const GrantRevokeRoleRequest& request)
+bool ThriftHiveMetastoreClient::remove_token(const std::string& token_identifier)
 {
-  send_grant_revoke_role(request);
-  recv_grant_revoke_role(_return);
+  send_remove_token(token_identifier);
+  return recv_remove_token();
 }
 
-void ThriftHiveMetastoreClient::send_grant_revoke_role(const GrantRevokeRoleRequest& request)
+void ThriftHiveMetastoreClient::send_remove_token(const std::string& token_identifier)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("remove_token", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_grant_revoke_role_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_remove_token_pargs args;
+  args.token_identifier = &token_identifier;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35765,7 +37947,7 @@ void ThriftHiveMetastoreClient::send_grant_revoke_role(const GrantRevokeRoleRequ
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_grant_revoke_role(GrantRevokeRoleResponse& _return)
+bool ThriftHiveMetastoreClient::recv_remove_token()
 {
 
   int32_t rseqid = 0;
@@ -35785,40 +37967,37 @@ void ThriftHiveMetastoreClient::recv_grant_revoke_role(GrantRevokeRoleResponse&
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("grant_revoke_role") != 0) {
+  if (fname.compare("remove_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_grant_revoke_role_presult result;
+  bool _return;
+  ThriftHiveMetastore_remove_token_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
+    return _return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_revoke_role failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "remove_token failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_principals_in_role(GetPrincipalsInRoleResponse& _return, const GetPrincipalsInRoleRequest& request)
+void ThriftHiveMetastoreClient::get_token(std::string& _return, const std::string& token_identifier)
 {
-  send_get_principals_in_role(request);
-  recv_get_principals_in_role(_return);
+  send_get_token(token_identifier);
+  recv_get_token(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_principals_in_role(const GetPrincipalsInRoleRequest& request)
+void ThriftHiveMetastoreClient::send_get_token(const std::string& token_identifier)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_token", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_principals_in_role_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_get_token_pargs args;
+  args.token_identifier = &token_identifier;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35826,7 +38005,7 @@ void ThriftHiveMetastoreClient::send_get_principals_in_role(const GetPrincipalsI
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_principals_in_role(GetPrincipalsInRoleResponse& _return)
+void ThriftHiveMetastoreClient::recv_get_token(std::string& _return)
 {
 
   int32_t rseqid = 0;
@@ -35846,12 +38025,12 @@ void ThriftHiveMetastoreClient::recv_get_principals_in_role(GetPrincipalsInRoleR
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_principals_in_role") != 0) {
+  if (fname.compare("get_token") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_principals_in_role_presult result;
+  ThriftHiveMetastore_get_token_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -35861,25 +38040,21 @@ void ThriftHiveMetastoreClient::recv_get_principals_in_role(GetPrincipalsInRoleR
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_principals_in_role failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_token failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_role_grants_for_principal(GetRoleGrantsForPrincipalResponse& _return, const GetRoleGrantsForPrincipalRequest& request)
+void ThriftHiveMetastoreClient::get_all_token_identifiers(std::vector<std::string> & _return)
 {
-  send_get_role_grants_for_principal(request);
-  recv_get_role_grants_for_principal(_return);
+  send_get_all_token_identifiers();
+  recv_get_all_token_identifiers(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_role_grants_for_principal(const GetRoleGrantsForPrincipalRequest& request)
+void ThriftHiveMetastoreClient::send_get_all_token_identifiers()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_all_token_identifiers", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_role_grants_for_principal_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_get_all_token_identifiers_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35887,7 +38062,7 @@ void ThriftHiveMetastoreClient::send_get_role_grants_for_principal(const GetRole
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_role_grants_for_principal(GetRoleGrantsForPrincipalResponse& _return)
+void ThriftHiveMetastoreClient::recv_get_all_token_identifiers(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -35907,12 +38082,12 @@ void ThriftHiveMetastoreClient::recv_get_role_grants_for_principal(GetRoleGrants
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_role_grants_for_principal") != 0) {
+  if (fname.compare("get_all_token_identifiers") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_role_grants_for_principal_presult result;
+  ThriftHiveMetastore_get_all_token_identifiers_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -35922,27 +38097,22 @@ void ThriftHiveMetastoreClient::recv_get_role_grants_for_principal(GetRoleGrants
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_role_grants_for_principal failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_all_token_identifiers failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_privilege_set(PrincipalPrivilegeSet& _return, const HiveObjectRef& hiveObject, const std::string& user_name, const std::vector<std::string> & group_names)
+int32_t ThriftHiveMetastoreClient::add_master_key(const std::string& key)
 {
-  send_get_privilege_set(hiveObject, user_name, group_names);
-  recv_get_privilege_set(_return);
+  send_add_master_key(key);
+  return recv_add_master_key();
 }
 
-void ThriftHiveMetastoreClient::send_get_privilege_set(const HiveObjectRef& hiveObject, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::send_add_master_key(const std::string& key)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("add_master_key", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_privilege_set_pargs args;
-  args.hiveObject = &hiveObject;
-  args.user_name = &user_name;
-  args.group_names = &group_names;
+  ThriftHiveMetastore_add_master_key_pargs args;
+  args.key = &key;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -35950,7 +38120,7 @@ void ThriftHiveMetastoreClient::send_get_privilege_set(const HiveObjectRef& hive
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_privilege_set(PrincipalPrivilegeSet& _return)
+int32_t ThriftHiveMetastoreClient::recv_add_master_key()
 {
 
   int32_t rseqid = 0;
@@ -35970,42 +38140,41 @@ void ThriftHiveMetastoreClient::recv_get_privilege_set(PrincipalPrivilegeSet& _r
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_privilege_set") != 0) {
+  if (fname.compare("add_master_key") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_privilege_set_presult result;
+  int32_t _return;
+  ThriftHiveMetastore_add_master_key_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+    return _return;
   }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_privilege_set failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_master_key failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::list_privileges(std::vector<HiveObjectPrivilege> & _return, const std::string& principal_name, const PrincipalType::type principal_type, const HiveObjectRef& hiveObject)
+void ThriftHiveMetastoreClient::update_master_key(const int32_t seq_number, const std::string& key)
 {
-  send_list_privileges(principal_name, principal_type, hiveObject);
-  recv_list_privileges(_return);
+  send_update_master_key(seq_number, key);
+  recv_update_master_key();
 }
 
-void ThriftHiveMetastoreClient::send_list_privileges(const std::string& principal_name, const PrincipalType::type principal_type, const HiveObjectRef& hiveObject)
+void ThriftHiveMetastoreClient::send_update_master_key(const int32_t seq_number, const std::string& key)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("update_master_key", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_list_privileges_pargs args;
-  args.principal_name = &principal_name;
-  args.principal_type = &principal_type;
-  args.hiveObject = &hiveObject;
+  ThriftHiveMetastore_update_master_key_pargs args;
+  args.seq_number = &seq_number;
+  args.key = &key;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36013,7 +38182,7 @@ void ThriftHiveMetastoreClient::send_list_privileges(const std::string& principa
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_list_privileges(std::vector<HiveObjectPrivilege> & _return)
+void ThriftHiveMetastoreClient::recv_update_master_key()
 {
 
   int32_t rseqid = 0;
@@ -36033,40 +38202,38 @@ void ThriftHiveMetastoreClient::recv_list_privileges(std::vector<HiveObjectPrivi
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("list_privileges") != 0) {
+  if (fname.compare("update_master_key") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_list_privileges_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_update_master_key_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "list_privileges failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  return;
 }
 
-bool ThriftHiveMetastoreClient::grant_privileges(const PrivilegeBag& privileges)
+bool ThriftHiveMetastoreClient::remove_master_key(const int32_t key_seq)
 {
-  send_grant_privileges(privileges);
-  return recv_grant_privileges();
+  send_remove_master_key(key_seq);
+  return recv_remove_master_key();
 }
 
-void ThriftHiveMetastoreClient::send_grant_privileges(const PrivilegeBag& privileges)
+void ThriftHiveMetastoreClient::send_remove_master_key(const int32_t key_seq)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("remove_master_key", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_grant_privileges_pargs args;
-  args.privileges = &privileges;
+  ThriftHiveMetastore_remove_master_key_pargs args;
+  args.key_seq = &key_seq;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36074,7 +38241,7 @@ void ThriftHiveMetastoreClient::send_grant_privileges(const PrivilegeBag& privil
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_grant_privileges()
+bool ThriftHiveMetastoreClient::recv_remove_master_key()
 {
 
   int32_t rseqid = 0;
@@ -36094,13 +38261,13 @@ bool ThriftHiveMetastoreClient::recv_grant_privileges()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("grant_privileges") != 0) {
+  if (fname.compare("remove_master_key") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
   bool _return;
-  ThriftHiveMetastore_grant_privileges_presult result;
+  ThriftHiveMetastore_remove_master_key_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36109,25 +38276,21 @@ bool ThriftHiveMetastoreClient::recv_grant_privileges()
   if (result.__isset.success) {
     return _return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_privileges failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "remove_master_key failed: unknown result");
 }
 
-bool ThriftHiveMetastoreClient::revoke_privileges(const PrivilegeBag& privileges)
+void ThriftHiveMetastoreClient::get_master_keys(std::vector<std::string> & _return)
 {
-  send_revoke_privileges(privileges);
-  return recv_revoke_privileges();
+  send_get_master_keys();
+  recv_get_master_keys(_return);
 }
 
-void ThriftHiveMetastoreClient::send_revoke_privileges(const PrivilegeBag& privileges)
+void ThriftHiveMetastoreClient::send_get_master_keys()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_master_keys", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_revoke_privileges_pargs args;
-  args.privileges = &privileges;
+  ThriftHiveMetastore_get_master_keys_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36135,7 +38298,7 @@ void ThriftHiveMetastoreClient::send_revoke_privileges(const PrivilegeBag& privi
   oprot_->getTransport()->flush();
 }
 
-bool ThriftHiveMetastoreClient::recv_revoke_privileges()
+void ThriftHiveMetastoreClient::recv_get_master_keys(std::vector<std::string> & _return)
 {
 
   int32_t rseqid = 0;
@@ -36155,40 +38318,36 @@ bool ThriftHiveMetastoreClient::recv_revoke_privileges()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("revoke_privileges") != 0) {
+  if (fname.compare("get_master_keys") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  bool _return;
-  ThriftHiveMetastore_revoke_privileges_presult result;
+  ThriftHiveMetastore_get_master_keys_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
   if (result.__isset.success) {
-    return _return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
+    // _return pointer has now been filled
+    return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "revoke_privileges failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_master_keys failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::grant_revoke_privileges(GrantRevokePrivilegeResponse& _return, const GrantRevokePrivilegeRequest& request)
+void ThriftHiveMetastoreClient::get_open_txns(GetOpenTxnsResponse& _return)
 {
-  send_grant_revoke_privileges(request);
-  recv_grant_revoke_privileges(_return);
+  send_get_open_txns();
+  recv_get_open_txns(_return);
 }
 
-void ThriftHiveMetastoreClient::send_grant_revoke_privileges(const GrantRevokePrivilegeRequest& request)
+void ThriftHiveMetastoreClient::send_get_open_txns()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_open_txns", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_grant_revoke_privileges_pargs args;
-  args.request = &request;
+  ThriftHiveMetastore_get_open_txns_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36196,7 +38355,7 @@ void ThriftHiveMetastoreClient::send_grant_revoke_privileges(const GrantRevokePr
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_grant_revoke_privileges(GrantRevokePrivilegeResponse& _return)
+void ThriftHiveMetastoreClient::recv_get_open_txns(GetOpenTxnsResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36216,12 +38375,12 @@ void ThriftHiveMetastoreClient::recv_grant_revoke_privileges(GrantRevokePrivileg
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("grant_revoke_privileges") != 0) {
+  if (fname.compare("get_open_txns") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_grant_revoke_privileges_presult result;
+  ThriftHiveMetastore_get_open_txns_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36231,26 +38390,21 @@ void ThriftHiveMetastoreClient::recv_grant_revoke_privileges(GrantRevokePrivileg
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "grant_revoke_privileges failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_open_txns failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::set_ugi(std::vector<std::string> & _return, const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::get_open_txns_info(GetOpenTxnsInfoResponse& _return)
 {
-  send_set_ugi(user_name, group_names);
-  recv_set_ugi(_return);
+  send_get_open_txns_info();
+  recv_get_open_txns_info(_return);
 }
 
-void ThriftHiveMetastoreClient::send_set_ugi(const std::string& user_name, const std::vector<std::string> & group_names)
+void ThriftHiveMetastoreClient::send_get_open_txns_info()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_open_txns_info", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_set_ugi_pargs args;
-  args.user_name = &user_name;
-  args.group_names = &group_names;
+  ThriftHiveMetastore_get_open_txns_info_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36258,7 +38412,7 @@ void ThriftHiveMetastoreClient::send_set_ugi(const std::string& user_name, const
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_set_ugi(std::vector<std::string> & _return)
+void ThriftHiveMetastoreClient::recv_get_open_txns_info(GetOpenTxnsInfoResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36278,12 +38432,12 @@ void ThriftHiveMetastoreClient::recv_set_ugi(std::vector<std::string> & _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("set_ugi") != 0) {
+  if (fname.compare("get_open_txns_info") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_set_ugi_presult result;
+  ThriftHiveMetastore_get_open_txns_info_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36293,26 +38447,22 @@ void ThriftHiveMetastoreClient::recv_set_ugi(std::vector<std::string> & _return)
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_ugi failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_open_txns_info failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_delegation_token(std::string& _return, const std::string& token_owner, const std::string& renewer_kerberos_principal_name)
+void ThriftHiveMetastoreClient::open_txns(OpenTxnsResponse& _return, const OpenTxnRequest& rqst)
 {
-  send_get_delegation_token(token_owner, renewer_kerberos_principal_name);
-  recv_get_delegation_token(_return);
+  send_open_txns(rqst);
+  recv_open_txns(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_delegation_token(const std::string& token_owner, const std::string& renewer_kerberos_principal_name)
+void ThriftHiveMetastoreClient::send_open_txns(const OpenTxnRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("open_txns", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_delegation_token_pargs args;
-  args.token_owner = &token_owner;
-  args.renewer_kerberos_principal_name = &renewer_kerberos_principal_name;
+  ThriftHiveMetastore_open_txns_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36320,7 +38470,7 @@ void ThriftHiveMetastoreClient::send_get_delegation_token(const std::string& tok
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_delegation_token(std::string& _return)
+void ThriftHiveMetastoreClient::recv_open_txns(OpenTxnsResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36340,12 +38490,12 @@ void ThriftHiveMetastoreClient::recv_get_delegation_token(std::string& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_delegation_token") != 0) {
+  if (fname.compare("open_txns") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_delegation_token_presult result;
+  ThriftHiveMetastore_open_txns_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36355,25 +38505,22 @@ void ThriftHiveMetastoreClient::recv_get_delegation_token(std::string& _return)
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_delegation_token failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "open_txns failed: unknown result");
 }
 
-int64_t ThriftHiveMetastoreClient::renew_delegation_token(const std::string& token_str_form)
+void ThriftHiveMetastoreClient::abort_txn(const AbortTxnRequest& rqst)
 {
-  send_renew_delegation_token(token_str_form);
-  return recv_renew_delegation_token();
+  send_abort_txn(rqst);
+  recv_abort_txn();
 }
 
-void ThriftHiveMetastoreClient::send_renew_delegation_token(const std::string& token_str_form)
+void ThriftHiveMetastoreClient::send_abort_txn(const AbortTxnRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("abort_txn", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_renew_delegation_token_pargs args;
-  args.token_str_form = &token_str_form;
+  ThriftHiveMetastore_abort_txn_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36381,7 +38528,7 @@ void ThriftHiveMetastoreClient::send_renew_delegation_token(const std::string& t
   oprot_->getTransport()->flush();
 }
 
-int64_t ThriftHiveMetastoreClient::recv_renew_delegation_token()
+void ThriftHiveMetastoreClient::recv_abort_txn()
 {
 
   int32_t rseqid = 0;
@@ -36401,40 +38548,35 @@ int64_t ThriftHiveMetastoreClient::recv_renew_delegation_token()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("renew_delegation_token") != 0) {
+  if (fname.compare("abort_txn") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  int64_t _return;
-  ThriftHiveMetastore_renew_delegation_token_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_abort_txn_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    return _return;
-  }
   if (result.__isset.o1) {
     throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "renew_delegation_token failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::cancel_delegation_token(const std::string& token_str_form)
+void ThriftHiveMetastoreClient::commit_txn(const CommitTxnRequest& rqst)
 {
-  send_cancel_delegation_token(token_str_form);
-  recv_cancel_delegation_token();
+  send_commit_txn(rqst);
+  recv_commit_txn();
 }
 
-void ThriftHiveMetastoreClient::send_cancel_delegation_token(const std::string& token_str_form)
+void ThriftHiveMetastoreClient::send_commit_txn(const CommitTxnRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("commit_txn", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_cancel_delegation_token_pargs args;
-  args.token_str_form = &token_str_form;
+  ThriftHiveMetastore_commit_txn_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36442,7 +38584,7 @@ void ThriftHiveMetastoreClient::send_cancel_delegation_token(const std::string&
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_cancel_delegation_token()
+void ThriftHiveMetastoreClient::recv_commit_txn()
 {
 
   int32_t rseqid = 0;
@@ -36462,12 +38604,12 @@ void ThriftHiveMetastoreClient::recv_cancel_delegation_token()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("cancel_delegation_token") != 0) {
+  if (fname.compare("commit_txn") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_cancel_delegation_token_presult result;
+  ThriftHiveMetastore_commit_txn_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
@@ -36475,21 +38617,25 @@ void ThriftHiveMetastoreClient::recv_cancel_delegation_token()
   if (result.__isset.o1) {
     throw result.o1;
   }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
   return;
 }
 
-void ThriftHiveMetastoreClient::get_open_txns(GetOpenTxnsResponse& _return)
+void ThriftHiveMetastoreClient::lock(LockResponse& _return, const LockRequest& rqst)
 {
-  send_get_open_txns();
-  recv_get_open_txns(_return);
+  send_lock(rqst);
+  recv_lock(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_open_txns()
+void ThriftHiveMetastoreClient::send_lock(const LockRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_open_txns", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("lock", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_open_txns_pargs args;
+  ThriftHiveMetastore_lock_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36497,7 +38643,7 @@ void ThriftHiveMetastoreClient::send_get_open_txns()
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_open_txns(GetOpenTxnsResponse& _return)
+void ThriftHiveMetastoreClient::recv_lock(LockResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36517,12 +38663,12 @@ void ThriftHiveMetastoreClient::recv_get_open_txns(GetOpenTxnsResponse& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_open_txns") != 0) {
+  if (fname.compare("lock") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_open_txns_presult result;
+  ThriftHiveMetastore_lock_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36532,21 +38678,28 @@ void ThriftHiveMetastoreClient::recv_get_open_txns(GetOpenTxnsResponse& _return)
     // _return pointer has now been filled
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_open_txns failed: unknown result");
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lock failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::get_open_txns_info(GetOpenTxnsInfoResponse& _return)
+void ThriftHiveMetastoreClient::check_lock(LockResponse& _return, const CheckLockRequest& rqst)
 {
-  send_get_open_txns_info();
-  recv_get_open_txns_info(_return);
+  send_check_lock(rqst);
+  recv_check_lock(_return);
 }
 
-void ThriftHiveMetastoreClient::send_get_open_txns_info()
+void ThriftHiveMetastoreClient::send_check_lock(const CheckLockRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_open_txns_info", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("check_lock", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_get_open_txns_info_pargs args;
+  ThriftHiveMetastore_check_lock_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36554,7 +38707,7 @@ void ThriftHiveMetastoreClient::send_get_open_txns_info()
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_get_open_txns_info(GetOpenTxnsInfoResponse& _return)
+void ThriftHiveMetastoreClient::recv_check_lock(LockResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36574,12 +38727,12 @@ void ThriftHiveMetastoreClient::recv_get_open_txns_info(GetOpenTxnsInfoResponse&
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("get_open_txns_info") != 0) {
+  if (fname.compare("check_lock") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_get_open_txns_info_presult result;
+  ThriftHiveMetastore_check_lock_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36589,21 +38742,30 @@ void ThriftHiveMetastoreClient::recv_get_open_txns_info(GetOpenTxnsInfoResponse&
     // _return pointer has now been filled
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_open_txns_info failed: unknown result");
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "check_lock failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::open_txns(OpenTxnsResponse& _return, const OpenTxnRequest& rqst)
+void ThriftHiveMetastoreClient::unlock(const UnlockRequest& rqst)
 {
-  send_open_txns(rqst);
-  recv_open_txns(_return);
+  send_unlock(rqst);
+  recv_unlock();
 }
 
-void ThriftHiveMetastoreClient::send_open_txns(const OpenTxnRequest& rqst)
+void ThriftHiveMetastoreClient::send_unlock(const UnlockRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("open_txns", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("unlock", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_open_txns_pargs args;
+  ThriftHiveMetastore_unlock_pargs args;
   args.rqst = &rqst;
   args.write(oprot_);
 
@@ -36612,7 +38774,7 @@ void ThriftHiveMetastoreClient::send_open_txns(const OpenTxnRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_open_txns(OpenTxnsResponse& _return)
+void ThriftHiveMetastoreClient::recv_unlock()
 {
 
   int32_t rseqid = 0;
@@ -36632,36 +38794,37 @@ void ThriftHiveMetastoreClient::recv_open_txns(OpenTxnsResponse& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("open_txns") != 0) {
+  if (fname.compare("unlock") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_open_txns_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_unlock_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
+  if (result.__isset.o1) {
+    throw result.o1;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "open_txns failed: unknown result");
+  if (result.__isset.o2) {
+    throw result.o2;
+  }
+  return;
 }
 
-void ThriftHiveMetastoreClient::abort_txn(const AbortTxnRequest& rqst)
+void ThriftHiveMetastoreClient::show_locks(ShowLocksResponse& _return, const ShowLocksRequest& rqst)
 {
-  send_abort_txn(rqst);
-  recv_abort_txn();
+  send_show_locks(rqst);
+  recv_show_locks(_return);
 }
 
-void ThriftHiveMetastoreClient::send_abort_txn(const AbortTxnRequest& rqst)
+void ThriftHiveMetastoreClient::send_show_locks(const ShowLocksRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("abort_txn", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("show_locks", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_abort_txn_pargs args;
+  ThriftHiveMetastore_show_locks_pargs args;
   args.rqst = &rqst;
   args.write(oprot_);
 
@@ -36670,7 +38833,7 @@ void ThriftHiveMetastoreClient::send_abort_txn(const AbortTxnRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_abort_txn()
+void ThriftHiveMetastoreClient::recv_show_locks(ShowLocksResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36690,35 +38853,37 @@ void ThriftHiveMetastoreClient::recv_abort_txn()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("abort_txn") != 0) {
+  if (fname.compare("show_locks") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_abort_txn_presult result;
+  ThriftHiveMetastore_show_locks_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.o1) {
-    throw result.o1;
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "show_locks failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::commit_txn(const CommitTxnRequest& rqst)
+void ThriftHiveMetastoreClient::heartbeat(const HeartbeatRequest& ids)
 {
-  send_commit_txn(rqst);
-  recv_commit_txn();
+  send_heartbeat(ids);
+  recv_heartbeat();
 }
 
-void ThriftHiveMetastoreClient::send_commit_txn(const CommitTxnRequest& rqst)
+void ThriftHiveMetastoreClient::send_heartbeat(const HeartbeatRequest& ids)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("commit_txn", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("heartbeat", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_commit_txn_pargs args;
-  args.rqst = &rqst;
+  ThriftHiveMetastore_heartbeat_pargs args;
+  args.ids = &ids;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36726,7 +38891,7 @@ void ThriftHiveMetastoreClient::send_commit_txn(const CommitTxnRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_commit_txn()
+void ThriftHiveMetastoreClient::recv_heartbeat()
 {
 
   int32_t rseqid = 0;
@@ -36746,12 +38911,12 @@ void ThriftHiveMetastoreClient::recv_commit_txn()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("commit_txn") != 0) {
+  if (fname.compare("heartbeat") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_commit_txn_presult result;
+  ThriftHiveMetastore_heartbeat_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
@@ -36762,22 +38927,25 @@ void ThriftHiveMetastoreClient::recv_commit_txn()
   if (result.__isset.o2) {
     throw result.o2;
   }
+  if (result.__isset.o3) {
+    throw result.o3;
+  }
   return;
 }
 
-void ThriftHiveMetastoreClient::lock(LockResponse& _return, const LockRequest& rqst)
+void ThriftHiveMetastoreClient::heartbeat_txn_range(HeartbeatTxnRangeResponse& _return, const HeartbeatTxnRangeRequest& txns)
 {
-  send_lock(rqst);
-  recv_lock(_return);
+  send_heartbeat_txn_range(txns);
+  recv_heartbeat_txn_range(_return);
 }
 
-void ThriftHiveMetastoreClient::send_lock(const LockRequest& rqst)
+void ThriftHiveMetastoreClient::send_heartbeat_txn_range(const HeartbeatTxnRangeRequest& txns)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("lock", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("heartbeat_txn_range", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_lock_pargs args;
-  args.rqst = &rqst;
+  ThriftHiveMetastore_heartbeat_txn_range_pargs args;
+  args.txns = &txns;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -36785,7 +38953,7 @@ void ThriftHiveMetastoreClient::send_lock(const LockRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_lock(LockResponse& _return)
+void ThriftHiveMetastoreClient::recv_heartbeat_txn_range(HeartbeatTxnRangeResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36805,12 +38973,12 @@ void ThriftHiveMetastoreClient::recv_lock(LockResponse& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("lock") != 0) {
+  if (fname.compare("heartbeat_txn_range") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_lock_presult result;
+  ThriftHiveMetastore_heartbeat_txn_range_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -36820,27 +38988,21 @@ void ThriftHiveMetastoreClient::recv_lock(LockResponse& _return)
     // _return pointer has now been filled
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lock failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "heartbeat_txn_range failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::check_lock(LockResponse& _return, const CheckLockRequest& rqst)
+void ThriftHiveMetastoreClient::compact(const CompactionRequest& rqst)
 {
-  send_check_lock(rqst);
-  recv_check_lock(_return);
+  send_compact(rqst);
+  recv_compact();
 }
 
-void ThriftHiveMetastoreClient::send_check_lock(const CheckLockRequest& rqst)
+void ThriftHiveMetastoreClient::send_compact(const CompactionRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("check_lock", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("compact", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_check_lock_pargs args;
+  ThriftHiveMetastore_compact_pargs args;
   args.rqst = &rqst;
   args.write(oprot_);
 
@@ -36849,7 +39011,7 @@ void ThriftHiveMetastoreClient::send_check_lock(const CheckLockRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_check_lock(LockResponse& _return)
+void ThriftHiveMetastoreClient::recv_compact()
 {
 
   int32_t rseqid = 0;
@@ -36869,45 +39031,31 @@ void ThriftHiveMetastoreClient::recv_check_lock(LockResponse& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("check_lock") != 0) {
+  if (fname.compare("compact") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_check_lock_presult result;
-  result.success = &_return;
+  ThriftHiveMetastore_compact_presult result;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
-    return;
-  }
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
-  }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "check_lock failed: unknown result");
+  return;
 }
 
-void ThriftHiveMetastoreClient::unlock(const UnlockRequest& rqst)
+void ThriftHiveMetastoreClient::show_compact(ShowCompactResponse& _return, const ShowCompactRequest& rqst)
 {
-  send_unlock(rqst);
-  recv_unlock();
+  send_show_compact(rqst);
+  recv_show_compact(_return);
 }
 
-void ThriftHiveMetastoreClient::send_unlock(const UnlockRequest& rqst)
+void ThriftHiveMetastoreClient::send_show_compact(const ShowCompactRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("unlock", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("show_compact", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_unlock_pargs args;
+  ThriftHiveMetastore_show_compact_pargs args;
   args.rqst = &rqst;
   args.write(oprot_);
 
@@ -36916,7 +39064,7 @@ void ThriftHiveMetastoreClient::send_unlock(const UnlockRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_unlock()
+void ThriftHiveMetastoreClient::recv_show_compact(ShowCompactResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36936,37 +39084,36 @@ void ThriftHiveMetastoreClient::recv_unlock()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("unlock") != 0) {
+  if (fname.compare("show_compact") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_unlock_presult result;
+  ThriftHiveMetastore_show_compact_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  if (result.__isset.o2) {
-    throw result.o2;
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "show_compact failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::show_locks(ShowLocksResponse& _return, const ShowLocksRequest& rqst)
+void ThriftHiveMetastoreClient::get_next_notification(NotificationEventResponse& _return, const NotificationEventRequest& rqst)
 {
-  send_show_locks(rqst);
-  recv_show_locks(_return);
+  send_get_next_notification(rqst);
+  recv_get_next_notification(_return);
 }
 
-void ThriftHiveMetastoreClient::send_show_locks(const ShowLocksRequest& rqst)
+void ThriftHiveMetastoreClient::send_get_next_notification(const NotificationEventRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("show_locks", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_next_notification", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_show_locks_pargs args;
+  ThriftHiveMetastore_get_next_notification_pargs args;
   args.rqst = &rqst;
   args.write(oprot_);
 
@@ -36975,7 +39122,7 @@ void ThriftHiveMetastoreClient::send_show_locks(const ShowLocksRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_show_locks(ShowLocksResponse& _return)
+void ThriftHiveMetastoreClient::recv_get_next_notification(NotificationEventResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -36995,12 +39142,12 @@ void ThriftHiveMetastoreClient::recv_show_locks(ShowLocksResponse& _return)
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("show_locks") != 0) {
+  if (fname.compare("get_next_notification") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_show_locks_presult result;
+  ThriftHiveMetastore_get_next_notification_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -37010,22 +39157,21 @@ void ThriftHiveMetastoreClient::recv_show_locks(ShowLocksResponse& _return)
     // _return pointer has now been filled
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "show_locks failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_next_notification failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::heartbeat(const HeartbeatRequest& ids)
+void ThriftHiveMetastoreClient::get_current_notificationEventId(CurrentNotificationEventId& _return)
 {
-  send_heartbeat(ids);
-  recv_heartbeat();
+  send_get_current_notificationEventId();
+  recv_get_current_notificationEventId(_return);
 }
 
-void ThriftHiveMetastoreClient::send_heartbeat(const HeartbeatRequest& ids)
+void ThriftHiveMetastoreClient::send_get_current_notificationEventId()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("heartbeat", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_current_notificationEventId", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_heartbeat_pargs args;
-  args.ids = &ids;
+  ThriftHiveMetastore_get_current_notificationEventId_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -37033,7 +39179,7 @@ void ThriftHiveMetastoreClient::send_heartbeat(const HeartbeatRequest& ids)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_heartbeat()
+void ThriftHiveMetastoreClient::recv_get_current_notificationEventId(CurrentNotificationEventId& _return)
 {
 
   int32_t rseqid = 0;
@@ -37053,41 +39199,37 @@ void ThriftHiveMetastoreClient::recv_heartbeat()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("heartbeat") != 0) {
+  if (fname.compare("get_current_notificationEventId") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_heartbeat_presult result;
+  ThriftHiveMetastore_get_current_notificationEventId_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  if (result.__isset.o1) {
-    throw result.o1;
-  }
-  if (result.__isset.o2) {
-    throw result.o2;
-  }
-  if (result.__isset.o3) {
-    throw result.o3;
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
   }
-  return;
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_current_notificationEventId failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::heartbeat_txn_range(HeartbeatTxnRangeResponse& _return, const HeartbeatTxnRangeRequest& txns)
+void ThriftHiveMetastoreClient::fire_listener_event(FireEventResponse& _return, const FireEventRequest& rqst)
 {
-  send_heartbeat_txn_range(txns);
-  recv_heartbeat_txn_range(_return);
+  send_fire_listener_event(rqst);
+  recv_fire_listener_event(_return);
 }
 
-void ThriftHiveMetastoreClient::send_heartbeat_txn_range(const HeartbeatTxnRangeRequest& txns)
+void ThriftHiveMetastoreClient::send_fire_listener_event(const FireEventRequest& rqst)
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("heartbeat_txn_range", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("fire_listener_event", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_heartbeat_txn_range_pargs args;
-  args.txns = &txns;
+  ThriftHiveMetastore_fire_listener_event_pargs args;
+  args.rqst = &rqst;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -37095,7 +39237,7 @@ void ThriftHiveMetastoreClient::send_heartbeat_txn_range(const HeartbeatTxnRange
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_heartbeat_txn_range(HeartbeatTxnRangeResponse& _return)
+void ThriftHiveMetastoreClient::recv_fire_listener_event(FireEventResponse& _return)
 {
 
   int32_t rseqid = 0;
@@ -37115,12 +39257,12 @@ void ThriftHiveMetastoreClient::recv_heartbeat_txn_range(HeartbeatTxnRangeRespon
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("heartbeat_txn_range") != 0) {
+  if (fname.compare("fire_listener_event") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_heartbeat_txn_range_presult result;
+  ThriftHiveMetastore_fire_listener_event_presult result;
   result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
@@ -37130,22 +39272,21 @@ void ThriftHiveMetastoreClient::recv_heartbeat_txn_range(HeartbeatTxnRangeRespon
     // _return pointer has now been filled
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "heartbeat_txn_range failed: unknown result");
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fire_listener_event failed: unknown result");
 }
 
-void ThriftHiveMetastoreClient::compact(const CompactionRequest& rqst)
+void ThriftHiveMetastoreClient::get_metastore_db_uuid(std::string& _return)
 {
-  send_compact(rqst);
-  recv_compact();
+  send_get_metastore_db_uuid();
+  recv_get_metastore_db_uuid(_return);
 }
 
-void ThriftHiveMetastoreClient::send_compact(const CompactionRequest& rqst)
+void ThriftHiveMetastoreClient::send_get_metastore_db_uuid()
 {
   int32_t cseqid = 0;
-  oprot_->writeMessageBegin("compact", ::apache::thrift::protocol::T_CALL, cseqid);
+  oprot_->writeMessageBegin("get_metastore_db_uuid", ::apache::thrift::protocol::T_CALL, cseqid);
 
-  ThriftHiveMetastore_compact_pargs args;
-  args.rqst = &rqst;
+  ThriftHiveMetastore_get_metastore_db_uuid_pargs args;
   args.write(oprot_);
 
   oprot_->writeMessageEnd();
@@ -37153,7 +39294,7 @@ void ThriftHiveMetastoreClient::send_compact(const CompactionRequest& rqst)
   oprot_->getTransport()->flush();
 }
 
-void ThriftHiveMetastoreClient::recv_compact()
+void ThriftHiveMetastoreClient::recv_get_metastore_db_uuid(std::string& _return)
 {
 
   int32_t rseqid = 0;
@@ -37173,355 +39314,545 @@ void ThriftHiveMetastoreClient::recv_compact()
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  if (fname.compare("compact") != 0) {
+  if (fname.compare("get_metastore_db_uuid") != 0) {
     iprot_->skip(::apache::thrift::protocol::T_STRUCT);
     iprot_->readMessageEnd();
     iprot_->getTransport()->readEnd();
   }
-  ThriftHiveMetastore_compact_presult result;
+  ThriftHiveMetastore_get_metastore_db_uuid_presult result;
+  result.success = &_return;
   result.read(iprot_);
   iprot_->readMessageEnd();
   iprot_->getTransport()->readEnd();
 
-  return;
+  if (result.__isset.success) {
+    // _return pointer has now been filled
+    return;
+  }
+  if (result.__isset.o1) {
+    throw result.o1;
+  }
+  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_metastore_db_uuid failed: unknown result");
+}
+
+bool ThriftHiveMetastoreProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
+  ProcessMap::iterator pfn;
+  pfn = processMap_.find(fname);
+  if (pfn == processMap_.end()) {
+    return  ::facebook::fb303::FacebookServiceProcessor::dispatchCall(iprot, oprot, fname, seqid, callContext);
+  }
+  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
+  return true;
+}
+
+void ThriftHiveMetastoreProcessor::process_getMetaConf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.getMetaConf", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.getMetaConf");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.getMetaConf");
+  }
+
+  ThriftHiveMetastore_getMetaConf_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.getMetaConf", bytes);
+  }
+
+  ThriftHiveMetastore_getMetaConf_result result;
+  try {
+    iface_->getMetaConf(result.success, args.key);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.getMetaConf");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.getMetaConf");
+  }
+
+  oprot->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.getMetaConf", bytes);
+  }
+}
+
+void ThriftHiveMetastoreProcessor::process_setMetaConf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.setMetaConf", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.setMetaConf");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.setMetaConf");
+  }
+
+  ThriftHiveMetastore_setMetaConf_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.setMetaConf", bytes);
+  }
+
+  ThriftHiveMetastore_setMetaConf_result result;
+  try {
+    iface_->setMetaConf(args.key, args.value);
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.setMetaConf");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.setMetaConf");
+  }
+
+  oprot->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.setMetaConf", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::show_compact(ShowCompactResponse& _return, const ShowCompactRequest& rqst)
-{
-  send_show_compact(rqst);
-  recv_show_compact(_return);
-}
+void ThriftHiveMetastoreProcessor::process_create_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+{
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_database", callContext);
+  }
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_database");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_database");
+  }
+
+  ThriftHiveMetastore_create_database_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_database", bytes);
+  }
+
+  ThriftHiveMetastore_create_database_result result;
+  try {
+    iface_->create_database(args.database);
+  } catch (AlreadyExistsException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (InvalidObjectException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_database");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("create_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
+    return;
+  }
 
-void ThriftHiveMetastoreClient::send_show_compact(const ShowCompactRequest& rqst)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("show_compact", ::apache::thrift::protocol::T_CALL, cseqid);
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_database");
+  }
 
-  ThriftHiveMetastore_show_compact_pargs args;
-  args.rqst = &rqst;
-  args.write(oprot_);
+  oprot->writeMessageBegin("create_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_database", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::recv_show_compact(ShowCompactResponse& _return)
+void ThriftHiveMetastoreProcessor::process_get_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
-
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
-
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_database", callContext);
   }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_database");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_database");
   }
-  if (fname.compare("show_compact") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+
+  ThriftHiveMetastore_get_database_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_database", bytes);
   }
-  ThriftHiveMetastore_show_compact_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
+  ThriftHiveMetastore_get_database_result result;
+  try {
+    iface_->get_database(result.success, args.name);
+    result.__isset.success = true;
+  } catch (NoSuchObjectException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_database");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "show_compact failed: unknown result");
-}
-
-void ThriftHiveMetastoreClient::get_next_notification(NotificationEventResponse& _return, const NotificationEventRequest& rqst)
-{
-  send_get_next_notification(rqst);
-  recv_get_next_notification(_return);
-}
 
-void ThriftHiveMetastoreClient::send_get_next_notification(const NotificationEventRequest& rqst)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_next_notification", ::apache::thrift::protocol::T_CALL, cseqid);
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_database");
+  }
 
-  ThriftHiveMetastore_get_next_notification_pargs args;
-  args.rqst = &rqst;
-  args.write(oprot_);
+  oprot->writeMessageBegin("get_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_database", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::recv_get_next_notification(NotificationEventResponse& _return)
+void ThriftHiveMetastoreProcessor::process_drop_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
-
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
-
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_database", callContext);
   }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_database");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_database");
   }
-  if (fname.compare("get_next_notification") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+
+  ThriftHiveMetastore_drop_database_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_database", bytes);
   }
-  ThriftHiveMetastore_get_next_notification_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
+  ThriftHiveMetastore_drop_database_result result;
+  try {
+    iface_->drop_database(args.name, args.deleteData, args.cascade);
+  } catch (NoSuchObjectException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (InvalidOperationException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_database");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_next_notification failed: unknown result");
-}
-
-void ThriftHiveMetastoreClient::get_current_notificationEventId(CurrentNotificationEventId& _return)
-{
-  send_get_current_notificationEventId();
-  recv_get_current_notificationEventId(_return);
-}
 
-void ThriftHiveMetastoreClient::send_get_current_notificationEventId()
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_current_notificationEventId", ::apache::thrift::protocol::T_CALL, cseqid);
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_database");
+  }
 
-  ThriftHiveMetastore_get_current_notificationEventId_pargs args;
-  args.write(oprot_);
+  oprot->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_database", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::recv_get_current_notificationEventId(CurrentNotificationEventId& _return)
+void ThriftHiveMetastoreProcessor::process_get_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
-
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
-
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_databases", callContext);
   }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_databases");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_databases");
   }
-  if (fname.compare("get_current_notificationEventId") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+
+  ThriftHiveMetastore_get_databases_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_databases", bytes);
   }
-  ThriftHiveMetastore_get_current_notificationEventId_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
+  ThriftHiveMetastore_get_databases_result result;
+  try {
+    iface_->get_databases(result.success, args.pattern);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_databases");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_current_notificationEventId failed: unknown result");
-}
-
-void ThriftHiveMetastoreClient::fire_listener_event(FireEventResponse& _return, const FireEventRequest& rqst)
-{
-  send_fire_listener_event(rqst);
-  recv_fire_listener_event(_return);
-}
 
-void ThriftHiveMetastoreClient::send_fire_listener_event(const FireEventRequest& rqst)
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("fire_listener_event", ::apache::thrift::protocol::T_CALL, cseqid);
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_databases");
+  }
 
-  ThriftHiveMetastore_fire_listener_event_pargs args;
-  args.rqst = &rqst;
-  args.write(oprot_);
+  oprot->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_databases", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::recv_fire_listener_event(FireEventResponse& _return)
+void ThriftHiveMetastoreProcessor::process_get_all_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
-
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
-
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_databases", callContext);
   }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_databases");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_databases");
   }
-  if (fname.compare("fire_listener_event") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+
+  ThriftHiveMetastore_get_all_databases_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_databases", bytes);
   }
-  ThriftHiveMetastore_fire_listener_event_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
+  ThriftHiveMetastore_get_all_databases_result result;
+  try {
+    iface_->get_all_databases(result.success);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_databases");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
     return;
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "fire_listener_event failed: unknown result");
-}
-
-void ThriftHiveMetastoreClient::get_metastore_db_uuid(std::string& _return)
-{
-  send_get_metastore_db_uuid();
-  recv_get_metastore_db_uuid(_return);
-}
 
-void ThriftHiveMetastoreClient::send_get_metastore_db_uuid()
-{
-  int32_t cseqid = 0;
-  oprot_->writeMessageBegin("get_metastore_db_uuid", ::apache::thrift::protocol::T_CALL, cseqid);
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_databases");
+  }
 
-  ThriftHiveMetastore_get_metastore_db_uuid_pargs args;
-  args.write(oprot_);
+  oprot->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
 
-  oprot_->writeMessageEnd();
-  oprot_->getTransport()->writeEnd();
-  oprot_->getTransport()->flush();
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_databases", bytes);
+  }
 }
 
-void ThriftHiveMetastoreClient::recv_get_metastore_db_uuid(std::string& _return)
+void ThriftHiveMetastoreProcessor::process_alter_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
-
-  int32_t rseqid = 0;
-  std::string fname;
-  ::apache::thrift::protocol::TMessageType mtype;
-
-  iprot_->readMessageBegin(fname, mtype, rseqid);
-  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
-    ::apache::thrift::TApplicationException x;
-    x.read(iprot_);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
-    throw x;
+  void* ctx = NULL;
+  if (this->eventHandler_.get() != NULL) {
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_database", callContext);
   }
-  if (mtype != ::apache::thrift::protocol::T_REPLY) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_database");
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_database");
   }
-  if (fname.compare("get_metastore_db_uuid") != 0) {
-    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
-    iprot_->readMessageEnd();
-    iprot_->getTransport()->readEnd();
+
+  ThriftHiveMetastore_alter_database_args args;
+  args.read(iprot);
+  iprot->readMessageEnd();
+  uint32_t bytes = iprot->getTransport()->readEnd();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_database", bytes);
   }
-  ThriftHiveMetastore_get_metastore_db_uuid_presult result;
-  result.success = &_return;
-  result.read(iprot_);
-  iprot_->readMessageEnd();
-  iprot_->getTransport()->readEnd();
 
-  if (result.__isset.success) {
-    // _return pointer has now been filled
+  ThriftHiveMetastore_alter_database_result result;
+  try {
+    iface_->alter_database(args.dbname, args.db);
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (NoSuchObjectException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (const std::exception& e) {
+    if (this->eventHandler_.get() != NULL) {
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_database");
+    }
+
+    ::apache::thrift::TApplicationException x(e.what());
+    oprot->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    x.write(oprot);
+    oprot->writeMessageEnd();
+    oprot->getTransport()->writeEnd();
+    oprot->getTransport()->flush();
     return;
   }
-  if (result.__isset.o1) {
-    throw result.o1;
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_database");
   }
-  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_metastore_db_uuid failed: unknown result");
-}
 
-bool ThriftHiveMetastoreProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
-  ProcessMap::iterator pfn;
-  pfn = processMap_.find(fname);
-  if (pfn == processMap_.end()) {
-    return  ::facebook::fb303::FacebookServiceProcessor::dispatchCall(iprot, oprot, fname, seqid, callContext);
+  oprot->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  result.write(oprot);
+  oprot->writeMessageEnd();
+  bytes = oprot->getTransport()->writeEnd();
+  oprot->getTransport()->flush();
+
+  if (this->eventHandler_.get() != NULL) {
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_database", bytes);
   }
-  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
-  return true;
 }
 
-void ThriftHiveMetastoreProcessor::process_getMetaConf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.getMetaConf", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_type", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.getMetaConf");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_type");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.getMetaConf");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_type");
   }
 
-  ThriftHiveMetastore_getMetaConf_args args;
+  ThriftHiveMetastore_get_type_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.getMetaConf", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_type", bytes);
   }
 
-  ThriftHiveMetastore_getMetaConf_result result;
+  ThriftHiveMetastore_get_type_result result;
   try {
-    iface_->getMetaConf(result.success, args.key);
+    iface_->get_type(result.success, args.name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (NoSuchObjectException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.getMetaConf");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_type");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37530,54 +39861,61 @@ void ThriftHiveMetastoreProcessor::process_getMetaConf(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.getMetaConf");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_type");
   }
 
-  oprot->writeMessageBegin("getMetaConf", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_type", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.getMetaConf", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_type", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_setMetaConf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_create_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.setMetaConf", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_type", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.setMetaConf");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_type");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.setMetaConf");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_type");
   }
 
-  ThriftHiveMetastore_setMetaConf_args args;
+  ThriftHiveMetastore_create_type_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.setMetaConf", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_type", bytes);
   }
 
-  ThriftHiveMetastore_setMetaConf_result result;
+  ThriftHiveMetastore_create_type_result result;
   try {
-    iface_->setMetaConf(args.key, args.value);
-  } catch (MetaException &o1) {
+    result.success = iface_->create_type(args.type);
+    result.__isset.success = true;
+  } catch (AlreadyExistsException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (InvalidObjectException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.setMetaConf");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_type");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("create_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37586,60 +39924,58 @@ void ThriftHiveMetastoreProcessor::process_setMetaConf(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.setMetaConf");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_type");
   }
 
-  oprot->writeMessageBegin("setMetaConf", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("create_type", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.setMetaConf", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_type", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_database", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_type", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_database");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_type");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_database");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_type");
   }
 
-  ThriftHiveMetastore_create_database_args args;
+  ThriftHiveMetastore_drop_type_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_database", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_type", bytes);
   }
 
-  ThriftHiveMetastore_create_database_result result;
+  ThriftHiveMetastore_drop_type_result result;
   try {
-    iface_->create_database(args.database);
-  } catch (AlreadyExistsException &o1) {
+    result.success = iface_->drop_type(args.type);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_database");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_type");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37648,58 +39984,55 @@ void ThriftHiveMetastoreProcessor::process_create_database(int32_t seqid, ::apac
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_database");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_type");
   }
 
-  oprot->writeMessageBegin("create_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_database", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_type", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_type_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_database", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_type_all", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_database");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_type_all");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_database");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_type_all");
   }
 
-  ThriftHiveMetastore_get_database_args args;
+  ThriftHiveMetastore_get_type_all_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_database", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_type_all", bytes);
   }
 
-  ThriftHiveMetastore_get_database_result result;
+  ThriftHiveMetastore_get_type_all_result result;
   try {
-    iface_->get_database(result.success, args.name);
+    iface_->get_type_all(result.success, args.name);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_database");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_type_all");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37708,60 +40041,61 @@ void ThriftHiveMetastoreProcessor::process_get_database(int32_t seqid, ::apache:
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_database");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_type_all");
   }
 
-  oprot->writeMessageBegin("get_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_database", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_type_all", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_fields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_database", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_fields", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_database");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_fields");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_database");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_fields");
   }
 
-  ThriftHiveMetastore_drop_database_args args;
+  ThriftHiveMetastore_get_fields_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_database", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_fields", bytes);
   }
 
-  ThriftHiveMetastore_drop_database_result result;
+  ThriftHiveMetastore_get_fields_result result;
   try {
-    iface_->drop_database(args.name, args.deleteData, args.cascade);
-  } catch (NoSuchObjectException &o1) {
+    iface_->get_fields(result.success, args.db_name, args.table_name);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidOperationException &o2) {
+  } catch (UnknownTableException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (UnknownDBException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_database");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_fields");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37770,55 +40104,61 @@ void ThriftHiveMetastoreProcessor::process_drop_database(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_database");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_fields");
   }
 
-  oprot->writeMessageBegin("drop_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_database", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_fields", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_fields_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_databases", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_fields_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_databases");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_databases");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
   }
 
-  ThriftHiveMetastore_get_databases_args args;
+  ThriftHiveMetastore_get_fields_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_databases", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_get_databases_result result;
+  ThriftHiveMetastore_get_fields_with_environment_context_result result;
   try {
-    iface_->get_databases(result.success, args.pattern);
+    iface_->get_fields_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (UnknownTableException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_databases");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37827,55 +40167,61 @@ void ThriftHiveMetastoreProcessor::process_get_databases(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_databases");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
   }
 
-  oprot->writeMessageBegin("get_databases", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_databases", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_all_databases(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_schema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_databases", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_schema", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_databases");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_schema");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_databases");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_schema");
   }
 
-  ThriftHiveMetastore_get_all_databases_args args;
+  ThriftHiveMetastore_get_schema_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_databases", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_schema", bytes);
   }
 
-  ThriftHiveMetastore_get_all_databases_result result;
+  ThriftHiveMetastore_get_schema_result result;
   try {
-    iface_->get_all_databases(result.success);
+    iface_->get_schema(result.success, args.db_name, args.table_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (UnknownTableException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_databases");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_schema");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37884,57 +40230,61 @@ void ThriftHiveMetastoreProcessor::process_get_all_databases(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_databases");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_schema");
   }
 
-  oprot->writeMessageBegin("get_all_databases", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_databases", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_schema", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_schema_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_database", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_schema_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_database");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_database");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
   }
 
-  ThriftHiveMetastore_alter_database_args args;
+  ThriftHiveMetastore_get_schema_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_database", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_alter_database_result result;
+  ThriftHiveMetastore_get_schema_with_environment_context_result result;
   try {
-    iface_->alter_database(args.dbname, args.db);
+    iface_->get_schema_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
+    result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (UnknownTableException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_database");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -37943,58 +40293,63 @@ void ThriftHiveMetastoreProcessor::process_alter_database(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_database");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
   }
 
-  oprot->writeMessageBegin("alter_database", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_database", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_type", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_table", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_type");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_table");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_type");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_table");
   }
 
-  ThriftHiveMetastore_get_type_args args;
+  ThriftHiveMetastore_create_table_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_type", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_table", bytes);
   }
 
-  ThriftHiveMetastore_get_type_result result;
+  ThriftHiveMetastore_create_table_result result;
   try {
-    iface_->get_type(result.success, args.name);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->create_table(args.tbl);
+  } catch (AlreadyExistsException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (InvalidObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (NoSuchObjectException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_type");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_table");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38003,45 +40358,44 @@ void ThriftHiveMetastoreProcessor::process_get_type(int32_t seqid, ::apache::thr
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_type");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_table");
   }
 
-  oprot->writeMessageBegin("get_type", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_type", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_table", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_create_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_type", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_table_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_type");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_table_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_type");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
   }
 
-  ThriftHiveMetastore_create_type_args args;
+  ThriftHiveMetastore_create_table_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_type", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_table_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_create_type_result result;
+  ThriftHiveMetastore_create_table_with_environment_context_result result;
   try {
-    result.success = iface_->create_type(args.type);
-    result.__isset.success = true;
+    iface_->create_table_with_environment_context(args.tbl, args.environment_context);
   } catch (AlreadyExistsException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
@@ -38051,13 +40405,16 @@ void ThriftHiveMetastoreProcessor::process_create_type(int32_t seqid, ::apache::
   } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
+  } catch (NoSuchObjectException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_type");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38066,58 +40423,57 @@ void ThriftHiveMetastoreProcessor::process_create_type(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_type");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
   }
 
-  oprot->writeMessageBegin("create_type", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_type", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_table_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_type", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_table", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_type");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_table");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_type");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_table");
   }
 
-  ThriftHiveMetastore_drop_type_args args;
+  ThriftHiveMetastore_drop_table_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_type", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_table", bytes);
   }
 
-  ThriftHiveMetastore_drop_type_result result;
+  ThriftHiveMetastore_drop_table_result result;
   try {
-    result.success = iface_->drop_type(args.type);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->drop_table(args.dbname, args.name, args.deleteData);
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_type");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_table");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38126,55 +40482,57 @@ void ThriftHiveMetastoreProcessor::process_drop_type(int32_t seqid, ::apache::th
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_type");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_table");
   }
 
-  oprot->writeMessageBegin("drop_type", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_type", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_table", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_type_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_type_all", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_table_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_type_all");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_type_all");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
   }
 
-  ThriftHiveMetastore_get_type_all_args args;
+  ThriftHiveMetastore_drop_table_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_type_all", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_table_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_get_type_all_result result;
+  ThriftHiveMetastore_drop_table_with_environment_context_result result;
   try {
-    iface_->get_type_all(result.success, args.name);
-    result.__isset.success = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
+    iface_->drop_table_with_environment_context(args.dbname, args.name, args.deleteData, args.environment_context);
+  } catch (NoSuchObjectException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_type_all");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38183,61 +40541,55 @@ void ThriftHiveMetastoreProcessor::process_get_type_all(int32_t seqid, ::apache:
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_type_all");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
   }
 
-  oprot->writeMessageBegin("get_type_all", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_type_all", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_table_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_fields(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_fields", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_tables", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_fields");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_tables");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_fields");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_tables");
   }
 
-  ThriftHiveMetastore_get_fields_args args;
+  ThriftHiveMetastore_get_tables_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_fields", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_tables", bytes);
   }
 
-  ThriftHiveMetastore_get_fields_result result;
+  ThriftHiveMetastore_get_tables_result result;
   try {
-    iface_->get_fields(result.success, args.db_name, args.table_name);
+    iface_->get_tables(result.success, args.db_name, args.pattern);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (UnknownTableException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_fields");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_tables");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38246,61 +40598,55 @@ void ThriftHiveMetastoreProcessor::process_get_fields(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_fields");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_tables");
   }
 
-  oprot->writeMessageBegin("get_fields", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_fields", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_tables", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_fields_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_fields_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_meta", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_meta");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_meta");
   }
 
-  ThriftHiveMetastore_get_fields_with_environment_context_args args;
+  ThriftHiveMetastore_get_table_meta_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_meta", bytes);
   }
 
-  ThriftHiveMetastore_get_fields_with_environment_context_result result;
+  ThriftHiveMetastore_get_table_meta_result result;
   try {
-    iface_->get_fields_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
+    iface_->get_table_meta(result.success, args.db_patterns, args.tbl_patterns, args.tbl_types);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (UnknownTableException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_meta");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38309,61 +40655,55 @@ void ThriftHiveMetastoreProcessor::process_get_fields_with_environment_context(i
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_meta");
   }
 
-  oprot->writeMessageBegin("get_fields_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_fields_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_meta", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_schema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_all_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_schema", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_tables", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_schema");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_tables");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_schema");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_tables");
   }
 
-  ThriftHiveMetastore_get_schema_args args;
+  ThriftHiveMetastore_get_all_tables_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_schema", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_tables", bytes);
   }
 
-  ThriftHiveMetastore_get_schema_result result;
+  ThriftHiveMetastore_get_all_tables_result result;
   try {
-    iface_->get_schema(result.success, args.db_name, args.table_name);
+    iface_->get_all_tables(result.success, args.db_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (UnknownTableException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_schema");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_tables");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38372,61 +40712,58 @@ void ThriftHiveMetastoreProcessor::process_get_schema(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_schema");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_tables");
   }
 
-  oprot->writeMessageBegin("get_schema", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_schema", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_tables", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_schema_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_schema_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table");
   }
 
-  ThriftHiveMetastore_get_schema_with_environment_context_args args;
+  ThriftHiveMetastore_get_table_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table", bytes);
   }
 
-  ThriftHiveMetastore_get_schema_with_environment_context_result result;
+  ThriftHiveMetastore_get_table_result result;
   try {
-    iface_->get_schema_with_environment_context(result.success, args.db_name, args.table_name, args.environment_context);
+    iface_->get_table(result.success, args.dbname, args.tbl_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (UnknownTableException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38435,63 +40772,61 @@ void ThriftHiveMetastoreProcessor::process_get_schema_with_environment_context(i
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table");
   }
 
-  oprot->writeMessageBegin("get_schema_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_schema_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table_objects_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_table", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_objects_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_table");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_objects_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_table");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
   }
 
-  ThriftHiveMetastore_create_table_args args;
+  ThriftHiveMetastore_get_table_objects_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_table", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_objects_by_name", bytes);
   }
 
-  ThriftHiveMetastore_create_table_result result;
+  ThriftHiveMetastore_get_table_objects_by_name_result result;
   try {
-    iface_->create_table(args.tbl);
-  } catch (AlreadyExistsException &o1) {
+    iface_->get_table_objects_by_name(result.success, args.dbname, args.tbl_names);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
+  } catch (InvalidOperationException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (UnknownDBException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (NoSuchObjectException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_table");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38500,63 +40835,61 @@ void ThriftHiveMetastoreProcessor::process_create_table(int32_t seqid, ::apache:
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_table");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
   }
 
-  oprot->writeMessageBegin("create_table", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_table", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_objects_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table_names_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_table_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_names_by_filter", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_table_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_names_by_filter");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
   }
 
-  ThriftHiveMetastore_create_table_with_environment_context_args args;
+  ThriftHiveMetastore_get_table_names_by_filter_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_table_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_names_by_filter", bytes);
   }
 
-  ThriftHiveMetastore_create_table_with_environment_context_result result;
+  ThriftHiveMetastore_get_table_names_by_filter_result result;
   try {
-    iface_->create_table_with_environment_context(args.tbl, args.environment_context);
-  } catch (AlreadyExistsException &o1) {
+    iface_->get_table_names_by_filter(result.success, args.dbname, args.filter, args.max_tables);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
+  } catch (InvalidOperationException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (UnknownDBException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (NoSuchObjectException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38565,57 +40898,57 @@ void ThriftHiveMetastoreProcessor::process_create_table_with_environment_context
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_table_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
   }
 
-  oprot->writeMessageBegin("create_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_table_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_names_by_filter", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_table", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_table");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_table");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table");
   }
 
-  ThriftHiveMetastore_drop_table_args args;
+  ThriftHiveMetastore_alter_table_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_table", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table", bytes);
   }
 
-  ThriftHiveMetastore_drop_table_result result;
+  ThriftHiveMetastore_alter_table_result result;
   try {
-    iface_->drop_table(args.dbname, args.name, args.deleteData);
-  } catch (NoSuchObjectException &o1) {
+    iface_->alter_table(args.dbname, args.tbl_name, args.new_tbl);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_table");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38624,57 +40957,57 @@ void ThriftHiveMetastoreProcessor::process_drop_table(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_table");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table");
   }
 
-  oprot->writeMessageBegin("drop_table", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_table", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_table_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
   }
 
-  ThriftHiveMetastore_drop_table_with_environment_context_args args;
+  ThriftHiveMetastore_alter_table_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_table_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_drop_table_with_environment_context_result result;
+  ThriftHiveMetastore_alter_table_with_environment_context_result result;
   try {
-    iface_->drop_table_with_environment_context(args.dbname, args.name, args.deleteData, args.environment_context);
-  } catch (NoSuchObjectException &o1) {
+    iface_->alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38683,55 +41016,57 @@ void ThriftHiveMetastoreProcessor::process_drop_table_with_environment_context(i
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_table_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
   }
 
-  oprot->writeMessageBegin("drop_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_table_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_table_with_cascade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_tables", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table_with_cascade", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_tables");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table_with_cascade");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_tables");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
   }
 
-  ThriftHiveMetastore_get_tables_args args;
+  ThriftHiveMetastore_alter_table_with_cascade_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_tables", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table_with_cascade", bytes);
   }
 
-  ThriftHiveMetastore_get_tables_result result;
+  ThriftHiveMetastore_alter_table_with_cascade_result result;
   try {
-    iface_->get_tables(result.success, args.db_name, args.pattern);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->alter_table_with_cascade(args.dbname, args.tbl_name, args.new_tbl, args.cascade);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_tables");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38740,55 +41075,61 @@ void ThriftHiveMetastoreProcessor::process_get_tables(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_tables");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
   }
 
-  oprot->writeMessageBegin("get_tables", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_tables", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table_with_cascade", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table_meta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_meta", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_meta");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_meta");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partition");
   }
 
-  ThriftHiveMetastore_get_table_meta_args args;
+  ThriftHiveMetastore_add_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_meta", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partition", bytes);
   }
 
-  ThriftHiveMetastore_get_table_meta_result result;
+  ThriftHiveMetastore_add_partition_result result;
   try {
-    iface_->get_table_meta(result.success, args.db_patterns, args.tbl_patterns, args.tbl_types);
+    iface_->add_partition(result.success, args.new_part);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (AlreadyExistsException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_meta");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38797,55 +41138,61 @@ void ThriftHiveMetastoreProcessor::process_get_table_meta(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_meta");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partition");
   }
 
-  oprot->writeMessageBegin("get_table_meta", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_meta", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_all_tables(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_tables", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partition_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_tables");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_tables");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
   }
 
-  ThriftHiveMetastore_get_all_tables_args args;
+  ThriftHiveMetastore_add_partition_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_tables", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partition_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_get_all_tables_result result;
+  ThriftHiveMetastore_add_partition_with_environment_context_result result;
   try {
-    iface_->get_all_tables(result.success, args.db_name);
+    iface_->add_partition_with_environment_context(result.success, args.new_part, args.environment_context);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (AlreadyExistsException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_tables");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38854,58 +41201,61 @@ void ThriftHiveMetastoreProcessor::process_get_all_tables(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_tables");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
   }
 
-  oprot->writeMessageBegin("get_all_tables", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_tables", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partition_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions");
   }
 
-  ThriftHiveMetastore_get_table_args args;
+  ThriftHiveMetastore_add_partitions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions", bytes);
   }
 
-  ThriftHiveMetastore_get_table_result result;
+  ThriftHiveMetastore_add_partitions_result result;
   try {
-    iface_->get_table(result.success, args.dbname, args.tbl_name);
+    result.success = iface_->add_partitions(args.new_parts);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38914,61 +41264,61 @@ void ThriftHiveMetastoreProcessor::process_get_table(int32_t seqid, ::apache::th
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions");
   }
 
-  oprot->writeMessageBegin("get_table", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table_objects_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_partitions_pspec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_objects_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions_pspec", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_objects_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions_pspec");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions_pspec");
   }
 
-  ThriftHiveMetastore_get_table_objects_by_name_args args;
+  ThriftHiveMetastore_add_partitions_pspec_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_objects_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions_pspec", bytes);
   }
 
-  ThriftHiveMetastore_get_table_objects_by_name_result result;
+  ThriftHiveMetastore_add_partitions_pspec_result result;
   try {
-    iface_->get_table_objects_by_name(result.success, args.dbname, args.tbl_names);
+    result.success = iface_->add_partitions_pspec(args.new_parts);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidOperationException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions_pspec");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -38977,61 +41327,61 @@ void ThriftHiveMetastoreProcessor::process_get_table_objects_by_name(int32_t seq
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_objects_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions_pspec");
   }
 
-  oprot->writeMessageBegin("get_table_objects_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_objects_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions_pspec", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table_names_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_append_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_names_by_filter", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_names_by_filter");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition");
   }
 
-  ThriftHiveMetastore_get_table_names_by_filter_args args;
+  ThriftHiveMetastore_append_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_names_by_filter", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition", bytes);
   }
 
-  ThriftHiveMetastore_get_table_names_by_filter_result result;
+  ThriftHiveMetastore_append_partition_result result;
   try {
-    iface_->get_table_names_by_filter(result.success, args.dbname, args.filter, args.max_tables);
+    iface_->append_partition(result.success, args.db_name, args.tbl_name, args.part_vals);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidOperationException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39040,57 +41390,61 @@ void ThriftHiveMetastoreProcessor::process_get_table_names_by_filter(int32_t seq
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_names_by_filter");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition");
   }
 
-  oprot->writeMessageBegin("get_table_names_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_names_by_filter", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_partitions_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions_req", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions_req");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions_req");
   }
 
-  ThriftHiveMetastore_alter_table_args args;
+  ThriftHiveMetastore_add_partitions_req_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions_req", bytes);
   }
 
-  ThriftHiveMetastore_alter_table_result result;
+  ThriftHiveMetastore_add_partitions_req_result result;
   try {
-    iface_->alter_table(args.dbname, args.tbl_name, args.new_tbl);
-  } catch (InvalidOperationException &o1) {
+    iface_->add_partitions_req(result.success, args.request);
+    result.__isset.success = true;
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions_req");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39099,57 +41453,61 @@ void ThriftHiveMetastoreProcessor::process_alter_table(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions_req");
   }
 
-  oprot->writeMessageBegin("alter_table", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions_req", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_table_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_append_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
   }
 
-  ThriftHiveMetastore_alter_table_with_environment_context_args args;
+  ThriftHiveMetastore_append_partition_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_alter_table_with_environment_context_result result;
+  ThriftHiveMetastore_append_partition_with_environment_context_result result;
   try {
-    iface_->alter_table_with_environment_context(args.dbname, args.tbl_name, args.new_tbl, args.environment_context);
-  } catch (InvalidOperationException &o1) {
+    iface_->append_partition_with_environment_context(result.success, args.db_name, args.tbl_name, args.part_vals, args.environment_context);
+    result.__isset.success = true;
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39158,57 +41516,61 @@ void ThriftHiveMetastoreProcessor::process_alter_table_with_environment_context(
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
   }
 
-  oprot->writeMessageBegin("alter_table_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_table_with_cascade(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_append_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_table_with_cascade", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_table_with_cascade");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_by_name");
   }
 
-  ThriftHiveMetastore_alter_table_with_cascade_args args;
+  ThriftHiveMetastore_append_partition_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_table_with_cascade", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_by_name", bytes);
   }
 
-  ThriftHiveMetastore_alter_table_with_cascade_result result;
+  ThriftHiveMetastore_append_partition_by_name_result result;
   try {
-    iface_->alter_table_with_cascade(args.dbname, args.tbl_name, args.new_tbl, args.cascade);
-  } catch (InvalidOperationException &o1) {
+    iface_->append_partition_by_name(result.success, args.db_name, args.tbl_name, args.part_name);
+    result.__isset.success = true;
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39217,44 +41579,44 @@ void ThriftHiveMetastoreProcessor::process_alter_table_with_cascade(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_table_with_cascade");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_by_name");
   }
 
-  oprot->writeMessageBegin("alter_table_with_cascade", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_table_with_cascade", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_append_partition_by_name_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_by_name_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
   }
 
-  ThriftHiveMetastore_add_partition_args args;
+  ThriftHiveMetastore_append_partition_by_name_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_add_partition_result result;
+  ThriftHiveMetastore_append_partition_by_name_with_environment_context_result result;
   try {
-    iface_->add_partition(result.success, args.new_part);
+    iface_->append_partition_by_name_with_environment_context(result.success, args.db_name, args.tbl_name, args.part_name, args.environment_context);
     result.__isset.success = true;
   } catch (InvalidObjectException &o1) {
     result.o1 = o1;
@@ -39267,11 +41629,11 @@ void ThriftHiveMetastoreProcessor::process_add_partition(int32_t seqid, ::apache
     result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39280,61 +41642,58 @@ void ThriftHiveMetastoreProcessor::process_add_partition(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
   }
 
-  oprot->writeMessageBegin("add_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partition_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition");
   }
 
-  ThriftHiveMetastore_add_partition_with_environment_context_args args;
+  ThriftHiveMetastore_drop_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partition_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition", bytes);
   }
 
-  ThriftHiveMetastore_add_partition_with_environment_context_result result;
+  ThriftHiveMetastore_drop_partition_result result;
   try {
-    iface_->add_partition_with_environment_context(result.success, args.new_part, args.environment_context);
+    result.success = iface_->drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39343,61 +41702,58 @@ void ThriftHiveMetastoreProcessor::process_add_partition_with_environment_contex
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partition_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition");
   }
 
-  oprot->writeMessageBegin("add_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partition_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
   }
 
-  ThriftHiveMetastore_add_partitions_args args;
+  ThriftHiveMetastore_drop_partition_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_add_partitions_result result;
+  ThriftHiveMetastore_drop_partition_with_environment_context_result result;
   try {
-    result.success = iface_->add_partitions(args.new_parts);
+    result.success = iface_->drop_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39406,61 +41762,58 @@ void ThriftHiveMetastoreProcessor::process_add_partitions(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
   }
 
-  oprot->writeMessageBegin("add_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_partitions_pspec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions_pspec", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions_pspec");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions_pspec");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_by_name");
   }
 
-  ThriftHiveMetastore_add_partitions_pspec_args args;
+  ThriftHiveMetastore_drop_partition_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions_pspec", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_by_name", bytes);
   }
 
-  ThriftHiveMetastore_add_partitions_pspec_result result;
+  ThriftHiveMetastore_drop_partition_by_name_result result;
   try {
-    result.success = iface_->add_partitions_pspec(args.new_parts);
+    result.success = iface_->drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions_pspec");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39469,61 +41822,58 @@ void ThriftHiveMetastoreProcessor::process_add_partitions_pspec(int32_t seqid, :
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions_pspec");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name");
   }
 
-  oprot->writeMessageBegin("add_partitions_pspec", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions_pspec", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_append_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_partition_by_name_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_by_name_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
   }
 
-  ThriftHiveMetastore_append_partition_args args;
+  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_append_partition_result result;
+  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result result;
   try {
-    iface_->append_partition(result.success, args.db_name, args.tbl_name, args.part_vals);
+    result.success = iface_->drop_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39532,61 +41882,58 @@ void ThriftHiveMetastoreProcessor::process_append_partition(int32_t seqid, ::apa
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
   }
 
-  oprot->writeMessageBegin("append_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_partitions_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_partitions_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_partitions_req", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partitions_req", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_partitions_req");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partitions_req");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_partitions_req");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partitions_req");
   }
 
-  ThriftHiveMetastore_add_partitions_req_args args;
+  ThriftHiveMetastore_drop_partitions_req_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_partitions_req", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partitions_req", bytes);
   }
 
-  ThriftHiveMetastore_add_partitions_req_result result;
+  ThriftHiveMetastore_drop_partitions_req_result result;
   try {
-    iface_->add_partitions_req(result.success, args.request);
+    iface_->drop_partitions_req(result.success, args.req);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_partitions_req");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partitions_req");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39595,61 +41942,58 @@ void ThriftHiveMetastoreProcessor::process_add_partitions_req(int32_t seqid, ::a
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_partitions_req");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partitions_req");
   }
 
-  oprot->writeMessageBegin("add_partitions_req", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_partitions_req", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partitions_req", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_append_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition");
   }
 
-  ThriftHiveMetastore_append_partition_with_environment_context_args args;
+  ThriftHiveMetastore_get_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition", bytes);
   }
 
-  ThriftHiveMetastore_append_partition_with_environment_context_result result;
+  ThriftHiveMetastore_get_partition_result result;
   try {
-    iface_->append_partition_with_environment_context(result.success, args.db_name, args.tbl_name, args.part_vals, args.environment_context);
+    iface_->get_partition(result.success, args.db_name, args.tbl_name, args.part_vals);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39658,61 +42002,64 @@ void ThriftHiveMetastoreProcessor::process_append_partition_with_environment_con
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition");
   }
 
-  oprot->writeMessageBegin("append_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_append_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_exchange_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.exchange_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.exchange_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.exchange_partition");
   }
 
-  ThriftHiveMetastore_append_partition_by_name_args args;
+  ThriftHiveMetastore_exchange_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.exchange_partition", bytes);
   }
 
-  ThriftHiveMetastore_append_partition_by_name_result result;
+  ThriftHiveMetastore_exchange_partition_result result;
   try {
-    iface_->append_partition_by_name(result.success, args.db_name, args.tbl_name, args.part_name);
+    iface_->exchange_partition(result.success, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (InvalidObjectException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
+  } catch (InvalidInputException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.exchange_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39721,61 +42068,64 @@ void ThriftHiveMetastoreProcessor::process_append_partition_by_name(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.exchange_partition");
   }
 
-  oprot->writeMessageBegin("append_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.exchange_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_append_partition_by_name_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_exchange_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.append_partition_by_name_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.exchange_partitions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.exchange_partitions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.exchange_partitions");
   }
 
-  ThriftHiveMetastore_append_partition_by_name_with_environment_context_args args;
+  ThriftHiveMetastore_exchange_partitions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.exchange_partitions", bytes);
   }
 
-  ThriftHiveMetastore_append_partition_by_name_with_environment_context_result result;
+  ThriftHiveMetastore_exchange_partitions_result result;
   try {
-    iface_->append_partition_by_name_with_environment_context(result.success, args.db_name, args.tbl_name, args.part_name, args.environment_context);
+    iface_->exchange_partitions(result.success, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (InvalidObjectException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
+  } catch (InvalidInputException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.exchange_partitions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39784,58 +42134,58 @@ void ThriftHiveMetastoreProcessor::process_append_partition_by_name_with_environ
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.exchange_partitions");
   }
 
-  oprot->writeMessageBegin("append_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.append_partition_by_name_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.exchange_partitions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_with_auth", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_with_auth");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_with_auth");
   }
 
-  ThriftHiveMetastore_drop_partition_args args;
+  ThriftHiveMetastore_get_partition_with_auth_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_with_auth", bytes);
   }
 
-  ThriftHiveMetastore_drop_partition_result result;
+  ThriftHiveMetastore_get_partition_with_auth_result result;
   try {
-    result.success = iface_->drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData);
+    iface_->get_partition_with_auth(result.success, args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_with_auth");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39844,58 +42194,58 @@ void ThriftHiveMetastoreProcessor::process_drop_partition(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_with_auth");
   }
 
-  oprot->writeMessageBegin("drop_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_with_auth", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_by_name");
   }
 
-  ThriftHiveMetastore_drop_partition_with_environment_context_args args;
+  ThriftHiveMetastore_get_partition_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_by_name", bytes);
   }
 
-  ThriftHiveMetastore_drop_partition_with_environment_context_result result;
+  ThriftHiveMetastore_get_partition_by_name_result result;
   try {
-    result.success = iface_->drop_partition_with_environment_context(args.db_name, args.tbl_name, args.part_vals, args.deleteData, args.environment_context);
+    iface_->get_partition_by_name(result.success, args.db_name, args.tbl_name, args.part_name);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39904,44 +42254,44 @@ void ThriftHiveMetastoreProcessor::process_drop_partition_with_environment_conte
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_by_name");
   }
 
-  oprot->writeMessageBegin("drop_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions");
   }
 
-  ThriftHiveMetastore_drop_partition_by_name_args args;
+  ThriftHiveMetastore_get_partitions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions", bytes);
   }
 
-  ThriftHiveMetastore_drop_partition_by_name_result result;
+  ThriftHiveMetastore_get_partitions_result result;
   try {
-    result.success = iface_->drop_partition_by_name(args.db_name, args.tbl_name, args.part_name, args.deleteData);
+    iface_->get_partitions(result.success, args.db_name, args.tbl_name, args.max_parts);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
@@ -39951,11 +42301,11 @@ void ThriftHiveMetastoreProcessor::process_drop_partition_by_name(int32_t seqid,
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -39964,44 +42314,44 @@ void ThriftHiveMetastoreProcessor::process_drop_partition_by_name(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions");
   }
 
-  oprot->writeMessageBegin("drop_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_partition_by_name_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partition_by_name_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_with_auth", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_with_auth");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
   }
 
-  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_args args;
+  ThriftHiveMetastore_get_partitions_with_auth_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_with_auth", bytes);
   }
 
-  ThriftHiveMetastore_drop_partition_by_name_with_environment_context_result result;
+  ThriftHiveMetastore_get_partitions_with_auth_result result;
   try {
-    result.success = iface_->drop_partition_by_name_with_environment_context(args.db_name, args.tbl_name, args.part_name, args.deleteData, args.environment_context);
+    iface_->get_partitions_with_auth(result.success, args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
@@ -40011,11 +42361,11 @@ void ThriftHiveMetastoreProcessor::process_drop_partition_by_name_with_environme
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40024,44 +42374,44 @@ void ThriftHiveMetastoreProcessor::process_drop_partition_by_name_with_environme
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
   }
 
-  oprot->writeMessageBegin("drop_partition_by_name_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partition_by_name_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_with_auth", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_partitions_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_pspec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_partitions_req", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_pspec", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_partitions_req");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_pspec");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_partitions_req");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_pspec");
   }
 
-  ThriftHiveMetastore_drop_partitions_req_args args;
+  ThriftHiveMetastore_get_partitions_pspec_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_partitions_req", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_pspec", bytes);
   }
 
-  ThriftHiveMetastore_drop_partitions_req_result result;
+  ThriftHiveMetastore_get_partitions_pspec_result result;
   try {
-    iface_->drop_partitions_req(result.success, args.req);
+    iface_->get_partitions_pspec(result.success, args.db_name, args.tbl_name, args.max_parts);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
@@ -40071,11 +42421,11 @@ void ThriftHiveMetastoreProcessor::process_drop_partitions_req(int32_t seqid, ::
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_partitions_req");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_pspec");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40084,58 +42434,55 @@ void ThriftHiveMetastoreProcessor::process_drop_partitions_req(int32_t seqid, ::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_partitions_req");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_pspec");
   }
 
-  oprot->writeMessageBegin("drop_partitions_req", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_partitions_req", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_pspec", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_names", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_names");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_names");
   }
 
-  ThriftHiveMetastore_get_partition_args args;
+  ThriftHiveMetastore_get_partition_names_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_names", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_result result;
+  ThriftHiveMetastore_get_partition_names_result result;
   try {
-    iface_->get_partition(result.success, args.db_name, args.tbl_name, args.part_vals);
+    iface_->get_partition_names(result.success, args.db_name, args.tbl_name, args.max_parts);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_names");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40144,44 +42491,44 @@ void ThriftHiveMetastoreProcessor::process_get_partition(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_names");
   }
 
-  oprot->writeMessageBegin("get_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_names", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_exchange_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_ps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.exchange_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_ps", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.exchange_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_ps");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.exchange_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_ps");
   }
 
-  ThriftHiveMetastore_exchange_partition_args args;
+  ThriftHiveMetastore_get_partitions_ps_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.exchange_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_ps", bytes);
   }
 
-  ThriftHiveMetastore_exchange_partition_result result;
+  ThriftHiveMetastore_get_partitions_ps_result result;
   try {
-    iface_->exchange_partition(result.success, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name);
+    iface_->get_partitions_ps(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
@@ -40189,19 +42536,13 @@ void ThriftHiveMetastoreProcessor::process_exchange_partition(int32_t seqid, ::a
   } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (InvalidObjectException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (InvalidInputException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.exchange_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_ps");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40210,64 +42551,58 @@ void ThriftHiveMetastoreProcessor::process_exchange_partition(int32_t seqid, ::a
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.exchange_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_ps");
   }
 
-  oprot->writeMessageBegin("exchange_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.exchange_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_ps", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_exchange_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_ps_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.exchange_partitions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_ps_with_auth", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.exchange_partitions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.exchange_partitions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
   }
 
-  ThriftHiveMetastore_exchange_partitions_args args;
+  ThriftHiveMetastore_get_partitions_ps_with_auth_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.exchange_partitions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth", bytes);
   }
 
-  ThriftHiveMetastore_exchange_partitions_result result;
+  ThriftHiveMetastore_get_partitions_ps_with_auth_result result;
   try {
-    iface_->exchange_partitions(result.success, args.partitionSpecs, args.source_db, args.source_table_name, args.dest_db, args.dest_table_name);
+    iface_->get_partitions_ps_with_auth(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (InvalidObjectException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (InvalidInputException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.exchange_partitions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40276,44 +42611,44 @@ void ThriftHiveMetastoreProcessor::process_exchange_partitions(int32_t seqid, ::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.exchange_partitions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
   }
 
-  oprot->writeMessageBegin("exchange_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.exchange_partitions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition_names_ps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_with_auth", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_names_ps", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_with_auth");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_names_ps");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_with_auth");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_names_ps");
   }
 
-  ThriftHiveMetastore_get_partition_with_auth_args args;
+  ThriftHiveMetastore_get_partition_names_ps_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_with_auth", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_names_ps", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_with_auth_result result;
+  ThriftHiveMetastore_get_partition_names_ps_result result;
   try {
-    iface_->get_partition_with_auth(result.success, args.db_name, args.tbl_name, args.part_vals, args.user_name, args.group_names);
+    iface_->get_partition_names_ps(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
@@ -40323,11 +42658,11 @@ void ThriftHiveMetastoreProcessor::process_get_partition_with_auth(int32_t seqid
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_with_auth");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_names_ps");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40336,44 +42671,44 @@ void ThriftHiveMetastoreProcessor::process_get_partition_with_auth(int32_t seqid
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_with_auth");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_names_ps");
   }
 
-  oprot->writeMessageBegin("get_partition_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_with_auth", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_names_ps", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_filter", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_filter");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
   }
 
-  ThriftHiveMetastore_get_partition_by_name_args args;
+  ThriftHiveMetastore_get_partitions_by_filter_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_filter", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_by_name_result result;
+  ThriftHiveMetastore_get_partitions_by_filter_result result;
   try {
-    iface_->get_partition_by_name(result.success, args.db_name, args.tbl_name, args.part_name);
+    iface_->get_partitions_by_filter(result.success, args.db_name, args.tbl_name, args.filter, args.max_parts);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
@@ -40383,11 +42718,11 @@ void ThriftHiveMetastoreProcessor::process_get_partition_by_name(int32_t seqid,
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40396,58 +42731,58 @@ void ThriftHiveMetastoreProcessor::process_get_partition_by_name(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
   }
 
-  oprot->writeMessageBegin("get_partition_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_filter", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_num_partitions_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_num_partitions_by_filter", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
   }
 
-  ThriftHiveMetastore_get_partitions_args args;
+  ThriftHiveMetastore_get_num_partitions_by_filter_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_result result;
+  ThriftHiveMetastore_get_num_partitions_by_filter_result result;
   try {
-    iface_->get_partitions(result.success, args.db_name, args.tbl_name, args.max_parts);
+    result.success = iface_->get_num_partitions_by_filter(args.db_name, args.tbl_name, args.filter);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40456,58 +42791,58 @@ void ThriftHiveMetastoreProcessor::process_get_partitions(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
   }
 
-  oprot->writeMessageBegin("get_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_part_specs_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_with_auth", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_part_specs_by_filter", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_with_auth");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
   }
 
-  ThriftHiveMetastore_get_partitions_with_auth_args args;
+  ThriftHiveMetastore_get_part_specs_by_filter_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_with_auth", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_part_specs_by_filter", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_with_auth_result result;
+  ThriftHiveMetastore_get_part_specs_by_filter_result result;
   try {
-    iface_->get_partitions_with_auth(result.success, args.db_name, args.tbl_name, args.max_parts, args.user_name, args.group_names);
+    iface_->get_part_specs_by_filter(result.success, args.db_name, args.tbl_name, args.filter, args.max_parts);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40516,58 +42851,58 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_with_auth(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_with_auth");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
   }
 
-  oprot->writeMessageBegin("get_partitions_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_with_auth", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_part_specs_by_filter", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_pspec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_by_expr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_pspec", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_expr", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_pspec");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_expr");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_pspec");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
   }
 
-  ThriftHiveMetastore_get_partitions_pspec_args args;
+  ThriftHiveMetastore_get_partitions_by_expr_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_pspec", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_expr", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_pspec_result result;
+  ThriftHiveMetastore_get_partitions_by_expr_result result;
   try {
-    iface_->get_partitions_pspec(result.success, args.db_name, args.tbl_name, args.max_parts);
+    iface_->get_partitions_by_expr(result.success, args.req);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_pspec");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40576,55 +42911,58 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_pspec(int32_t seqid, :
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_pspec");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
   }
 
-  oprot->writeMessageBegin("get_partitions_pspec", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_pspec", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_expr", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_by_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_names", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_names", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_names");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_names");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_names");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_names");
   }
 
-  ThriftHiveMetastore_get_partition_names_args args;
+  ThriftHiveMetastore_get_partitions_by_names_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_names", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_names", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_names_result result;
+  ThriftHiveMetastore_get_partitions_by_names_result result;
   try {
-    iface_->get_partition_names(result.success, args.db_name, args.tbl_name, args.max_parts);
+    iface_->get_partitions_by_names(result.success, args.db_name, args.tbl_name, args.names);
     result.__isset.success = true;
-  } catch (MetaException &o2) {
+  } catch (MetaException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_names");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_names");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40633,58 +42971,57 @@ void ThriftHiveMetastoreProcessor::process_get_partition_names(int32_t seqid, ::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_names");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_names");
   }
 
-  oprot->writeMessageBegin("get_partition_names", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_names", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_names", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_ps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_ps", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_ps");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_ps");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partition");
   }
 
-  ThriftHiveMetastore_get_partitions_ps_args args;
+  ThriftHiveMetastore_alter_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_ps", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partition", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_ps_result result;
+  ThriftHiveMetastore_alter_partition_result result;
   try {
-    iface_->get_partitions_ps(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->alter_partition(args.db_name, args.tbl_name, args.new_part);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_ps");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40693,46 +43030,45 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_ps(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_ps");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partition");
   }
 
-  oprot->writeMessageBegin("get_partitions_ps", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_ps", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_ps_with_auth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_ps_with_auth", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partitions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partitions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partitions");
   }
 
-  ThriftHiveMetastore_get_partitions_ps_with_auth_args args;
+  ThriftHiveMetastore_alter_partitions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partitions", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_ps_with_auth_result result;
+  ThriftHiveMetastore_alter_partitions_result result;
   try {
-    iface_->get_partitions_ps_with_auth(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts, args.user_name, args.group_names);
-    result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+    iface_->alter_partitions(args.db_name, args.tbl_name, args.new_parts);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (MetaException &o2) {
@@ -40740,11 +43076,11 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_ps_with_auth(int32_t s
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partitions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40753,58 +43089,57 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_ps_with_auth(int32_t s
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partitions");
   }
 
-  oprot->writeMessageBegin("get_partitions_ps_with_auth", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_ps_with_auth", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partitions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition_names_ps(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_names_ps", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partition_with_environment_context", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_names_ps");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_names_ps");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
   }
 
-  ThriftHiveMetastore_get_partition_names_ps_args args;
+  ThriftHiveMetastore_alter_partition_with_environment_context_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_names_ps", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_names_ps_result result;
+  ThriftHiveMetastore_alter_partition_with_environment_context_result result;
   try {
-    iface_->get_partition_names_ps(result.success, args.db_name, args.tbl_name, args.part_vals, args.max_parts);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_names_ps");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40813,58 +43148,57 @@ void ThriftHiveMetastoreProcessor::process_get_partition_names_ps(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_names_ps");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
   }
 
-  oprot->writeMessageBegin("get_partition_names_ps", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_names_ps", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_rename_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_filter", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.rename_partition", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_filter");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.rename_partition");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.rename_partition");
   }
 
-  ThriftHiveMetastore_get_partitions_by_filter_args args;
+  ThriftHiveMetastore_rename_partition_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_filter", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.rename_partition", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_by_filter_result result;
+  ThriftHiveMetastore_rename_partition_result result;
   try {
-    iface_->get_partitions_by_filter(result.success, args.db_name, args.tbl_name, args.filter, args.max_parts);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.rename_partition");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40873,58 +43207,55 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_by_filter(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_filter");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.rename_partition");
   }
 
-  oprot->writeMessageBegin("get_partitions_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_filter", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.rename_partition", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_num_partitions_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_partition_name_has_valid_characters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_num_partitions_by_filter", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_has_valid_characters", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
   }
 
-  ThriftHiveMetastore_get_num_partitions_by_filter_args args;
+  ThriftHiveMetastore_partition_name_has_valid_characters_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters", bytes);
   }
 
-  ThriftHiveMetastore_get_num_partitions_by_filter_result result;
+  ThriftHiveMetastore_partition_name_has_valid_characters_result result;
   try {
-    result.success = iface_->get_num_partitions_by_filter(args.db_name, args.tbl_name, args.filter);
+    result.success = iface_->partition_name_has_valid_characters(args.part_vals, args.throw_exception);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40933,58 +43264,55 @@ void ThriftHiveMetastoreProcessor::process_get_num_partitions_by_filter(int32_t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
   }
 
-  oprot->writeMessageBegin("get_num_partitions_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_num_partitions_by_filter", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_part_specs_by_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_config_value(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_part_specs_by_filter", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_config_value", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_config_value");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_config_value");
   }
 
-  ThriftHiveMetastore_get_part_specs_by_filter_args args;
+  ThriftHiveMetastore_get_config_value_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_part_specs_by_filter", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_config_value", bytes);
   }
 
-  ThriftHiveMetastore_get_part_specs_by_filter_result result;
+  ThriftHiveMetastore_get_config_value_result result;
   try {
-    iface_->get_part_specs_by_filter(result.success, args.db_name, args.tbl_name, args.filter, args.max_parts);
+    iface_->get_config_value(result.success, args.name, args.defaultValue);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (ConfigValSecurityException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_config_value");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -40993,58 +43321,55 @@ void ThriftHiveMetastoreProcessor::process_get_part_specs_by_filter(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_part_specs_by_filter");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_config_value");
   }
 
-  oprot->writeMessageBegin("get_part_specs_by_filter", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_part_specs_by_filter", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_config_value", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_by_expr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_partition_name_to_vals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_expr", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_to_vals", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_expr");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_to_vals");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_to_vals");
   }
 
-  ThriftHiveMetastore_get_partitions_by_expr_args args;
+  ThriftHiveMetastore_partition_name_to_vals_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_expr", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_to_vals", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_by_expr_result result;
+  ThriftHiveMetastore_partition_name_to_vals_result result;
   try {
-    iface_->get_partitions_by_expr(result.success, args.req);
+    iface_->partition_name_to_vals(result.success, args.part_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_to_vals");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41053,58 +43378,55 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_by_expr(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_expr");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_to_vals");
   }
 
-  oprot->writeMessageBegin("get_partitions_by_expr", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_expr", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_to_vals", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_by_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_partition_name_to_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_by_names", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_to_spec", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_by_names");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_to_spec");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_by_names");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_to_spec");
   }
 
-  ThriftHiveMetastore_get_partitions_by_names_args args;
+  ThriftHiveMetastore_partition_name_to_spec_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_by_names", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_to_spec", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_by_names_result result;
+  ThriftHiveMetastore_partition_name_to_spec_result result;
   try {
-    iface_->get_partitions_by_names(result.success, args.db_name, args.tbl_name, args.names);
+    iface_->partition_name_to_spec(result.success, args.part_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_by_names");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_to_spec");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41113,57 +43435,69 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_by_names(int32_t seqid
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_by_names");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_to_spec");
   }
 
-  oprot->writeMessageBegin("get_partitions_by_names", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_by_names", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_to_spec", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_markPartitionForEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.markPartitionForEvent", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.markPartitionForEvent");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.markPartitionForEvent");
   }
 
-  ThriftHiveMetastore_alter_partition_args args;
+  ThriftHiveMetastore_markPartitionForEvent_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.markPartitionForEvent", bytes);
   }
 
-  ThriftHiveMetastore_alter_partition_result result;
+  ThriftHiveMetastore_markPartitionForEvent_result result;
   try {
-    iface_->alter_partition(args.db_name, args.tbl_name, args.new_part);
-  } catch (InvalidOperationException &o1) {
+    iface_->markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType);
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (UnknownTableException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
+  } catch (UnknownPartitionException &o5) {
+    result.o5 = o5;
+    result.__isset.o5 = true;
+  } catch (InvalidPartitionException &o6) {
+    result.o6 = o6;
+    result.__isset.o6 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.markPartitionForEvent");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41172,57 +43506,70 @@ void ThriftHiveMetastoreProcessor::process_alter_partition(int32_t seqid, ::apac
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.markPartitionForEvent");
   }
 
-  oprot->writeMessageBegin("alter_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.markPartitionForEvent", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_partitions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_isPartitionMarkedForEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partitions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.isPartitionMarkedForEvent", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partitions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partitions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
   }
 
-  ThriftHiveMetastore_alter_partitions_args args;
+  ThriftHiveMetastore_isPartitionMarkedForEvent_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partitions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent", bytes);
   }
 
-  ThriftHiveMetastore_alter_partitions_result result;
+  ThriftHiveMetastore_isPartitionMarkedForEvent_result result;
   try {
-    iface_->alter_partitions(args.db_name, args.tbl_name, args.new_parts);
-  } catch (InvalidOperationException &o1) {
+    result.success = iface_->isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (UnknownDBException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (UnknownTableException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
+  } catch (UnknownPartitionException &o5) {
+    result.o5 = o5;
+    result.__isset.o5 = true;
+  } catch (InvalidPartitionException &o6) {
+    result.o6 = o6;
+    result.__isset.o6 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partitions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41231,57 +43578,61 @@ void ThriftHiveMetastoreProcessor::process_alter_partitions(int32_t seqid, ::apa
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partitions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
   }
 
-  oprot->writeMessageBegin("alter_partitions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partitions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_partition_with_environment_context(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_partition_with_environment_context", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_index", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_index");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_index");
   }
 
-  ThriftHiveMetastore_alter_partition_with_environment_context_args args;
+  ThriftHiveMetastore_add_index_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_index", bytes);
   }
 
-  ThriftHiveMetastore_alter_partition_with_environment_context_result result;
+  ThriftHiveMetastore_add_index_result result;
   try {
-    iface_->alter_partition_with_environment_context(args.db_name, args.tbl_name, args.new_part, args.environment_context);
-  } catch (InvalidOperationException &o1) {
+    iface_->add_index(result.success, args.new_index, args.index_table);
+    result.__isset.success = true;
+  } catch (InvalidObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (AlreadyExistsException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_index");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_index", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41290,44 +43641,44 @@ void ThriftHiveMetastoreProcessor::process_alter_partition_with_environment_cont
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_index");
   }
 
-  oprot->writeMessageBegin("alter_partition_with_environment_context", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_index", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_partition_with_environment_context", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_index", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_rename_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.rename_partition", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_index", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.rename_partition");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_index");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.rename_partition");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_index");
   }
 
-  ThriftHiveMetastore_rename_partition_args args;
+  ThriftHiveMetastore_alter_index_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.rename_partition", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_index", bytes);
   }
 
-  ThriftHiveMetastore_rename_partition_result result;
+  ThriftHiveMetastore_alter_index_result result;
   try {
-    iface_->rename_partition(args.db_name, args.tbl_name, args.part_vals, args.new_part);
+    iface_->alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx);
   } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
@@ -41336,11 +43687,11 @@ void ThriftHiveMetastoreProcessor::process_rename_partition(int32_t seqid, ::apa
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.rename_partition");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_index");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41349,55 +43700,58 @@ void ThriftHiveMetastoreProcessor::process_rename_partition(int32_t seqid, ::apa
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.rename_partition");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_index");
   }
 
-  oprot->writeMessageBegin("rename_partition", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.rename_partition", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_index", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_partition_name_has_valid_characters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_index_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_has_valid_characters", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_index_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_index_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_index_by_name");
   }
 
-  ThriftHiveMetastore_partition_name_has_valid_characters_args args;
+  ThriftHiveMetastore_drop_index_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_index_by_name", bytes);
   }
 
-  ThriftHiveMetastore_partition_name_has_valid_characters_result result;
+  ThriftHiveMetastore_drop_index_by_name_result result;
   try {
-    result.success = iface_->partition_name_has_valid_characters(args.part_vals, args.throw_exception);
+    result.success = iface_->drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_index_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41406,55 +43760,58 @@ void ThriftHiveMetastoreProcessor::process_partition_name_has_valid_characters(i
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_index_by_name");
   }
 
-  oprot->writeMessageBegin("partition_name_has_valid_characters", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_has_valid_characters", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_index_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_config_value(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_index_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_config_value", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_index_by_name", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_config_value");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_index_by_name");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_config_value");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_index_by_name");
   }
 
-  ThriftHiveMetastore_get_config_value_args args;
+  ThriftHiveMetastore_get_index_by_name_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_config_value", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_index_by_name", bytes);
   }
 
-  ThriftHiveMetastore_get_config_value_result result;
+  ThriftHiveMetastore_get_index_by_name_result result;
   try {
-    iface_->get_config_value(result.success, args.name, args.defaultValue);
+    iface_->get_index_by_name(result.success, args.db_name, args.tbl_name, args.index_name);
     result.__isset.success = true;
-  } catch (ConfigValSecurityException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (NoSuchObjectException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_config_value");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_index_by_name");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41463,55 +43820,58 @@ void ThriftHiveMetastoreProcessor::process_get_config_value(int32_t seqid, ::apa
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_config_value");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_index_by_name");
   }
 
-  oprot->writeMessageBegin("get_config_value", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_config_value", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_index_by_name", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_partition_name_to_vals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_indexes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_to_vals", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_indexes", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_to_vals");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_indexes");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_to_vals");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_indexes");
   }
 
-  ThriftHiveMetastore_partition_name_to_vals_args args;
+  ThriftHiveMetastore_get_indexes_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_to_vals", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_indexes", bytes);
   }
 
-  ThriftHiveMetastore_partition_name_to_vals_result result;
+  ThriftHiveMetastore_get_indexes_result result;
   try {
-    iface_->partition_name_to_vals(result.success, args.part_name);
+    iface_->get_indexes(result.success, args.db_name, args.tbl_name, args.max_indexes);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_to_vals");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_indexes");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41520,55 +43880,55 @@ void ThriftHiveMetastoreProcessor::process_partition_name_to_vals(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_to_vals");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_indexes");
   }
 
-  oprot->writeMessageBegin("partition_name_to_vals", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_to_vals", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_indexes", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_partition_name_to_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_index_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.partition_name_to_spec", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_index_names", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.partition_name_to_spec");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_index_names");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.partition_name_to_spec");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_index_names");
   }
 
-  ThriftHiveMetastore_partition_name_to_spec_args args;
+  ThriftHiveMetastore_get_index_names_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.partition_name_to_spec", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_index_names", bytes);
   }
 
-  ThriftHiveMetastore_partition_name_to_spec_result result;
+  ThriftHiveMetastore_get_index_names_result result;
   try {
-    iface_->partition_name_to_spec(result.success, args.part_name);
+    iface_->get_index_names(result.success, args.db_name, args.tbl_name, args.max_indexes);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.partition_name_to_spec");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_index_names");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41577,69 +43937,64 @@ void ThriftHiveMetastoreProcessor::process_partition_name_to_spec(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.partition_name_to_spec");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_index_names");
   }
 
-  oprot->writeMessageBegin("partition_name_to_spec", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.partition_name_to_spec", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_index_names", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_markPartitionForEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_update_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.markPartitionForEvent", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.update_table_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.markPartitionForEvent");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.update_table_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.markPartitionForEvent");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.update_table_column_statistics");
   }
 
-  ThriftHiveMetastore_markPartitionForEvent_args args;
+  ThriftHiveMetastore_update_table_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.markPartitionForEvent", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.update_table_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_markPartitionForEvent_result result;
+  ThriftHiveMetastore_update_table_column_statistics_result result;
   try {
-    iface_->markPartitionForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType);
-  } catch (MetaException &o1) {
+    result.success = iface_->update_table_column_statistics(args.stats_obj);
+    result.__isset.success = true;
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (InvalidObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (UnknownTableException &o4) {
+  } catch (InvalidInputException &o4) {
     result.o4 = o4;
     result.__isset.o4 = true;
-  } catch (UnknownPartitionException &o5) {
-    result.o5 = o5;
-    result.__isset.o5 = true;
-  } catch (InvalidPartitionException &o6) {
-    result.o6 = o6;
-    result.__isset.o6 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.markPartitionForEvent");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.update_table_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41648,70 +44003,64 @@ void ThriftHiveMetastoreProcessor::process_markPartitionForEvent(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.markPartitionForEvent");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.update_table_column_statistics");
   }
 
-  oprot->writeMessageBegin("markPartitionForEvent", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.markPartitionForEvent", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.update_table_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_isPartitionMarkedForEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_update_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.isPartitionMarkedForEvent", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.update_partition_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.update_partition_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
   }
 
-  ThriftHiveMetastore_isPartitionMarkedForEvent_args args;
+  ThriftHiveMetastore_update_partition_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.update_partition_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_isPartitionMarkedForEvent_result result;
+  ThriftHiveMetastore_update_partition_column_statistics_result result;
   try {
-    result.success = iface_->isPartitionMarkedForEvent(args.db_name, args.tbl_name, args.part_vals, args.eventType);
+    result.success = iface_->update_partition_column_statistics(args.stats_obj);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (InvalidObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (UnknownDBException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (UnknownTableException &o4) {
+  } catch (InvalidInputException &o4) {
     result.o4 = o4;
     result.__isset.o4 = true;
-  } catch (UnknownPartitionException &o5) {
-    result.o5 = o5;
-    result.__isset.o5 = true;
-  } catch (InvalidPartitionException &o6) {
-    result.o6 = o6;
-    result.__isset.o6 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41720,61 +44069,64 @@ void ThriftHiveMetastoreProcessor::process_isPartitionMarkedForEvent(int32_t seq
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
   }
 
-  oprot->writeMessageBegin("isPartitionMarkedForEvent", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.isPartitionMarkedForEvent", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.update_partition_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_add_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_index", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_index");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_index");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_column_statistics");
   }
 
-  ThriftHiveMetastore_add_index_args args;
+  ThriftHiveMetastore_get_table_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_index", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_add_index_result result;
+  ThriftHiveMetastore_get_table_column_statistics_result result;
   try {
-    iface_->add_index(result.success, args.new_index, args.index_table);
+    iface_->get_table_column_statistics(result.success, args.db_name, args.tbl_name, args.col_name);
     result.__isset.success = true;
-  } catch (InvalidObjectException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (AlreadyExistsException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (InvalidInputException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
+  } catch (InvalidObjectException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_index");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("add_index", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41783,57 +44135,64 @@ void ThriftHiveMetastoreProcessor::process_add_index(int32_t seqid, ::apache::th
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_index");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_column_statistics");
   }
 
-  oprot->writeMessageBegin("add_index", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_index", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_index(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_index", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_index");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_index");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
   }
 
-  ThriftHiveMetastore_alter_index_args args;
+  ThriftHiveMetastore_get_partition_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_index", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_alter_index_result result;
+  ThriftHiveMetastore_get_partition_column_statistics_result result;
   try {
-    iface_->alter_index(args.dbname, args.base_tbl_name, args.idx_name, args.new_idx);
-  } catch (InvalidOperationException &o1) {
+    iface_->get_partition_column_statistics(result.success, args.db_name, args.tbl_name, args.part_name, args.col_name);
+    result.__isset.success = true;
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (InvalidInputException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (InvalidObjectException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_index");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41842,44 +44201,44 @@ void ThriftHiveMetastoreProcessor::process_alter_index(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_index");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
   }
 
-  oprot->writeMessageBegin("alter_index", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_index", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_index_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_table_statistics_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_index_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_statistics_req", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_index_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_statistics_req");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_index_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_statistics_req");
   }
 
-  ThriftHiveMetastore_drop_index_by_name_args args;
+  ThriftHiveMetastore_get_table_statistics_req_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_index_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_statistics_req", bytes);
   }
 
-  ThriftHiveMetastore_drop_index_by_name_result result;
+  ThriftHiveMetastore_get_table_statistics_req_result result;
   try {
-    result.success = iface_->drop_index_by_name(args.db_name, args.tbl_name, args.index_name, args.deleteData);
+    iface_->get_table_statistics_req(result.success, args.request);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
@@ -41889,11 +44248,11 @@ void ThriftHiveMetastoreProcessor::process_drop_index_by_name(int32_t seqid, ::a
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_index_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_statistics_req");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41902,58 +44261,58 @@ void ThriftHiveMetastoreProcessor::process_drop_index_by_name(int32_t seqid, ::a
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_index_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_statistics_req");
   }
 
-  oprot->writeMessageBegin("drop_index_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_index_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_statistics_req", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_index_by_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_partitions_statistics_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_index_by_name", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_statistics_req", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_index_by_name");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_index_by_name");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
   }
 
-  ThriftHiveMetastore_get_index_by_name_args args;
+  ThriftHiveMetastore_get_partitions_statistics_req_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_index_by_name", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_statistics_req", bytes);
   }
 
-  ThriftHiveMetastore_get_index_by_name_result result;
+  ThriftHiveMetastore_get_partitions_statistics_req_result result;
   try {
-    iface_->get_index_by_name(result.success, args.db_name, args.tbl_name, args.index_name);
+    iface_->get_partitions_statistics_req(result.success, args.request);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_index_by_name");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -41962,44 +44321,44 @@ void ThriftHiveMetastoreProcessor::process_get_index_by_name(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_index_by_name");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
   }
 
-  oprot->writeMessageBegin("get_index_by_name", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_index_by_name", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_statistics_req", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_indexes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_aggr_stats_for(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_indexes", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_aggr_stats_for", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_indexes");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_aggr_stats_for");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_indexes");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
   }
 
-  ThriftHiveMetastore_get_indexes_args args;
+  ThriftHiveMetastore_get_aggr_stats_for_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_indexes", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_aggr_stats_for", bytes);
   }
 
-  ThriftHiveMetastore_get_indexes_result result;
+  ThriftHiveMetastore_get_aggr_stats_for_result result;
   try {
-    iface_->get_indexes(result.success, args.db_name, args.tbl_name, args.max_indexes);
+    iface_->get_aggr_stats_for(result.success, args.request);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
@@ -42009,11 +44368,11 @@ void ThriftHiveMetastoreProcessor::process_get_indexes(int32_t seqid, ::apache::
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_indexes");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42022,55 +44381,64 @@ void ThriftHiveMetastoreProcessor::process_get_indexes(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_indexes");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
   }
 
-  oprot->writeMessageBegin("get_indexes", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_indexes", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_aggr_stats_for", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_index_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_set_aggr_stats_for(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_index_names", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.set_aggr_stats_for", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_index_names");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.set_aggr_stats_for");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_index_names");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
   }
 
-  ThriftHiveMetastore_get_index_names_args args;
+  ThriftHiveMetastore_set_aggr_stats_for_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_index_names", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.set_aggr_stats_for", bytes);
   }
 
-  ThriftHiveMetastore_get_index_names_result result;
+  ThriftHiveMetastore_set_aggr_stats_for_result result;
   try {
-    iface_->get_index_names(result.success, args.db_name, args.tbl_name, args.max_indexes);
+    result.success = iface_->set_aggr_stats_for(args.request);
     result.__isset.success = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o1) {
+    result.o1 = o1;
+    result.__isset.o1 = true;
+  } catch (InvalidObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
+  } catch (MetaException &o3) {
+    result.o3 = o3;
+    result.__isset.o3 = true;
+  } catch (InvalidInputException &o4) {
+    result.o4 = o4;
+    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_index_names");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42079,52 +44447,52 @@ void ThriftHiveMetastoreProcessor::process_get_index_names(int32_t seqid, ::apac
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_index_names");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
   }
 
-  oprot->writeMessageBegin("get_index_names", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_index_names", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.set_aggr_stats_for", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_update_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_delete_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.update_table_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.delete_partition_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.update_table_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.update_table_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
   }
 
-  ThriftHiveMetastore_update_table_column_statistics_args args;
+  ThriftHiveMetastore_delete_partition_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.update_table_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.delete_partition_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_update_table_column_statistics_result result;
+  ThriftHiveMetastore_delete_partition_column_statistics_result result;
   try {
-    result.success = iface_->update_table_column_statistics(args.stats_obj);
+    result.success = iface_->delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (InvalidObjectException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
   } catch (InvalidInputException &o4) {
@@ -42132,11 +44500,11 @@ void ThriftHiveMetastoreProcessor::process_update_table_column_statistics(int32_
     result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.update_table_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42145,52 +44513,52 @@ void ThriftHiveMetastoreProcessor::process_update_table_column_statistics(int32_
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.update_table_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
   }
 
-  oprot->writeMessageBegin("update_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.update_table_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.delete_partition_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_update_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_delete_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.update_partition_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.delete_table_column_statistics", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.update_partition_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.delete_table_column_statistics");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
   }
 
-  ThriftHiveMetastore_update_partition_column_statistics_args args;
+  ThriftHiveMetastore_delete_table_column_statistics_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.update_partition_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.delete_table_column_statistics", bytes);
   }
 
-  ThriftHiveMetastore_update_partition_column_statistics_result result;
+  ThriftHiveMetastore_delete_table_column_statistics_result result;
   try {
-    result.success = iface_->update_partition_column_statistics(args.stats_obj);
+    result.success = iface_->delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name);
     result.__isset.success = true;
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
+  } catch (MetaException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (MetaException &o3) {
+  } catch (InvalidObjectException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
   } catch (InvalidInputException &o4) {
@@ -42198,11 +44566,11 @@ void ThriftHiveMetastoreProcessor::process_update_partition_column_statistics(in
     result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42211,64 +44579,63 @@ void ThriftHiveMetastoreProcessor::process_update_partition_column_statistics(in
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.update_partition_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
   }
 
-  oprot->writeMessageBegin("update_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.update_partition_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.delete_table_column_statistics", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_create_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_function", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_function");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_function");
   }
 
-  ThriftHiveMetastore_get_table_column_statistics_args args;
+  ThriftHiveMetastore_create_function_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_function", bytes);
   }
 
-  ThriftHiveMetastore_get_table_column_statistics_result result;
+  ThriftHiveMetastore_create_function_result result;
   try {
-    iface_->get_table_column_statistics(result.success, args.db_name, args.tbl_name, args.col_name);
-    result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+    iface_->create_function(args.func);
+  } catch (AlreadyExistsException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (InvalidObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
-  } catch (InvalidInputException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (InvalidObjectException &o4) {
+  } catch (NoSuchObjectException &o4) {
     result.o4 = o4;
     result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_function");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("create_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42277,64 +44644,57 @@ void ThriftHiveMetastoreProcessor::process_get_table_column_statistics(int32_t s
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_function");
   }
 
-  oprot->writeMessageBegin("get_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("create_function", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_function", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partition_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_function", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partition_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_function");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_function");
   }
 
-  ThriftHiveMetastore_get_partition_column_statistics_args args;
+  ThriftHiveMetastore_drop_function_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partition_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_function", bytes);
   }
 
-  ThriftHiveMetastore_get_partition_column_statistics_result result;
+  ThriftHiveMetastore_drop_function_result result;
   try {
-    iface_->get_partition_column_statistics(result.success, args.db_name, args.tbl_name, args.part_name, args.col_name);
-    result.__isset.success = true;
+    iface_->drop_function(args.dbName, args.funcName);
   } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (InvalidInputException &o3) {
+  } catch (MetaException &o3) {
     result.o3 = o3;
     result.__isset.o3 = true;
-  } catch (InvalidObjectException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_function");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42343,46 +44703,45 @@ void ThriftHiveMetastoreProcessor::process_get_partition_column_statistics(int32
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partition_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_function");
   }
 
-  oprot->writeMessageBegin("get_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partition_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_function", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_table_statistics_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_alter_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_table_statistics_req", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_function", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_table_statistics_req");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_function");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_table_statistics_req");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_function");
   }
 
-  ThriftHiveMetastore_get_table_statistics_req_args args;
+  ThriftHiveMetastore_alter_function_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_table_statistics_req", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_function", bytes);
   }
 
-  ThriftHiveMetastore_get_table_statistics_req_result result;
+  ThriftHiveMetastore_alter_function_result result;
   try {
-    iface_->get_table_statistics_req(result.success, args.request);
-    result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+    iface_->alter_function(args.dbName, args.funcName, args.newFunc);
+  } catch (InvalidOperationException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (MetaException &o2) {
@@ -42390,11 +44749,11 @@ void ThriftHiveMetastoreProcessor::process_get_table_statistics_req(int32_t seqi
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_table_statistics_req");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_function");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42403,58 +44762,55 @@ void ThriftHiveMetastoreProcessor::process_get_table_statistics_req(int32_t seqi
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_table_statistics_req");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_function");
   }
 
-  oprot->writeMessageBegin("get_table_statistics_req", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_table_statistics_req", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_function", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_partitions_statistics_req(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_partitions_statistics_req", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_functions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_functions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_functions");
   }
 
-  ThriftHiveMetastore_get_partitions_statistics_req_args args;
+  ThriftHiveMetastore_get_functions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_partitions_statistics_req", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_functions", bytes);
   }
 
-  ThriftHiveMetastore_get_partitions_statistics_req_result result;
+  ThriftHiveMetastore_get_functions_result result;
   try {
-    iface_->get_partitions_statistics_req(result.success, args.request);
+    iface_->get_functions(result.success, args.dbName, args.pattern);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_functions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42463,58 +44819,58 @@ void ThriftHiveMetastoreProcessor::process_get_partitions_statistics_req(int32_t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_partitions_statistics_req");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_functions");
   }
 
-  oprot->writeMessageBegin("get_partitions_statistics_req", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_partitions_statistics_req", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_functions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_aggr_stats_for(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_aggr_stats_for", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_function", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_aggr_stats_for");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_function");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_function");
   }
 
-  ThriftHiveMetastore_get_aggr_stats_for_args args;
+  ThriftHiveMetastore_get_function_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_aggr_stats_for", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_function", bytes);
   }
 
-  ThriftHiveMetastore_get_aggr_stats_for_result result;
+  ThriftHiveMetastore_get_function_result result;
   try {
-    iface_->get_aggr_stats_for(result.success, args.request);
+    iface_->get_function(result.success, args.dbName, args.funcName);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
+  } catch (NoSuchObjectException &o2) {
     result.o2 = o2;
     result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_function");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42523,64 +44879,55 @@ void ThriftHiveMetastoreProcessor::process_get_aggr_stats_for(int32_t seqid, ::a
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_aggr_stats_for");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_function");
   }
 
-  oprot->writeMessageBegin("get_aggr_stats_for", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_function", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_aggr_stats_for", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_function", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_set_aggr_stats_for(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_all_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.set_aggr_stats_for", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_functions", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.set_aggr_stats_for");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_functions");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_functions");
   }
 
-  ThriftHiveMetastore_set_aggr_stats_for_args args;
+  ThriftHiveMetastore_get_all_functions_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.set_aggr_stats_for", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
   }
 
-  ThriftHiveMetastore_set_aggr_stats_for_result result;
+  ThriftHiveMetastore_get_all_functions_result result;
   try {
-    result.success = iface_->set_aggr_stats_for(args.request);
+    iface_->get_all_functions(result.success);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (InvalidInputException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_functions");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42589,64 +44936,55 @@ void ThriftHiveMetastoreProcessor::process_set_aggr_stats_for(int32_t seqid, ::a
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.set_aggr_stats_for");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_functions");
   }
 
-  oprot->writeMessageBegin("set_aggr_stats_for", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.set_aggr_stats_for", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_delete_partition_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_create_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.delete_partition_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_role");
   }
 
-  ThriftHiveMetastore_delete_partition_column_statistics_args args;
+  ThriftHiveMetastore_create_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.delete_partition_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_role", bytes);
   }
 
-  ThriftHiveMetastore_delete_partition_column_statistics_result result;
+  ThriftHiveMetastore_create_role_result result;
   try {
-    result.success = iface_->delete_partition_column_statistics(args.db_name, args.tbl_name, args.part_name, args.col_name);
+    result.success = iface_->create_role(args.role);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (InvalidObjectException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (InvalidInputException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("create_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42655,64 +44993,55 @@ void ThriftHiveMetastoreProcessor::process_delete_partition_column_statistics(in
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.delete_partition_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_role");
   }
 
-  oprot->writeMessageBegin("delete_partition_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("create_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.delete_partition_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_delete_table_column_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_drop_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.delete_table_column_statistics", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.delete_table_column_statistics");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_role");
   }
 
-  ThriftHiveMetastore_delete_table_column_statistics_args args;
+  ThriftHiveMetastore_drop_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.delete_table_column_statistics", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_role", bytes);
   }
 
-  ThriftHiveMetastore_delete_table_column_statistics_result result;
+  ThriftHiveMetastore_drop_role_result result;
   try {
-    result.success = iface_->delete_table_column_statistics(args.db_name, args.tbl_name, args.col_name);
+    result.success = iface_->drop_role(args.role_name);
     result.__isset.success = true;
-  } catch (NoSuchObjectException &o1) {
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (InvalidObjectException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (InvalidInputException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42721,63 +45050,55 @@ void ThriftHiveMetastoreProcessor::process_delete_table_column_statistics(int32_
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.delete_table_column_statistics");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_role");
   }
 
-  oprot->writeMessageBegin("delete_table_column_statistics", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.delete_table_column_statistics", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_role_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_function", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_role_names", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_function");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_role_names");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_function");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_role_names");
   }
 
-  ThriftHiveMetastore_create_function_args args;
+  ThriftHiveMetastore_get_role_names_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_function", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_role_names", bytes);
   }
 
-  ThriftHiveMetastore_create_function_result result;
+  ThriftHiveMetastore_get_role_names_result result;
   try {
-    iface_->create_function(args.func);
-  } catch (AlreadyExistsException &o1) {
+    iface_->get_role_names(result.success);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (InvalidObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
-  } catch (NoSuchObjectException &o4) {
-    result.o4 = o4;
-    result.__isset.o4 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_function");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_role_names");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42786,57 +45107,55 @@ void ThriftHiveMetastoreProcessor::process_create_function(int32_t seqid, ::apac
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_function");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_role_names");
   }
 
-  oprot->writeMessageBegin("create_function", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_function", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_role_names", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_grant_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_function", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_function");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_function");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_role");
   }
 
-  ThriftHiveMetastore_drop_function_args args;
+  ThriftHiveMetastore_grant_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_function", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_role", bytes);
   }
 
-  ThriftHiveMetastore_drop_function_result result;
+  ThriftHiveMetastore_grant_role_result result;
   try {
-    iface_->drop_function(args.dbName, args.funcName);
-  } catch (NoSuchObjectException &o1) {
+    result.success = iface_->grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o3) {
-    result.o3 = o3;
-    result.__isset.o3 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_function");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42845,57 +45164,55 @@ void ThriftHiveMetastoreProcessor::process_drop_function(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_function");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_role");
   }
 
-  oprot->writeMessageBegin("drop_function", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_function", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_alter_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_revoke_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.alter_function", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.revoke_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.alter_function");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.revoke_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.alter_function");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.revoke_role");
   }
 
-  ThriftHiveMetastore_alter_function_args args;
+  ThriftHiveMetastore_revoke_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.alter_function", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.revoke_role", bytes);
   }
 
-  ThriftHiveMetastore_alter_function_result result;
+  ThriftHiveMetastore_revoke_role_result result;
   try {
-    iface_->alter_function(args.dbName, args.funcName, args.newFunc);
-  } catch (InvalidOperationException &o1) {
+    result.success = iface_->revoke_role(args.role_name, args.principal_name, args.principal_type);
+    result.__isset.success = true;
+  } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (MetaException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.alter_function");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.revoke_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42904,55 +45221,55 @@ void ThriftHiveMetastoreProcessor::process_alter_function(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.alter_function");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.revoke_role");
   }
 
-  oprot->writeMessageBegin("alter_function", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.alter_function", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.revoke_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_list_roles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_functions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.list_roles", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_functions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.list_roles");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_functions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.list_roles");
   }
 
-  ThriftHiveMetastore_get_functions_args args;
+  ThriftHiveMetastore_list_roles_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_functions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.list_roles", bytes);
   }
 
-  ThriftHiveMetastore_get_functions_result result;
+  ThriftHiveMetastore_list_roles_result result;
   try {
-    iface_->get_functions(result.success, args.dbName, args.pattern);
+    iface_->list_roles(result.success, args.principal_name, args.principal_type);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_functions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.list_roles");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -42961,58 +45278,55 @@ void ThriftHiveMetastoreProcessor::process_get_functions(int32_t seqid, ::apache
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_functions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.list_roles");
   }
 
-  oprot->writeMessageBegin("get_functions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_functions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.list_roles", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_function(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_grant_revoke_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_function", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_revoke_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_function");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_revoke_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_function");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_revoke_role");
   }
 
-  ThriftHiveMetastore_get_function_args args;
+  ThriftHiveMetastore_grant_revoke_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_function", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_revoke_role", bytes);
   }
 
-  ThriftHiveMetastore_get_function_result result;
+  ThriftHiveMetastore_grant_revoke_role_result result;
   try {
-    iface_->get_function(result.success, args.dbName, args.funcName);
+    iface_->grant_revoke_role(result.success, args.request);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
-  } catch (NoSuchObjectException &o2) {
-    result.o2 = o2;
-    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_function");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_revoke_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_function", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43021,55 +45335,55 @@ void ThriftHiveMetastoreProcessor::process_get_function(int32_t seqid, ::apache:
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_function");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_revoke_role");
   }
 
-  oprot->writeMessageBegin("get_function", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_function", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_revoke_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_all_functions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_principals_in_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_functions", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_principals_in_role", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_functions");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_principals_in_role");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_functions");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_principals_in_role");
   }
 
-  ThriftHiveMetastore_get_all_functions_args args;
+  ThriftHiveMetastore_get_principals_in_role_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_principals_in_role", bytes);
   }
 
-  ThriftHiveMetastore_get_all_functions_result result;
+  ThriftHiveMetastore_get_principals_in_role_result result;
   try {
-    iface_->get_all_functions(result.success);
+    iface_->get_principals_in_role(result.success, args.request);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_functions");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_principals_in_role");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43078,55 +45392,55 @@ void ThriftHiveMetastoreProcessor::process_get_all_functions(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_functions");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_principals_in_role");
   }
 
-  oprot->writeMessageBegin("get_all_functions", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_functions", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_principals_in_role", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_create_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_role_grants_for_principal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.create_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_role_grants_for_principal", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.create_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.create_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
   }
 
-  ThriftHiveMetastore_create_role_args args;
+  ThriftHiveMetastore_get_role_grants_for_principal_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.create_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_role_grants_for_principal", bytes);
   }
 
-  ThriftHiveMetastore_create_role_result result;
+  ThriftHiveMetastore_get_role_grants_for_principal_result result;
   try {
-    result.success = iface_->create_role(args.role);
+    iface_->get_role_grants_for_principal(result.success, args.request);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.create_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("create_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43135,55 +45449,55 @@ void ThriftHiveMetastoreProcessor::process_create_role(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.create_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
   }
 
-  oprot->writeMessageBegin("create_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.create_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_role_grants_for_principal", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_drop_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_privilege_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.drop_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_privilege_set", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.drop_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_privilege_set");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.drop_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_privilege_set");
   }
 
-  ThriftHiveMetastore_drop_role_args args;
+  ThriftHiveMetastore_get_privilege_set_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.drop_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_privilege_set", bytes);
   }
 
-  ThriftHiveMetastore_drop_role_result result;
+  ThriftHiveMetastore_get_privilege_set_result result;
   try {
-    result.success = iface_->drop_role(args.role_name);
+    iface_->get_privilege_set(result.success, args.hiveObject, args.user_name, args.group_names);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.drop_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_privilege_set");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43192,55 +45506,55 @@ void ThriftHiveMetastoreProcessor::process_drop_role(int32_t seqid, ::apache::th
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.drop_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_privilege_set");
   }
 
-  oprot->writeMessageBegin("drop_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.drop_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_privilege_set", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_role_names(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_list_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_role_names", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.list_privileges", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_role_names");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.list_privileges");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_role_names");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.list_privileges");
   }
 
-  ThriftHiveMetastore_get_role_names_args args;
+  ThriftHiveMetastore_list_privileges_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_role_names", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.list_privileges", bytes);
   }
 
-  ThriftHiveMetastore_get_role_names_result result;
+  ThriftHiveMetastore_list_privileges_result result;
   try {
-    iface_->get_role_names(result.success);
+    iface_->list_privileges(result.success, args.principal_name, args.principal_type, args.hiveObject);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_role_names");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.list_privileges");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43249,55 +45563,55 @@ void ThriftHiveMetastoreProcessor::process_get_role_names(int32_t seqid, ::apach
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_role_names");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.list_privileges");
   }
 
-  oprot->writeMessageBegin("get_role_names", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_role_names", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.list_privileges", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_grant_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_grant_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_privileges", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_privileges");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_privileges");
   }
 
-  ThriftHiveMetastore_grant_role_args args;
+  ThriftHiveMetastore_grant_privileges_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_privileges", bytes);
   }
 
-  ThriftHiveMetastore_grant_role_result result;
+  ThriftHiveMetastore_grant_privileges_result result;
   try {
-    result.success = iface_->grant_role(args.role_name, args.principal_name, args.principal_type, args.grantor, args.grantorType, args.grant_option);
+    result.success = iface_->grant_privileges(args.privileges);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_privileges");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43306,55 +45620,55 @@ void ThriftHiveMetastoreProcessor::process_grant_role(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_privileges");
   }
 
-  oprot->writeMessageBegin("grant_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_privileges", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_revoke_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_revoke_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.revoke_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.revoke_privileges", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.revoke_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.revoke_privileges");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.revoke_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.revoke_privileges");
   }
 
-  ThriftHiveMetastore_revoke_role_args args;
+  ThriftHiveMetastore_revoke_privileges_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.revoke_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.revoke_privileges", bytes);
   }
 
-  ThriftHiveMetastore_revoke_role_result result;
+  ThriftHiveMetastore_revoke_privileges_result result;
   try {
-    result.success = iface_->revoke_role(args.role_name, args.principal_name, args.principal_type);
+    result.success = iface_->revoke_privileges(args.privileges);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.revoke_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.revoke_privileges");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43363,55 +45677,55 @@ void ThriftHiveMetastoreProcessor::process_revoke_role(int32_t seqid, ::apache::
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.revoke_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.revoke_privileges");
   }
 
-  oprot->writeMessageBegin("revoke_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.revoke_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.revoke_privileges", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_list_roles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_grant_revoke_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.list_roles", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_revoke_privileges", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.list_roles");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_revoke_privileges");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.list_roles");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
   }
 
-  ThriftHiveMetastore_list_roles_args args;
+  ThriftHiveMetastore_grant_revoke_privileges_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.list_roles", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_revoke_privileges", bytes);
   }
 
-  ThriftHiveMetastore_list_roles_result result;
+  ThriftHiveMetastore_grant_revoke_privileges_result result;
   try {
-    iface_->list_roles(result.success, args.principal_name, args.principal_type);
+    iface_->grant_revoke_privileges(result.success, args.request);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.list_roles");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43420,55 +45734,55 @@ void ThriftHiveMetastoreProcessor::process_list_roles(int32_t seqid, ::apache::t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.list_roles");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
   }
 
-  oprot->writeMessageBegin("list_roles", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.list_roles", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_revoke_privileges", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_grant_revoke_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_set_ugi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_revoke_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.set_ugi", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_revoke_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.set_ugi");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_revoke_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.set_ugi");
   }
 
-  ThriftHiveMetastore_grant_revoke_role_args args;
+  ThriftHiveMetastore_set_ugi_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_revoke_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.set_ugi", bytes);
   }
 
-  ThriftHiveMetastore_grant_revoke_role_result result;
+  ThriftHiveMetastore_set_ugi_result result;
   try {
-    iface_->grant_revoke_role(result.success, args.request);
+    iface_->set_ugi(result.success, args.user_name, args.group_names);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_revoke_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.set_ugi");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43477,55 +45791,55 @@ void ThriftHiveMetastoreProcessor::process_grant_revoke_role(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_revoke_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.set_ugi");
   }
 
-  oprot->writeMessageBegin("grant_revoke_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_revoke_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.set_ugi", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_principals_in_role(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_principals_in_role", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_delegation_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_principals_in_role");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_delegation_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_principals_in_role");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_delegation_token");
   }
 
-  ThriftHiveMetastore_get_principals_in_role_args args;
+  ThriftHiveMetastore_get_delegation_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_principals_in_role", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_delegation_token", bytes);
   }
 
-  ThriftHiveMetastore_get_principals_in_role_result result;
+  ThriftHiveMetastore_get_delegation_token_result result;
   try {
-    iface_->get_principals_in_role(result.success, args.request);
+    iface_->get_delegation_token(result.success, args.token_owner, args.renewer_kerberos_principal_name);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_principals_in_role");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_delegation_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43534,55 +45848,55 @@ void ThriftHiveMetastoreProcessor::process_get_principals_in_role(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_principals_in_role");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_delegation_token");
   }
 
-  oprot->writeMessageBegin("get_principals_in_role", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_principals_in_role", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_delegation_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_role_grants_for_principal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_renew_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_role_grants_for_principal", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.renew_delegation_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.renew_delegation_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.renew_delegation_token");
   }
 
-  ThriftHiveMetastore_get_role_grants_for_principal_args args;
+  ThriftHiveMetastore_renew_delegation_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_role_grants_for_principal", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.renew_delegation_token", bytes);
   }
 
-  ThriftHiveMetastore_get_role_grants_for_principal_result result;
+  ThriftHiveMetastore_renew_delegation_token_result result;
   try {
-    iface_->get_role_grants_for_principal(result.success, args.request);
+    result.success = iface_->renew_delegation_token(args.token_str_form);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.renew_delegation_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43591,55 +45905,54 @@ void ThriftHiveMetastoreProcessor::process_get_role_grants_for_principal(int32_t
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_role_grants_for_principal");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.renew_delegation_token");
   }
 
-  oprot->writeMessageBegin("get_role_grants_for_principal", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_role_grants_for_principal", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.renew_delegation_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_privilege_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_cancel_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_privilege_set", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.cancel_delegation_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_privilege_set");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.cancel_delegation_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_privilege_set");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.cancel_delegation_token");
   }
 
-  ThriftHiveMetastore_get_privilege_set_args args;
+  ThriftHiveMetastore_cancel_delegation_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_privilege_set", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.cancel_delegation_token", bytes);
   }
 
-  ThriftHiveMetastore_get_privilege_set_result result;
+  ThriftHiveMetastore_cancel_delegation_token_result result;
   try {
-    iface_->get_privilege_set(result.success, args.hiveObject, args.user_name, args.group_names);
-    result.__isset.success = true;
+    iface_->cancel_delegation_token(args.token_str_form);
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_privilege_set");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.cancel_delegation_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43648,55 +45961,52 @@ void ThriftHiveMetastoreProcessor::process_get_privilege_set(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_privilege_set");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.cancel_delegation_token");
   }
 
-  oprot->writeMessageBegin("get_privilege_set", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_privilege_set", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.cancel_delegation_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_list_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.list_privileges", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.list_privileges");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.list_privileges");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_token");
   }
 
-  ThriftHiveMetastore_list_privileges_args args;
+  ThriftHiveMetastore_add_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.list_privileges", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_token", bytes);
   }
 
-  ThriftHiveMetastore_list_privileges_result result;
+  ThriftHiveMetastore_add_token_result result;
   try {
-    iface_->list_privileges(result.success, args.principal_name, args.principal_type, args.hiveObject);
+    result.success = iface_->add_token(args.token_identifier, args.delegation_token);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.list_privileges");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43705,55 +46015,52 @@ void ThriftHiveMetastoreProcessor::process_list_privileges(int32_t seqid, ::apac
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.list_privileges");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_token");
   }
 
-  oprot->writeMessageBegin("list_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.list_privileges", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_grant_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_remove_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_privileges", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.remove_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_privileges");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.remove_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_privileges");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.remove_token");
   }
 
-  ThriftHiveMetastore_grant_privileges_args args;
+  ThriftHiveMetastore_remove_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_privileges", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.remove_token", bytes);
   }
 
-  ThriftHiveMetastore_grant_privileges_result result;
+  ThriftHiveMetastore_remove_token_result result;
   try {
-    result.success = iface_->grant_privileges(args.privileges);
+    result.success = iface_->remove_token(args.token_identifier);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_privileges");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.remove_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("remove_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43762,55 +46069,52 @@ void ThriftHiveMetastoreProcessor::process_grant_privileges(int32_t seqid, ::apa
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_privileges");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.remove_token");
   }
 
-  oprot->writeMessageBegin("grant_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("remove_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_privileges", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.remove_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_revoke_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.revoke_privileges", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_token", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.revoke_privileges");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_token");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.revoke_privileges");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_token");
   }
 
-  ThriftHiveMetastore_revoke_privileges_args args;
+  ThriftHiveMetastore_get_token_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.revoke_privileges", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_token", bytes);
   }
 
-  ThriftHiveMetastore_revoke_privileges_result result;
+  ThriftHiveMetastore_get_token_result result;
   try {
-    result.success = iface_->revoke_privileges(args.privileges);
+    iface_->get_token(result.success, args.token_identifier);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.revoke_privileges");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_token");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43819,55 +46123,52 @@ void ThriftHiveMetastoreProcessor::process_revoke_privileges(int32_t seqid, ::ap
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.revoke_privileges");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_token");
   }
 
-  oprot->writeMessageBegin("revoke_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_token", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.revoke_privileges", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_token", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_grant_revoke_privileges(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_all_token_identifiers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.grant_revoke_privileges", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_all_token_identifiers", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.grant_revoke_privileges");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_all_token_identifiers");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_all_token_identifiers");
   }
 
-  ThriftHiveMetastore_grant_revoke_privileges_args args;
+  ThriftHiveMetastore_get_all_token_identifiers_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.grant_revoke_privileges", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_all_token_identifiers", bytes);
   }
 
-  ThriftHiveMetastore_grant_revoke_privileges_result result;
+  ThriftHiveMetastore_get_all_token_identifiers_result result;
   try {
-    iface_->grant_revoke_privileges(result.success, args.request);
+    iface_->get_all_token_identifiers(result.success);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_all_token_identifiers");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_all_token_identifiers", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43876,55 +46177,55 @@ void ThriftHiveMetastoreProcessor::process_grant_revoke_privileges(int32_t seqid
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.grant_revoke_privileges");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_all_token_identifiers");
   }
 
-  oprot->writeMessageBegin("grant_revoke_privileges", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_all_token_identifiers", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.grant_revoke_privileges", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_all_token_identifiers", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_set_ugi(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_add_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.set_ugi", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.add_master_key", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.set_ugi");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.add_master_key");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.set_ugi");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.add_master_key");
   }
 
-  ThriftHiveMetastore_set_ugi_args args;
+  ThriftHiveMetastore_add_master_key_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.set_ugi", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.add_master_key", bytes);
   }
 
-  ThriftHiveMetastore_set_ugi_result result;
+  ThriftHiveMetastore_add_master_key_result result;
   try {
-    iface_->set_ugi(result.success, args.user_name, args.group_names);
+    result.success = iface_->add_master_key(args.key);
     result.__isset.success = true;
   } catch (MetaException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.set_ugi");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.add_master_key");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("add_master_key", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43933,55 +46234,57 @@ void ThriftHiveMetastoreProcessor::process_set_ugi(int32_t seqid, ::apache::thri
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.set_ugi");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.add_master_key");
   }
 
-  oprot->writeMessageBegin("set_ugi", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("add_master_key", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.set_ugi", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.add_master_key", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_get_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_update_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_delegation_token", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.update_master_key", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_delegation_token");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.update_master_key");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_delegation_token");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.update_master_key");
   }
 
-  ThriftHiveMetastore_get_delegation_token_args args;
+  ThriftHiveMetastore_update_master_key_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_delegation_token", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.update_master_key", bytes);
   }
 
-  ThriftHiveMetastore_get_delegation_token_result result;
+  ThriftHiveMetastore_update_master_key_result result;
   try {
-    iface_->get_delegation_token(result.success, args.token_owner, args.renewer_kerberos_principal_name);
-    result.__isset.success = true;
-  } catch (MetaException &o1) {
+    iface_->update_master_key(args.seq_number, args.key);
+  } catch (NoSuchObjectException &o1) {
     result.o1 = o1;
     result.__isset.o1 = true;
+  } catch (MetaException &o2) {
+    result.o2 = o2;
+    result.__isset.o2 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_delegation_token");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.update_master_key");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("update_master_key", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -43990,55 +46293,52 @@ void ThriftHiveMetastoreProcessor::process_get_delegation_token(int32_t seqid, :
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_delegation_token");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.update_master_key");
   }
 
-  oprot->writeMessageBegin("get_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("update_master_key", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_delegation_token", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.update_master_key", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_renew_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_remove_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.renew_delegation_token", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.remove_master_key", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.renew_delegation_token");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.remove_master_key");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.renew_delegation_token");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.remove_master_key");
   }
 
-  ThriftHiveMetastore_renew_delegation_token_args args;
+  ThriftHiveMetastore_remove_master_key_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.renew_delegation_token", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.remove_master_key", bytes);
   }
 
-  ThriftHiveMetastore_renew_delegation_token_result result;
+  ThriftHiveMetastore_remove_master_key_result result;
   try {
-    result.success = iface_->renew_delegation_token(args.token_str_form);
+    result.success = iface_->remove_master_key(args.key_seq);
     result.__isset.success = true;
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.renew_delegation_token");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.remove_master_key");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("remove_master_key", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -44047,54 +46347,52 @@ void ThriftHiveMetastoreProcessor::process_renew_delegation_token(int32_t seqid,
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.renew_delegation_token");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.remove_master_key");
   }
 
-  oprot->writeMessageBegin("renew_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("remove_master_key", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.renew_delegation_token", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.remove_master_key", bytes);
   }
 }
 
-void ThriftHiveMetastoreProcessor::process_cancel_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
+void ThriftHiveMetastoreProcessor::process_get_master_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
 {
   void* ctx = NULL;
   if (this->eventHandler_.get() != NULL) {
-    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.cancel_delegation_token", callContext);
+    ctx = this->eventHandler_->getContext("ThriftHiveMetastore.get_master_keys", callContext);
   }
-  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.cancel_delegation_token");
+  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "ThriftHiveMetastore.get_master_keys");
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.cancel_delegation_token");
+    this->eventHandler_->preRead(ctx, "ThriftHiveMetastore.get_master_keys");
   }
 
-  ThriftHiveMetastore_cancel_delegation_token_args args;
+  ThriftHiveMetastore_get_master_keys_args args;
   args.read(iprot);
   iprot->readMessageEnd();
   uint32_t bytes = iprot->getTransport()->readEnd();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.cancel_delegation_token", bytes);
+    this->eventHandler_->postRead(ctx, "ThriftHiveMetastore.get_master_keys", bytes);
   }
 
-  ThriftHiveMetastore_cancel_delegation_token_result result;
+  ThriftHiveMetastore_get_master_keys_result result;
   try {
-    iface_->cancel_delegation_token(args.token_str_form);
-  } catch (MetaException &o1) {
-    result.o1 = o1;
-    result.__isset.o1 = true;
+    iface_->get_master_keys(result.success);
+    result.__isset.success = true;
   } catch (const std::exception& e) {
     if (this->eventHandler_.get() != NULL) {
-      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.cancel_delegation_token");
+      this->eventHandler_->handlerError(ctx, "ThriftHiveMetastore.get_master_keys");
     }
 
     ::apache::thrift::TApplicationException x(e.what());
-    oprot->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_EXCEPTION, seqid);
+    oprot->writeMessageBegin("get_master_keys", ::apache::thrift::protocol::T_EXCEPTION, seqid);
     x.write(oprot);
     oprot->writeMessageEnd();
     oprot->getTransport()->writeEnd();
@@ -44103,17 +46401,17 @@ void ThriftHiveMetastoreProcessor::process_cancel_delegation_token(int32_t seqid
   }
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.cancel_delegation_token");
+    this->eventHandler_->preWrite(ctx, "ThriftHiveMetastore.get_master_keys");
   }
 
-  oprot->writeMessageBegin("cancel_delegation_token", ::apache::thrift::protocol::T_REPLY, seqid);
+  oprot->writeMessageBegin("get_master_keys", ::apache::thrift::protocol::T_REPLY, seqid);
   result.write(oprot);
   oprot->writeMessageEnd();
   bytes = oprot->getTransport()->writeEnd();
   oprot->getTransport()->flush();
 
   if (this->eventHandler_.get() != NULL) {
-    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.cancel_delegation_token", bytes);
+    this->eventHandler_->postWrite(ctx, "ThriftHiveMetastore.get_master_keys", bytes);
   }
 }
 
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
index 8f2ff5a..2bd79d3 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore.h
@@ -126,6 +126,14 @@ class ThriftHiveMetastoreIf : virtual public  ::facebook::fb303::FacebookService
   virtual void get_delegation_token(std::string& _return, const std::string& token_owner, const std::string& renewer_kerberos_principal_name) = 0;
   virtual int64_t renew_delegation_token(const std::string& token_str_form) = 0;
   virtual void cancel_delegation_token(const std::string& token_str_form) = 0;
+  virtual bool add_token(const std::string& token_identifier, const std::string& delegation_token) = 0;
+  virtual bool remove_token(const std::string& token_identifier) = 0;
+  virtual void get_token(std::string& _return, const std::string& token_identifier) = 0;
+  virtual void get_all_token_identifiers(std::vector<std::string> & _return) = 0;
+  virtual int32_t add_master_key(const std::string& key) = 0;
+  virtual void update_master_key(const int32_t seq_number, const std::string& key) = 0;
+  virtual bool remove_master_key(const int32_t key_seq) = 0;
+  virtual void get_master_keys(std::vector<std::string> & _return) = 0;
   virtual void get_open_txns(GetOpenTxnsResponse& _return) = 0;
   virtual void get_open_txns_info(GetOpenTxnsInfoResponse& _return) = 0;
   virtual void open_txns(OpenTxnsResponse& _return, const OpenTxnRequest& rqst) = 0;
@@ -526,6 +534,34 @@ class ThriftHiveMetastoreNull : virtual public ThriftHiveMetastoreIf , virtual p
   void cancel_delegation_token(const std::string& /* token_str_form */) {
     return;
   }
+  bool add_token(const std::string& /* token_identifier */, const std::string& /* delegation_token */) {
+    bool _return = false;
+    return _return;
+  }
+  bool remove_token(const std::string& /* token_identifier */) {
+    bool _return = false;
+    return _return;
+  }
+  void get_token(std::string& /* _return */, const std::string& /* token_identifier */) {
+    return;
+  }
+  void get_all_token_identifiers(std::vector<std::string> & /* _return */) {
+    return;
+  }
+  int32_t add_master_key(const std::string& /* key */) {
+    int32_t _return = 0;
+    return _return;
+  }
+  void update_master_key(const int32_t /* seq_number */, const std::string& /* key */) {
+    return;
+  }
+  bool remove_master_key(const int32_t /* key_seq */) {
+    bool _return = false;
+    return _return;
+  }
+  void get_master_keys(std::vector<std::string> & /* _return */) {
+    return;
+  }
   void get_open_txns(GetOpenTxnsResponse& /* _return */) {
     return;
   }
@@ -16044,25 +16080,46 @@ class ThriftHiveMetastore_cancel_delegation_token_presult {
 
 };
 
+typedef struct _ThriftHiveMetastore_add_token_args__isset {
+  _ThriftHiveMetastore_add_token_args__isset() : token_identifier(false), delegation_token(false) {}
+  bool token_identifier;
+  bool delegation_token;
+} _ThriftHiveMetastore_add_token_args__isset;
 
-class ThriftHiveMetastore_get_open_txns_args {
+class ThriftHiveMetastore_add_token_args {
  public:
 
-  ThriftHiveMetastore_get_open_txns_args() {
+  ThriftHiveMetastore_add_token_args() : token_identifier(), delegation_token() {
   }
 
-  virtual ~ThriftHiveMetastore_get_open_txns_args() throw() {}
+  virtual ~ThriftHiveMetastore_add_token_args() throw() {}
 
+  std::string token_identifier;
+  std::string delegation_token;
 
-  bool operator == (const ThriftHiveMetastore_get_open_txns_args & /* rhs */) const
+  _ThriftHiveMetastore_add_token_args__isset __isset;
+
+  void __set_token_identifier(const std::string& val) {
+    token_identifier = val;
+  }
+
+  void __set_delegation_token(const std::string& val) {
+    delegation_token = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_add_token_args & rhs) const
   {
+    if (!(token_identifier == rhs.token_identifier))
+      return false;
+    if (!(delegation_token == rhs.delegation_token))
+      return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_get_open_txns_args &rhs) const {
+  bool operator != (const ThriftHiveMetastore_add_token_args &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_get_open_txns_args & ) const;
+  bool operator < (const ThriftHiveMetastore_add_token_args & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
@@ -16070,93 +16127,108 @@ class ThriftHiveMetastore_get_open_txns_args {
 };
 
 
-class ThriftHiveMetastore_get_open_txns_pargs {
+class ThriftHiveMetastore_add_token_pargs {
  public:
 
 
-  virtual ~ThriftHiveMetastore_get_open_txns_pargs() throw() {}
+  virtual ~ThriftHiveMetastore_add_token_pargs() throw() {}
 
+  const std::string* token_identifier;
+  const std::string* delegation_token;
 
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_get_open_txns_result__isset {
-  _ThriftHiveMetastore_get_open_txns_result__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_add_token_result__isset {
+  _ThriftHiveMetastore_add_token_result__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_get_open_txns_result__isset;
+} _ThriftHiveMetastore_add_token_result__isset;
 
-class ThriftHiveMetastore_get_open_txns_result {
+class ThriftHiveMetastore_add_token_result {
  public:
 
-  ThriftHiveMetastore_get_open_txns_result() {
+  ThriftHiveMetastore_add_token_result() : success(0) {
   }
 
-  virtual ~ThriftHiveMetastore_get_open_txns_result() throw() {}
+  virtual ~ThriftHiveMetastore_add_token_result() throw() {}
 
-  GetOpenTxnsResponse success;
+  bool success;
 
-  _ThriftHiveMetastore_get_open_txns_result__isset __isset;
+  _ThriftHiveMetastore_add_token_result__isset __isset;
 
-  void __set_success(const GetOpenTxnsResponse& val) {
+  void __set_success(const bool val) {
     success = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_get_open_txns_result & rhs) const
+  bool operator == (const ThriftHiveMetastore_add_token_result & rhs) const
   {
     if (!(success == rhs.success))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_get_open_txns_result &rhs) const {
+  bool operator != (const ThriftHiveMetastore_add_token_result &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_get_open_txns_result & ) const;
+  bool operator < (const ThriftHiveMetastore_add_token_result & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_get_open_txns_presult__isset {
-  _ThriftHiveMetastore_get_open_txns_presult__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_add_token_presult__isset {
+  _ThriftHiveMetastore_add_token_presult__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_get_open_txns_presult__isset;
+} _ThriftHiveMetastore_add_token_presult__isset;
 
-class ThriftHiveMetastore_get_open_txns_presult {
+class ThriftHiveMetastore_add_token_presult {
  public:
 
 
-  virtual ~ThriftHiveMetastore_get_open_txns_presult() throw() {}
+  virtual ~ThriftHiveMetastore_add_token_presult() throw() {}
 
-  GetOpenTxnsResponse* success;
+  bool* success;
 
-  _ThriftHiveMetastore_get_open_txns_presult__isset __isset;
+  _ThriftHiveMetastore_add_token_presult__isset __isset;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
 
 };
 
+typedef struct _ThriftHiveMetastore_remove_token_args__isset {
+  _ThriftHiveMetastore_remove_token_args__isset() : token_identifier(false) {}
+  bool token_identifier;
+} _ThriftHiveMetastore_remove_token_args__isset;
 
-class ThriftHiveMetastore_get_open_txns_info_args {
+class ThriftHiveMetastore_remove_token_args {
  public:
 
-  ThriftHiveMetastore_get_open_txns_info_args() {
+  ThriftHiveMetastore_remove_token_args() : token_identifier() {
   }
 
-  virtual ~ThriftHiveMetastore_get_open_txns_info_args() throw() {}
+  virtual ~ThriftHiveMetastore_remove_token_args() throw() {}
 
+  std::string token_identifier;
 
-  bool operator == (const ThriftHiveMetastore_get_open_txns_info_args & /* rhs */) const
+  _ThriftHiveMetastore_remove_token_args__isset __isset;
+
+  void __set_token_identifier(const std::string& val) {
+    token_identifier = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_remove_token_args & rhs) const
   {
+    if (!(token_identifier == rhs.token_identifier))
+      return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_get_open_txns_info_args &rhs) const {
+  bool operator != (const ThriftHiveMetastore_remove_token_args &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_get_open_txns_info_args & ) const;
+  bool operator < (const ThriftHiveMetastore_remove_token_args & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
@@ -16164,106 +16236,107 @@ class ThriftHiveMetastore_get_open_txns_info_args {
 };
 
 
-class ThriftHiveMetastore_get_open_txns_info_pargs {
+class ThriftHiveMetastore_remove_token_pargs {
  public:
 
 
-  virtual ~ThriftHiveMetastore_get_open_txns_info_pargs() throw() {}
+  virtual ~ThriftHiveMetastore_remove_token_pargs() throw() {}
 
+  const std::string* token_identifier;
 
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_get_open_txns_info_result__isset {
-  _ThriftHiveMetastore_get_open_txns_info_result__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_remove_token_result__isset {
+  _ThriftHiveMetastore_remove_token_result__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_get_open_txns_info_result__isset;
+} _ThriftHiveMetastore_remove_token_result__isset;
 
-class ThriftHiveMetastore_get_open_txns_info_result {
+class ThriftHiveMetastore_remove_token_result {
  public:
 
-  ThriftHiveMetastore_get_open_txns_info_result() {
+  ThriftHiveMetastore_remove_token_result() : success(0) {
   }
 
-  virtual ~ThriftHiveMetastore_get_open_txns_info_result() throw() {}
+  virtual ~ThriftHiveMetastore_remove_token_result() throw() {}
 
-  GetOpenTxnsInfoResponse success;
+  bool success;
 
-  _ThriftHiveMetastore_get_open_txns_info_result__isset __isset;
+  _ThriftHiveMetastore_remove_token_result__isset __isset;
 
-  void __set_success(const GetOpenTxnsInfoResponse& val) {
+  void __set_success(const bool val) {
     success = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_get_open_txns_info_result & rhs) const
+  bool operator == (const ThriftHiveMetastore_remove_token_result & rhs) const
   {
     if (!(success == rhs.success))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_get_open_txns_info_result &rhs) const {
+  bool operator != (const ThriftHiveMetastore_remove_token_result &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_get_open_txns_info_result & ) const;
+  bool operator < (const ThriftHiveMetastore_remove_token_result & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_get_open_txns_info_presult__isset {
-  _ThriftHiveMetastore_get_open_txns_info_presult__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_remove_token_presult__isset {
+  _ThriftHiveMetastore_remove_token_presult__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_get_open_txns_info_presult__isset;
+} _ThriftHiveMetastore_remove_token_presult__isset;
 
-class ThriftHiveMetastore_get_open_txns_info_presult {
+class ThriftHiveMetastore_remove_token_presult {
  public:
 
 
-  virtual ~ThriftHiveMetastore_get_open_txns_info_presult() throw() {}
+  virtual ~ThriftHiveMetastore_remove_token_presult() throw() {}
 
-  GetOpenTxnsInfoResponse* success;
+  bool* success;
 
-  _ThriftHiveMetastore_get_open_txns_info_presult__isset __isset;
+  _ThriftHiveMetastore_remove_token_presult__isset __isset;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
 
 };
 
-typedef struct _ThriftHiveMetastore_open_txns_args__isset {
-  _ThriftHiveMetastore_open_txns_args__isset() : rqst(false) {}
-  bool rqst;
-} _ThriftHiveMetastore_open_txns_args__isset;
+typedef struct _ThriftHiveMetastore_get_token_args__isset {
+  _ThriftHiveMetastore_get_token_args__isset() : token_identifier(false) {}
+  bool token_identifier;
+} _ThriftHiveMetastore_get_token_args__isset;
 
-class ThriftHiveMetastore_open_txns_args {
+class ThriftHiveMetastore_get_token_args {
  public:
 
-  ThriftHiveMetastore_open_txns_args() {
+  ThriftHiveMetastore_get_token_args() : token_identifier() {
   }
 
-  virtual ~ThriftHiveMetastore_open_txns_args() throw() {}
+  virtual ~ThriftHiveMetastore_get_token_args() throw() {}
 
-  OpenTxnRequest rqst;
+  std::string token_identifier;
 
-  _ThriftHiveMetastore_open_txns_args__isset __isset;
+  _ThriftHiveMetastore_get_token_args__isset __isset;
 
-  void __set_rqst(const OpenTxnRequest& val) {
-    rqst = val;
+  void __set_token_identifier(const std::string& val) {
+    token_identifier = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_open_txns_args & rhs) const
+  bool operator == (const ThriftHiveMetastore_get_token_args & rhs) const
   {
-    if (!(rqst == rhs.rqst))
+    if (!(token_identifier == rhs.token_identifier))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_open_txns_args &rhs) const {
+  bool operator != (const ThriftHiveMetastore_get_token_args &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_open_txns_args & ) const;
+  bool operator < (const ThriftHiveMetastore_get_token_args & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
@@ -16271,107 +16344,94 @@ class ThriftHiveMetastore_open_txns_args {
 };
 
 
-class ThriftHiveMetastore_open_txns_pargs {
+class ThriftHiveMetastore_get_token_pargs {
  public:
 
 
-  virtual ~ThriftHiveMetastore_open_txns_pargs() throw() {}
+  virtual ~ThriftHiveMetastore_get_token_pargs() throw() {}
 
-  const OpenTxnRequest* rqst;
+  const std::string* token_identifier;
 
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_open_txns_result__isset {
-  _ThriftHiveMetastore_open_txns_result__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_get_token_result__isset {
+  _ThriftHiveMetastore_get_token_result__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_open_txns_result__isset;
+} _ThriftHiveMetastore_get_token_result__isset;
 
-class ThriftHiveMetastore_open_txns_result {
+class ThriftHiveMetastore_get_token_result {
  public:
 
-  ThriftHiveMetastore_open_txns_result() {
+  ThriftHiveMetastore_get_token_result() : success() {
   }
 
-  virtual ~ThriftHiveMetastore_open_txns_result() throw() {}
+  virtual ~ThriftHiveMetastore_get_token_result() throw() {}
 
-  OpenTxnsResponse success;
+  std::string success;
 
-  _ThriftHiveMetastore_open_txns_result__isset __isset;
+  _ThriftHiveMetastore_get_token_result__isset __isset;
 
-  void __set_success(const OpenTxnsResponse& val) {
+  void __set_success(const std::string& val) {
     success = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_open_txns_result & rhs) const
+  bool operator == (const ThriftHiveMetastore_get_token_result & rhs) const
   {
     if (!(success == rhs.success))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_open_txns_result &rhs) const {
+  bool operator != (const ThriftHiveMetastore_get_token_result &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_open_txns_result & ) const;
+  bool operator < (const ThriftHiveMetastore_get_token_result & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_open_txns_presult__isset {
-  _ThriftHiveMetastore_open_txns_presult__isset() : success(false) {}
+typedef struct _ThriftHiveMetastore_get_token_presult__isset {
+  _ThriftHiveMetastore_get_token_presult__isset() : success(false) {}
   bool success;
-} _ThriftHiveMetastore_open_txns_presult__isset;
+} _ThriftHiveMetastore_get_token_presult__isset;
 
-class ThriftHiveMetastore_open_txns_presult {
+class ThriftHiveMetastore_get_token_presult {
  public:
 
 
-  virtual ~ThriftHiveMetastore_open_txns_presult() throw() {}
+  virtual ~ThriftHiveMetastore_get_token_presult() throw() {}
 
-  OpenTxnsResponse* success;
+  std::string* success;
 
-  _ThriftHiveMetastore_open_txns_presult__isset __isset;
+  _ThriftHiveMetastore_get_token_presult__isset __isset;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
 
 };
 
-typedef struct _ThriftHiveMetastore_abort_txn_args__isset {
-  _ThriftHiveMetastore_abort_txn_args__isset() : rqst(false) {}
-  bool rqst;
-} _ThriftHiveMetastore_abort_txn_args__isset;
 
-class ThriftHiveMetastore_abort_txn_args {
+class ThriftHiveMetastore_get_all_token_identifiers_args {
  public:
 
-  ThriftHiveMetastore_abort_txn_args() {
+  ThriftHiveMetastore_get_all_token_identifiers_args() {
   }
 
-  virtual ~ThriftHiveMetastore_abort_txn_args() throw() {}
-
-  AbortTxnRequest rqst;
-
-  _ThriftHiveMetastore_abort_txn_args__isset __isset;
+  virtual ~ThriftHiveMetastore_get_all_token_identifiers_args() throw() {}
 
-  void __set_rqst(const AbortTxnRequest& val) {
-    rqst = val;
-  }
 
-  bool operator == (const ThriftHiveMetastore_abort_txn_args & rhs) const
+  bool operator == (const ThriftHiveMetastore_get_all_token_identifiers_args & /* rhs */) const
   {
-    if (!(rqst == rhs.rqst))
-      return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_abort_txn_args &rhs) const {
+  bool operator != (const ThriftHiveMetastore_get_all_token_identifiers_args &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_abort_txn_args & ) const;
+  bool operator < (const ThriftHiveMetastore_get_all_token_identifiers_args & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
@@ -16379,107 +16439,106 @@ class ThriftHiveMetastore_abort_txn_args {
 };
 
 
-class ThriftHiveMetastore_abort_txn_pargs {
+class ThriftHiveMetastore_get_all_token_identifiers_pargs {
  public:
 
 
-  virtual ~ThriftHiveMetastore_abort_txn_pargs() throw() {}
+  virtual ~ThriftHiveMetastore_get_all_token_identifiers_pargs() throw() {}
 
-  const AbortTxnRequest* rqst;
 
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_abort_txn_result__isset {
-  _ThriftHiveMetastore_abort_txn_result__isset() : o1(false) {}
-  bool o1;
-} _ThriftHiveMetastore_abort_txn_result__isset;
+typedef struct _ThriftHiveMetastore_get_all_token_identifiers_result__isset {
+  _ThriftHiveMetastore_get_all_token_identifiers_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_all_token_identifiers_result__isset;
 
-class ThriftHiveMetastore_abort_txn_result {
+class ThriftHiveMetastore_get_all_token_identifiers_result {
  public:
 
-  ThriftHiveMetastore_abort_txn_result() {
+  ThriftHiveMetastore_get_all_token_identifiers_result() {
   }
 
-  virtual ~ThriftHiveMetastore_abort_txn_result() throw() {}
+  virtual ~ThriftHiveMetastore_get_all_token_identifiers_result() throw() {}
 
-  NoSuchTxnException o1;
+  std::vector<std::string>  success;
 
-  _ThriftHiveMetastore_abort_txn_result__isset __isset;
+  _ThriftHiveMetastore_get_all_token_identifiers_result__isset __isset;
 
-  void __set_o1(const NoSuchTxnException& val) {
-    o1 = val;
+  void __set_success(const std::vector<std::string> & val) {
+    success = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_abort_txn_result & rhs) const
+  bool operator == (const ThriftHiveMetastore_get_all_token_identifiers_result & rhs) const
   {
-    if (!(o1 == rhs.o1))
+    if (!(success == rhs.success))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_abort_txn_result &rhs) const {
+  bool operator != (const ThriftHiveMetastore_get_all_token_identifiers_result &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_abort_txn_result & ) const;
+  bool operator < (const ThriftHiveMetastore_get_all_token_identifiers_result & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_abort_txn_presult__isset {
-  _ThriftHiveMetastore_abort_txn_presult__isset() : o1(false) {}
-  bool o1;
-} _ThriftHiveMetastore_abort_txn_presult__isset;
+typedef struct _ThriftHiveMetastore_get_all_token_identifiers_presult__isset {
+  _ThriftHiveMetastore_get_all_token_identifiers_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_all_token_identifiers_presult__isset;
 
-class ThriftHiveMetastore_abort_txn_presult {
+class ThriftHiveMetastore_get_all_token_identifiers_presult {
  public:
 
 
-  virtual ~ThriftHiveMetastore_abort_txn_presult() throw() {}
+  virtual ~ThriftHiveMetastore_get_all_token_identifiers_presult() throw() {}
 
-  NoSuchTxnException o1;
+  std::vector<std::string> * success;
 
-  _ThriftHiveMetastore_abort_txn_presult__isset __isset;
+  _ThriftHiveMetastore_get_all_token_identifiers_presult__isset __isset;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
 
 };
 
-typedef struct _ThriftHiveMetastore_commit_txn_args__isset {
-  _ThriftHiveMetastore_commit_txn_args__isset() : rqst(false) {}
-  bool rqst;
-} _ThriftHiveMetastore_commit_txn_args__isset;
+typedef struct _ThriftHiveMetastore_add_master_key_args__isset {
+  _ThriftHiveMetastore_add_master_key_args__isset() : key(false) {}
+  bool key;
+} _ThriftHiveMetastore_add_master_key_args__isset;
 
-class ThriftHiveMetastore_commit_txn_args {
+class ThriftHiveMetastore_add_master_key_args {
  public:
 
-  ThriftHiveMetastore_commit_txn_args() {
+  ThriftHiveMetastore_add_master_key_args() : key() {
   }
 
-  virtual ~ThriftHiveMetastore_commit_txn_args() throw() {}
+  virtual ~ThriftHiveMetastore_add_master_key_args() throw() {}
 
-  CommitTxnRequest rqst;
+  std::string key;
 
-  _ThriftHiveMetastore_commit_txn_args__isset __isset;
+  _ThriftHiveMetastore_add_master_key_args__isset __isset;
 
-  void __set_rqst(const CommitTxnRequest& val) {
-    rqst = val;
+  void __set_key(const std::string& val) {
+    key = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_commit_txn_args & rhs) const
+  bool operator == (const ThriftHiveMetastore_add_master_key_args & rhs) const
   {
-    if (!(rqst == rhs.rqst))
+    if (!(key == rhs.key))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_commit_txn_args &rhs) const {
+  bool operator != (const ThriftHiveMetastore_add_master_key_args &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_commit_txn_args & ) const;
+  bool operator < (const ThriftHiveMetastore_add_master_key_args & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
@@ -16487,99 +16546,950 @@ class ThriftHiveMetastore_commit_txn_args {
 };
 
 
-class ThriftHiveMetastore_commit_txn_pargs {
+class ThriftHiveMetastore_add_master_key_pargs {
  public:
 
 
-  virtual ~ThriftHiveMetastore_commit_txn_pargs() throw() {}
+  virtual ~ThriftHiveMetastore_add_master_key_pargs() throw() {}
 
-  const CommitTxnRequest* rqst;
+  const std::string* key;
 
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_commit_txn_result__isset {
-  _ThriftHiveMetastore_commit_txn_result__isset() : o1(false), o2(false) {}
+typedef struct _ThriftHiveMetastore_add_master_key_result__isset {
+  _ThriftHiveMetastore_add_master_key_result__isset() : success(false), o1(false) {}
+  bool success;
   bool o1;
-  bool o2;
-} _ThriftHiveMetastore_commit_txn_result__isset;
+} _ThriftHiveMetastore_add_master_key_result__isset;
 
-class ThriftHiveMetastore_commit_txn_result {
+class ThriftHiveMetastore_add_master_key_result {
  public:
 
-  ThriftHiveMetastore_commit_txn_result() {
+  ThriftHiveMetastore_add_master_key_result() : success(0) {
   }
 
-  virtual ~ThriftHiveMetastore_commit_txn_result() throw() {}
+  virtual ~ThriftHiveMetastore_add_master_key_result() throw() {}
 
-  NoSuchTxnException o1;
-  TxnAbortedException o2;
+  int32_t success;
+  MetaException o1;
 
-  _ThriftHiveMetastore_commit_txn_result__isset __isset;
+  _ThriftHiveMetastore_add_master_key_result__isset __isset;
 
-  void __set_o1(const NoSuchTxnException& val) {
-    o1 = val;
+  void __set_success(const int32_t val) {
+    success = val;
   }
 
-  void __set_o2(const TxnAbortedException& val) {
-    o2 = val;
+  void __set_o1(const MetaException& val) {
+    o1 = val;
   }
 
-  bool operator == (const ThriftHiveMetastore_commit_txn_result & rhs) const
+  bool operator == (const ThriftHiveMetastore_add_master_key_result & rhs) const
   {
-    if (!(o1 == rhs.o1))
+    if (!(success == rhs.success))
       return false;
-    if (!(o2 == rhs.o2))
+    if (!(o1 == rhs.o1))
       return false;
     return true;
   }
-  bool operator != (const ThriftHiveMetastore_commit_txn_result &rhs) const {
+  bool operator != (const ThriftHiveMetastore_add_master_key_result &rhs) const {
     return !(*this == rhs);
   }
 
-  bool operator < (const ThriftHiveMetastore_commit_txn_result & ) const;
+  bool operator < (const ThriftHiveMetastore_add_master_key_result & ) const;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
   uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
 
 };
 
-typedef struct _ThriftHiveMetastore_commit_txn_presult__isset {
-  _ThriftHiveMetastore_commit_txn_presult__isset() : o1(false), o2(false) {}
+typedef struct _ThriftHiveMetastore_add_master_key_presult__isset {
+  _ThriftHiveMetastore_add_master_key_presult__isset() : success(false), o1(false) {}
+  bool success;
   bool o1;
-  bool o2;
-} _ThriftHiveMetastore_commit_txn_presult__isset;
+} _ThriftHiveMetastore_add_master_key_presult__isset;
 
-class ThriftHiveMetastore_commit_txn_presult {
+class ThriftHiveMetastore_add_master_key_presult {
  public:
 
 
-  virtual ~ThriftHiveMetastore_commit_txn_presult() throw() {}
+  virtual ~ThriftHiveMetastore_add_master_key_presult() throw() {}
 
-  NoSuchTxnException o1;
-  TxnAbortedException o2;
+  int32_t* success;
+  MetaException o1;
 
-  _ThriftHiveMetastore_commit_txn_presult__isset __isset;
+  _ThriftHiveMetastore_add_master_key_presult__isset __isset;
 
   uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
 
 };
 
-typedef struct _ThriftHiveMetastore_lock_args__isset {
-  _ThriftHiveMetastore_lock_args__isset() : rqst(false) {}
-  bool rqst;
-} _ThriftHiveMetastore_lock_args__isset;
+typedef struct _ThriftHiveMetastore_update_master_key_args__isset {
+  _ThriftHiveMetastore_update_master_key_args__isset() : seq_number(false), key(false) {}
+  bool seq_number;
+  bool key;
+} _ThriftHiveMetastore_update_master_key_args__isset;
 
-class ThriftHiveMetastore_lock_args {
+class ThriftHiveMetastore_update_master_key_args {
  public:
 
-  ThriftHiveMetastore_lock_args() {
+  ThriftHiveMetastore_update_master_key_args() : seq_number(0), key() {
   }
 
-  virtual ~ThriftHiveMetastore_lock_args() throw() {}
+  virtual ~ThriftHiveMetastore_update_master_key_args() throw() {}
 
-  LockRequest rqst;
+  int32_t seq_number;
+  std::string key;
+
+  _ThriftHiveMetastore_update_master_key_args__isset __isset;
+
+  void __set_seq_number(const int32_t val) {
+    seq_number = val;
+  }
+
+  void __set_key(const std::string& val) {
+    key = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_update_master_key_args & rhs) const
+  {
+    if (!(seq_number == rhs.seq_number))
+      return false;
+    if (!(key == rhs.key))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_update_master_key_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_update_master_key_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_update_master_key_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_update_master_key_pargs() throw() {}
+
+  const int32_t* seq_number;
+  const std::string* key;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_update_master_key_result__isset {
+  _ThriftHiveMetastore_update_master_key_result__isset() : o1(false), o2(false) {}
+  bool o1;
+  bool o2;
+} _ThriftHiveMetastore_update_master_key_result__isset;
+
+class ThriftHiveMetastore_update_master_key_result {
+ public:
+
+  ThriftHiveMetastore_update_master_key_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_update_master_key_result() throw() {}
+
+  NoSuchObjectException o1;
+  MetaException o2;
+
+  _ThriftHiveMetastore_update_master_key_result__isset __isset;
+
+  void __set_o1(const NoSuchObjectException& val) {
+    o1 = val;
+  }
+
+  void __set_o2(const MetaException& val) {
+    o2 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_update_master_key_result & rhs) const
+  {
+    if (!(o1 == rhs.o1))
+      return false;
+    if (!(o2 == rhs.o2))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_update_master_key_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_update_master_key_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_update_master_key_presult__isset {
+  _ThriftHiveMetastore_update_master_key_presult__isset() : o1(false), o2(false) {}
+  bool o1;
+  bool o2;
+} _ThriftHiveMetastore_update_master_key_presult__isset;
+
+class ThriftHiveMetastore_update_master_key_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_update_master_key_presult() throw() {}
+
+  NoSuchObjectException o1;
+  MetaException o2;
+
+  _ThriftHiveMetastore_update_master_key_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+typedef struct _ThriftHiveMetastore_remove_master_key_args__isset {
+  _ThriftHiveMetastore_remove_master_key_args__isset() : key_seq(false) {}
+  bool key_seq;
+} _ThriftHiveMetastore_remove_master_key_args__isset;
+
+class ThriftHiveMetastore_remove_master_key_args {
+ public:
+
+  ThriftHiveMetastore_remove_master_key_args() : key_seq(0) {
+  }
+
+  virtual ~ThriftHiveMetastore_remove_master_key_args() throw() {}
+
+  int32_t key_seq;
+
+  _ThriftHiveMetastore_remove_master_key_args__isset __isset;
+
+  void __set_key_seq(const int32_t val) {
+    key_seq = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_remove_master_key_args & rhs) const
+  {
+    if (!(key_seq == rhs.key_seq))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_remove_master_key_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_remove_master_key_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_remove_master_key_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_remove_master_key_pargs() throw() {}
+
+  const int32_t* key_seq;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_remove_master_key_result__isset {
+  _ThriftHiveMetastore_remove_master_key_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_remove_master_key_result__isset;
+
+class ThriftHiveMetastore_remove_master_key_result {
+ public:
+
+  ThriftHiveMetastore_remove_master_key_result() : success(0) {
+  }
+
+  virtual ~ThriftHiveMetastore_remove_master_key_result() throw() {}
+
+  bool success;
+
+  _ThriftHiveMetastore_remove_master_key_result__isset __isset;
+
+  void __set_success(const bool val) {
+    success = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_remove_master_key_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_remove_master_key_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_remove_master_key_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_remove_master_key_presult__isset {
+  _ThriftHiveMetastore_remove_master_key_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_remove_master_key_presult__isset;
+
+class ThriftHiveMetastore_remove_master_key_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_remove_master_key_presult() throw() {}
+
+  bool* success;
+
+  _ThriftHiveMetastore_remove_master_key_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+
+class ThriftHiveMetastore_get_master_keys_args {
+ public:
+
+  ThriftHiveMetastore_get_master_keys_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_master_keys_args() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_get_master_keys_args & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_master_keys_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_master_keys_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_master_keys_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_master_keys_pargs() throw() {}
+
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_master_keys_result__isset {
+  _ThriftHiveMetastore_get_master_keys_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_master_keys_result__isset;
+
+class ThriftHiveMetastore_get_master_keys_result {
+ public:
+
+  ThriftHiveMetastore_get_master_keys_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_master_keys_result() throw() {}
+
+  std::vector<std::string>  success;
+
+  _ThriftHiveMetastore_get_master_keys_result__isset __isset;
+
+  void __set_success(const std::vector<std::string> & val) {
+    success = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_master_keys_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_master_keys_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_master_keys_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_master_keys_presult__isset {
+  _ThriftHiveMetastore_get_master_keys_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_master_keys_presult__isset;
+
+class ThriftHiveMetastore_get_master_keys_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_master_keys_presult() throw() {}
+
+  std::vector<std::string> * success;
+
+  _ThriftHiveMetastore_get_master_keys_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+
+class ThriftHiveMetastore_get_open_txns_args {
+ public:
+
+  ThriftHiveMetastore_get_open_txns_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_open_txns_args() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_get_open_txns_args & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_open_txns_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_open_txns_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_open_txns_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_open_txns_pargs() throw() {}
+
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_open_txns_result__isset {
+  _ThriftHiveMetastore_get_open_txns_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_open_txns_result__isset;
+
+class ThriftHiveMetastore_get_open_txns_result {
+ public:
+
+  ThriftHiveMetastore_get_open_txns_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_open_txns_result() throw() {}
+
+  GetOpenTxnsResponse success;
+
+  _ThriftHiveMetastore_get_open_txns_result__isset __isset;
+
+  void __set_success(const GetOpenTxnsResponse& val) {
+    success = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_open_txns_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_open_txns_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_open_txns_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_open_txns_presult__isset {
+  _ThriftHiveMetastore_get_open_txns_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_open_txns_presult__isset;
+
+class ThriftHiveMetastore_get_open_txns_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_open_txns_presult() throw() {}
+
+  GetOpenTxnsResponse* success;
+
+  _ThriftHiveMetastore_get_open_txns_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+
+class ThriftHiveMetastore_get_open_txns_info_args {
+ public:
+
+  ThriftHiveMetastore_get_open_txns_info_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_open_txns_info_args() throw() {}
+
+
+  bool operator == (const ThriftHiveMetastore_get_open_txns_info_args & /* rhs */) const
+  {
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_open_txns_info_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_open_txns_info_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_get_open_txns_info_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_open_txns_info_pargs() throw() {}
+
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_open_txns_info_result__isset {
+  _ThriftHiveMetastore_get_open_txns_info_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_open_txns_info_result__isset;
+
+class ThriftHiveMetastore_get_open_txns_info_result {
+ public:
+
+  ThriftHiveMetastore_get_open_txns_info_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_get_open_txns_info_result() throw() {}
+
+  GetOpenTxnsInfoResponse success;
+
+  _ThriftHiveMetastore_get_open_txns_info_result__isset __isset;
+
+  void __set_success(const GetOpenTxnsInfoResponse& val) {
+    success = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_get_open_txns_info_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_get_open_txns_info_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_get_open_txns_info_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_get_open_txns_info_presult__isset {
+  _ThriftHiveMetastore_get_open_txns_info_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_get_open_txns_info_presult__isset;
+
+class ThriftHiveMetastore_get_open_txns_info_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_get_open_txns_info_presult() throw() {}
+
+  GetOpenTxnsInfoResponse* success;
+
+  _ThriftHiveMetastore_get_open_txns_info_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+typedef struct _ThriftHiveMetastore_open_txns_args__isset {
+  _ThriftHiveMetastore_open_txns_args__isset() : rqst(false) {}
+  bool rqst;
+} _ThriftHiveMetastore_open_txns_args__isset;
+
+class ThriftHiveMetastore_open_txns_args {
+ public:
+
+  ThriftHiveMetastore_open_txns_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_open_txns_args() throw() {}
+
+  OpenTxnRequest rqst;
+
+  _ThriftHiveMetastore_open_txns_args__isset __isset;
+
+  void __set_rqst(const OpenTxnRequest& val) {
+    rqst = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_open_txns_args & rhs) const
+  {
+    if (!(rqst == rhs.rqst))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_open_txns_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_open_txns_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_open_txns_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_open_txns_pargs() throw() {}
+
+  const OpenTxnRequest* rqst;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_open_txns_result__isset {
+  _ThriftHiveMetastore_open_txns_result__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_open_txns_result__isset;
+
+class ThriftHiveMetastore_open_txns_result {
+ public:
+
+  ThriftHiveMetastore_open_txns_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_open_txns_result() throw() {}
+
+  OpenTxnsResponse success;
+
+  _ThriftHiveMetastore_open_txns_result__isset __isset;
+
+  void __set_success(const OpenTxnsResponse& val) {
+    success = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_open_txns_result & rhs) const
+  {
+    if (!(success == rhs.success))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_open_txns_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_open_txns_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_open_txns_presult__isset {
+  _ThriftHiveMetastore_open_txns_presult__isset() : success(false) {}
+  bool success;
+} _ThriftHiveMetastore_open_txns_presult__isset;
+
+class ThriftHiveMetastore_open_txns_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_open_txns_presult() throw() {}
+
+  OpenTxnsResponse* success;
+
+  _ThriftHiveMetastore_open_txns_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+typedef struct _ThriftHiveMetastore_abort_txn_args__isset {
+  _ThriftHiveMetastore_abort_txn_args__isset() : rqst(false) {}
+  bool rqst;
+} _ThriftHiveMetastore_abort_txn_args__isset;
+
+class ThriftHiveMetastore_abort_txn_args {
+ public:
+
+  ThriftHiveMetastore_abort_txn_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_abort_txn_args() throw() {}
+
+  AbortTxnRequest rqst;
+
+  _ThriftHiveMetastore_abort_txn_args__isset __isset;
+
+  void __set_rqst(const AbortTxnRequest& val) {
+    rqst = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_abort_txn_args & rhs) const
+  {
+    if (!(rqst == rhs.rqst))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_abort_txn_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_abort_txn_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_abort_txn_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_abort_txn_pargs() throw() {}
+
+  const AbortTxnRequest* rqst;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_abort_txn_result__isset {
+  _ThriftHiveMetastore_abort_txn_result__isset() : o1(false) {}
+  bool o1;
+} _ThriftHiveMetastore_abort_txn_result__isset;
+
+class ThriftHiveMetastore_abort_txn_result {
+ public:
+
+  ThriftHiveMetastore_abort_txn_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_abort_txn_result() throw() {}
+
+  NoSuchTxnException o1;
+
+  _ThriftHiveMetastore_abort_txn_result__isset __isset;
+
+  void __set_o1(const NoSuchTxnException& val) {
+    o1 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_abort_txn_result & rhs) const
+  {
+    if (!(o1 == rhs.o1))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_abort_txn_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_abort_txn_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_abort_txn_presult__isset {
+  _ThriftHiveMetastore_abort_txn_presult__isset() : o1(false) {}
+  bool o1;
+} _ThriftHiveMetastore_abort_txn_presult__isset;
+
+class ThriftHiveMetastore_abort_txn_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_abort_txn_presult() throw() {}
+
+  NoSuchTxnException o1;
+
+  _ThriftHiveMetastore_abort_txn_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+typedef struct _ThriftHiveMetastore_commit_txn_args__isset {
+  _ThriftHiveMetastore_commit_txn_args__isset() : rqst(false) {}
+  bool rqst;
+} _ThriftHiveMetastore_commit_txn_args__isset;
+
+class ThriftHiveMetastore_commit_txn_args {
+ public:
+
+  ThriftHiveMetastore_commit_txn_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_commit_txn_args() throw() {}
+
+  CommitTxnRequest rqst;
+
+  _ThriftHiveMetastore_commit_txn_args__isset __isset;
+
+  void __set_rqst(const CommitTxnRequest& val) {
+    rqst = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_commit_txn_args & rhs) const
+  {
+    if (!(rqst == rhs.rqst))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_commit_txn_args &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_commit_txn_args & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+
+class ThriftHiveMetastore_commit_txn_pargs {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_commit_txn_pargs() throw() {}
+
+  const CommitTxnRequest* rqst;
+
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_commit_txn_result__isset {
+  _ThriftHiveMetastore_commit_txn_result__isset() : o1(false), o2(false) {}
+  bool o1;
+  bool o2;
+} _ThriftHiveMetastore_commit_txn_result__isset;
+
+class ThriftHiveMetastore_commit_txn_result {
+ public:
+
+  ThriftHiveMetastore_commit_txn_result() {
+  }
+
+  virtual ~ThriftHiveMetastore_commit_txn_result() throw() {}
+
+  NoSuchTxnException o1;
+  TxnAbortedException o2;
+
+  _ThriftHiveMetastore_commit_txn_result__isset __isset;
+
+  void __set_o1(const NoSuchTxnException& val) {
+    o1 = val;
+  }
+
+  void __set_o2(const TxnAbortedException& val) {
+    o2 = val;
+  }
+
+  bool operator == (const ThriftHiveMetastore_commit_txn_result & rhs) const
+  {
+    if (!(o1 == rhs.o1))
+      return false;
+    if (!(o2 == rhs.o2))
+      return false;
+    return true;
+  }
+  bool operator != (const ThriftHiveMetastore_commit_txn_result &rhs) const {
+    return !(*this == rhs);
+  }
+
+  bool operator < (const ThriftHiveMetastore_commit_txn_result & ) const;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;
+
+};
+
+typedef struct _ThriftHiveMetastore_commit_txn_presult__isset {
+  _ThriftHiveMetastore_commit_txn_presult__isset() : o1(false), o2(false) {}
+  bool o1;
+  bool o2;
+} _ThriftHiveMetastore_commit_txn_presult__isset;
+
+class ThriftHiveMetastore_commit_txn_presult {
+ public:
+
+
+  virtual ~ThriftHiveMetastore_commit_txn_presult() throw() {}
+
+  NoSuchTxnException o1;
+  TxnAbortedException o2;
+
+  _ThriftHiveMetastore_commit_txn_presult__isset __isset;
+
+  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
+
+};
+
+typedef struct _ThriftHiveMetastore_lock_args__isset {
+  _ThriftHiveMetastore_lock_args__isset() : rqst(false) {}
+  bool rqst;
+} _ThriftHiveMetastore_lock_args__isset;
+
+class ThriftHiveMetastore_lock_args {
+ public:
+
+  ThriftHiveMetastore_lock_args() {
+  }
+
+  virtual ~ThriftHiveMetastore_lock_args() throw() {}
+
+  LockRequest rqst;
 
   _ThriftHiveMetastore_lock_args__isset __isset;
 
@@ -18246,6 +19156,30 @@ class ThriftHiveMetastoreClient : virtual public ThriftHiveMetastoreIf, public
   void cancel_delegation_token(const std::string& token_str_form);
   void send_cancel_delegation_token(const std::string& token_str_form);
   void recv_cancel_delegation_token();
+  bool add_token(const std::string& token_identifier, const std::string& delegation_token);
+  void send_add_token(const std::string& token_identifier, const std::string& delegation_token);
+  bool recv_add_token();
+  bool remove_token(const std::string& token_identifier);
+  void send_remove_token(const std::string& token_identifier);
+  bool recv_remove_token();
+  void get_token(std::string& _return, const std::string& token_identifier);
+  void send_get_token(const std::string& token_identifier);
+  void recv_get_token(std::string& _return);
+  void get_all_token_identifiers(std::vector<std::string> & _return);
+  void send_get_all_token_identifiers();
+  void recv_get_all_token_identifiers(std::vector<std::string> & _return);
+  int32_t add_master_key(const std::string& key);
+  void send_add_master_key(const std::string& key);
+  int32_t recv_add_master_key();
+  void update_master_key(const int32_t seq_number, const std::string& key);
+  void send_update_master_key(const int32_t seq_number, const std::string& key);
+  void recv_update_master_key();
+  bool remove_master_key(const int32_t key_seq);
+  void send_remove_master_key(const int32_t key_seq);
+  bool recv_remove_master_key();
+  void get_master_keys(std::vector<std::string> & _return);
+  void send_get_master_keys();
+  void recv_get_master_keys(std::vector<std::string> & _return);
   void get_open_txns(GetOpenTxnsResponse& _return);
   void send_get_open_txns();
   void recv_get_open_txns(GetOpenTxnsResponse& _return);
@@ -18417,6 +19351,14 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
   void process_get_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_renew_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_cancel_delegation_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_add_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_remove_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_all_token_identifiers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_add_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_update_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_remove_master_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
+  void process_get_master_keys(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_open_txns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_get_open_txns_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
   void process_open_txns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
@@ -18548,6 +19490,14 @@ class ThriftHiveMetastoreProcessor : public  ::facebook::fb303::FacebookServiceP
     processMap_["get_delegation_token"] = &ThriftHiveMetastoreProcessor::process_get_delegation_token;
     processMap_["renew_delegation_token"] = &ThriftHiveMetastoreProcessor::process_renew_delegation_token;
     processMap_["cancel_delegation_token"] = &ThriftHiveMetastoreProcessor::process_cancel_delegation_token;
+    processMap_["add_token"] = &ThriftHiveMetastoreProcessor::process_add_token;
+    processMap_["remove_token"] = &ThriftHiveMetastoreProcessor::process_remove_token;
+    processMap_["get_token"] = &ThriftHiveMetastoreProcessor::process_get_token;
+    processMap_["get_all_token_identifiers"] = &ThriftHiveMetastoreProcessor::process_get_all_token_identifiers;
+    processMap_["add_master_key"] = &ThriftHiveMetastoreProcessor::process_add_master_key;
+    processMap_["update_master_key"] = &ThriftHiveMetastoreProcessor::process_update_master_key;
+    processMap_["remove_master_key"] = &ThriftHiveMetastoreProcessor::process_remove_master_key;
+    processMap_["get_master_keys"] = &ThriftHiveMetastoreProcessor::process_get_master_keys;
     processMap_["get_open_txns"] = &ThriftHiveMetastoreProcessor::process_get_open_txns;
     processMap_["get_open_txns_info"] = &ThriftHiveMetastoreProcessor::process_get_open_txns_info;
     processMap_["open_txns"] = &ThriftHiveMetastoreProcessor::process_open_txns;
@@ -19653,6 +20603,81 @@ class ThriftHiveMetastoreMultiface : virtual public ThriftHiveMetastoreIf, publi
     ifaces_[i]->cancel_delegation_token(token_str_form);
   }
 
+  bool add_token(const std::string& token_identifier, const std::string& delegation_token) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->add_token(token_identifier, delegation_token);
+    }
+    return ifaces_[i]->add_token(token_identifier, delegation_token);
+  }
+
+  bool remove_token(const std::string& token_identifier) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->remove_token(token_identifier);
+    }
+    return ifaces_[i]->remove_token(token_identifier);
+  }
+
+  void get_token(std::string& _return, const std::string& token_identifier) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_token(_return, token_identifier);
+    }
+    ifaces_[i]->get_token(_return, token_identifier);
+    return;
+  }
+
+  void get_all_token_identifiers(std::vector<std::string> & _return) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_all_token_identifiers(_return);
+    }
+    ifaces_[i]->get_all_token_identifiers(_return);
+    return;
+  }
+
+  int32_t add_master_key(const std::string& key) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->add_master_key(key);
+    }
+    return ifaces_[i]->add_master_key(key);
+  }
+
+  void update_master_key(const int32_t seq_number, const std::string& key) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->update_master_key(seq_number, key);
+    }
+    ifaces_[i]->update_master_key(seq_number, key);
+  }
+
+  bool remove_master_key(const int32_t key_seq) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->remove_master_key(key_seq);
+    }
+    return ifaces_[i]->remove_master_key(key_seq);
+  }
+
+  void get_master_keys(std::vector<std::string> & _return) {
+    size_t sz = ifaces_.size();
+    size_t i = 0;
+    for (; i < (sz - 1); ++i) {
+      ifaces_[i]->get_master_keys(_return);
+    }
+    ifaces_[i]->get_master_keys(_return);
+    return;
+  }
+
   void get_open_txns(GetOpenTxnsResponse& _return) {
     size_t sz = ifaces_.size();
     size_t i = 0;
diff --git a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
index 31a0f8d..c1772af 100644
--- a/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
+++ b/metastore/src/gen/thrift/gen-cpp/ThriftHiveMetastore_server.skeleton.cpp
@@ -572,6 +572,46 @@ class ThriftHiveMetastoreHandler : virtual public ThriftHiveMetastoreIf {
     printf("cancel_delegation_token\n");
   }
 
+  bool add_token(const std::string& token_identifier, const std::string& delegation_token) {
+    // Your implementation goes here
+    printf("add_token\n");
+  }
+
+  bool remove_token(const std::string& token_identifier) {
+    // Your implementation goes here
+    printf("remove_token\n");
+  }
+
+  void get_token(std::string& _return, const std::string& token_identifier) {
+    // Your implementation goes here
+    printf("get_token\n");
+  }
+
+  void get_all_token_identifiers(std::vector<std::string> & _return) {
+    // Your implementation goes here
+    printf("get_all_token_identifiers\n");
+  }
+
+  int32_t add_master_key(const std::string& key) {
+    // Your implementation goes here
+    printf("add_master_key\n");
+  }
+
+  void update_master_key(const int32_t seq_number, const std::string& key) {
+    // Your implementation goes here
+    printf("update_master_key\n");
+  }
+
+  bool remove_master_key(const int32_t key_seq) {
+    // Your implementation goes here
+    printf("remove_master_key\n");
+  }
+
+  void get_master_keys(std::vector<std::string> & _return) {
+    // Your implementation goes here
+    printf("get_master_keys\n");
+  }
+
   void get_open_txns(GetOpenTxnsResponse& _return) {
     // Your implementation goes here
     printf("get_open_txns\n");
diff --git a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index e09a187..f1f3bea 100644
--- a/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -258,6 +258,22 @@
 
     public void cancel_delegation_token(String token_str_form) throws MetaException, org.apache.thrift.TException;
 
+    public boolean add_token(String token_identifier, String delegation_token) throws org.apache.thrift.TException;
+
+    public boolean remove_token(String token_identifier) throws org.apache.thrift.TException;
+
+    public String get_token(String token_identifier) throws org.apache.thrift.TException;
+
+    public List<String> get_all_token_identifiers() throws org.apache.thrift.TException;
+
+    public int add_master_key(String key) throws MetaException, org.apache.thrift.TException;
+
+    public void update_master_key(int seq_number, String key) throws NoSuchObjectException, MetaException, org.apache.thrift.TException;
+
+    public boolean remove_master_key(int key_seq) throws org.apache.thrift.TException;
+
+    public List<String> get_master_keys() throws org.apache.thrift.TException;
+
     public GetOpenTxnsResponse get_open_txns() throws org.apache.thrift.TException;
 
     public GetOpenTxnsInfoResponse get_open_txns_info() throws org.apache.thrift.TException;
@@ -516,6 +532,22 @@
 
     public void cancel_delegation_token(String token_str_form, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancel_delegation_token_call> resultHandler) throws org.apache.thrift.TException;
 
+    public void add_token(String token_identifier, String delegation_token, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_token_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void remove_token(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_token_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void get_token(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_token_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void get_all_token_identifiers(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_all_token_identifiers_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void add_master_key(String key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_master_key_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void update_master_key(int seq_number, String key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.update_master_key_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void remove_master_key(int key_seq, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_master_key_call> resultHandler) throws org.apache.thrift.TException;
+
+    public void get_master_keys(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_master_keys_call> resultHandler) throws org.apache.thrift.TException;
+
     public void get_open_txns(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_open_txns_call> resultHandler) throws org.apache.thrift.TException;
 
     public void get_open_txns_info(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_open_txns_info_call> resultHandler) throws org.apache.thrift.TException;
@@ -3910,6 +3942,196 @@ public void recv_cancel_delegation_token() throws MetaException, org.apache.thri
       return;
     }
 
+    public boolean add_token(String token_identifier, String delegation_token) throws org.apache.thrift.TException
+    {
+      send_add_token(token_identifier, delegation_token);
+      return recv_add_token();
+    }
+
+    public void send_add_token(String token_identifier, String delegation_token) throws org.apache.thrift.TException
+    {
+      add_token_args args = new add_token_args();
+      args.setToken_identifier(token_identifier);
+      args.setDelegation_token(delegation_token);
+      sendBase("add_token", args);
+    }
+
+    public boolean recv_add_token() throws org.apache.thrift.TException
+    {
+      add_token_result result = new add_token_result();
+      receiveBase(result, "add_token");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_token failed: unknown result");
+    }
+
+    public boolean remove_token(String token_identifier) throws org.apache.thrift.TException
+    {
+      send_remove_token(token_identifier);
+      return recv_remove_token();
+    }
+
+    public void send_remove_token(String token_identifier) throws org.apache.thrift.TException
+    {
+      remove_token_args args = new remove_token_args();
+      args.setToken_identifier(token_identifier);
+      sendBase("remove_token", args);
+    }
+
+    public boolean recv_remove_token() throws org.apache.thrift.TException
+    {
+      remove_token_result result = new remove_token_result();
+      receiveBase(result, "remove_token");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "remove_token failed: unknown result");
+    }
+
+    public String get_token(String token_identifier) throws org.apache.thrift.TException
+    {
+      send_get_token(token_identifier);
+      return recv_get_token();
+    }
+
+    public void send_get_token(String token_identifier) throws org.apache.thrift.TException
+    {
+      get_token_args args = new get_token_args();
+      args.setToken_identifier(token_identifier);
+      sendBase("get_token", args);
+    }
+
+    public String recv_get_token() throws org.apache.thrift.TException
+    {
+      get_token_result result = new get_token_result();
+      receiveBase(result, "get_token");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_token failed: unknown result");
+    }
+
+    public List<String> get_all_token_identifiers() throws org.apache.thrift.TException
+    {
+      send_get_all_token_identifiers();
+      return recv_get_all_token_identifiers();
+    }
+
+    public void send_get_all_token_identifiers() throws org.apache.thrift.TException
+    {
+      get_all_token_identifiers_args args = new get_all_token_identifiers_args();
+      sendBase("get_all_token_identifiers", args);
+    }
+
+    public List<String> recv_get_all_token_identifiers() throws org.apache.thrift.TException
+    {
+      get_all_token_identifiers_result result = new get_all_token_identifiers_result();
+      receiveBase(result, "get_all_token_identifiers");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_all_token_identifiers failed: unknown result");
+    }
+
+    public int add_master_key(String key) throws MetaException, org.apache.thrift.TException
+    {
+      send_add_master_key(key);
+      return recv_add_master_key();
+    }
+
+    public void send_add_master_key(String key) throws org.apache.thrift.TException
+    {
+      add_master_key_args args = new add_master_key_args();
+      args.setKey(key);
+      sendBase("add_master_key", args);
+    }
+
+    public int recv_add_master_key() throws MetaException, org.apache.thrift.TException
+    {
+      add_master_key_result result = new add_master_key_result();
+      receiveBase(result, "add_master_key");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "add_master_key failed: unknown result");
+    }
+
+    public void update_master_key(int seq_number, String key) throws NoSuchObjectException, MetaException, org.apache.thrift.TException
+    {
+      send_update_master_key(seq_number, key);
+      recv_update_master_key();
+    }
+
+    public void send_update_master_key(int seq_number, String key) throws org.apache.thrift.TException
+    {
+      update_master_key_args args = new update_master_key_args();
+      args.setSeq_number(seq_number);
+      args.setKey(key);
+      sendBase("update_master_key", args);
+    }
+
+    public void recv_update_master_key() throws NoSuchObjectException, MetaException, org.apache.thrift.TException
+    {
+      update_master_key_result result = new update_master_key_result();
+      receiveBase(result, "update_master_key");
+      if (result.o1 != null) {
+        throw result.o1;
+      }
+      if (result.o2 != null) {
+        throw result.o2;
+      }
+      return;
+    }
+
+    public boolean remove_master_key(int key_seq) throws org.apache.thrift.TException
+    {
+      send_remove_master_key(key_seq);
+      return recv_remove_master_key();
+    }
+
+    public void send_remove_master_key(int key_seq) throws org.apache.thrift.TException
+    {
+      remove_master_key_args args = new remove_master_key_args();
+      args.setKey_seq(key_seq);
+      sendBase("remove_master_key", args);
+    }
+
+    public boolean recv_remove_master_key() throws org.apache.thrift.TException
+    {
+      remove_master_key_result result = new remove_master_key_result();
+      receiveBase(result, "remove_master_key");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "remove_master_key failed: unknown result");
+    }
+
+    public List<String> get_master_keys() throws org.apache.thrift.TException
+    {
+      send_get_master_keys();
+      return recv_get_master_keys();
+    }
+
+    public void send_get_master_keys() throws org.apache.thrift.TException
+    {
+      get_master_keys_args args = new get_master_keys_args();
+      sendBase("get_master_keys", args);
+    }
+
+    public List<String> recv_get_master_keys() throws org.apache.thrift.TException
+    {
+      get_master_keys_result result = new get_master_keys_result();
+      receiveBase(result, "get_master_keys");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_master_keys failed: unknown result");
+    }
+
     public GetOpenTxnsResponse get_open_txns() throws org.apache.thrift.TException
     {
       send_get_open_txns();
@@ -8342,6 +8564,262 @@ public void getResult() throws MetaException, org.apache.thrift.TException {
       }
     }
 
+    public void add_token(String token_identifier, String delegation_token, org.apache.thrift.async.AsyncMethodCallback<add_token_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      add_token_call method_call = new add_token_call(token_identifier, delegation_token, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class add_token_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String token_identifier;
+      private String delegation_token;
+      public add_token_call(String token_identifier, String delegation_token, org.apache.thrift.async.AsyncMethodCallback<add_token_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.token_identifier = token_identifier;
+        this.delegation_token = delegation_token;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_token", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        add_token_args args = new add_token_args();
+        args.setToken_identifier(token_identifier);
+        args.setDelegation_token(delegation_token);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public boolean getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_add_token();
+      }
+    }
+
+    public void remove_token(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<remove_token_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      remove_token_call method_call = new remove_token_call(token_identifier, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class remove_token_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String token_identifier;
+      public remove_token_call(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<remove_token_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.token_identifier = token_identifier;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_token", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        remove_token_args args = new remove_token_args();
+        args.setToken_identifier(token_identifier);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public boolean getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_remove_token();
+      }
+    }
+
+    public void get_token(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<get_token_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_token_call method_call = new get_token_call(token_identifier, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_token_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String token_identifier;
+      public get_token_call(String token_identifier, org.apache.thrift.async.AsyncMethodCallback<get_token_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.token_identifier = token_identifier;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_token", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_token_args args = new get_token_args();
+        args.setToken_identifier(token_identifier);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public String getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_token();
+      }
+    }
+
+    public void get_all_token_identifiers(org.apache.thrift.async.AsyncMethodCallback<get_all_token_identifiers_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_all_token_identifiers_call method_call = new get_all_token_identifiers_call(resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_all_token_identifiers_call extends org.apache.thrift.async.TAsyncMethodCall {
+      public get_all_token_identifiers_call(org.apache.thrift.async.AsyncMethodCallback<get_all_token_identifiers_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_all_token_identifiers", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_all_token_identifiers_args args = new get_all_token_identifiers_args();
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public List<String> getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_all_token_identifiers();
+      }
+    }
+
+    public void add_master_key(String key, org.apache.thrift.async.AsyncMethodCallback<add_master_key_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      add_master_key_call method_call = new add_master_key_call(key, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class add_master_key_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String key;
+      public add_master_key_call(String key, org.apache.thrift.async.AsyncMethodCallback<add_master_key_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.key = key;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add_master_key", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        add_master_key_args args = new add_master_key_args();
+        args.setKey(key);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public int getResult() throws MetaException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_add_master_key();
+      }
+    }
+
+    public void update_master_key(int seq_number, String key, org.apache.thrift.async.AsyncMethodCallback<update_master_key_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      update_master_key_call method_call = new update_master_key_call(seq_number, key, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class update_master_key_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private int seq_number;
+      private String key;
+      public update_master_key_call(int seq_number, String key, org.apache.thrift.async.AsyncMethodCallback<update_master_key_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.seq_number = seq_number;
+        this.key = key;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update_master_key", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        update_master_key_args args = new update_master_key_args();
+        args.setSeq_number(seq_number);
+        args.setKey(key);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public void getResult() throws NoSuchObjectException, MetaException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        (new Client(prot)).recv_update_master_key();
+      }
+    }
+
+    public void remove_master_key(int key_seq, org.apache.thrift.async.AsyncMethodCallback<remove_master_key_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      remove_master_key_call method_call = new remove_master_key_call(key_seq, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class remove_master_key_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private int key_seq;
+      public remove_master_key_call(int key_seq, org.apache.thrift.async.AsyncMethodCallback<remove_master_key_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.key_seq = key_seq;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_master_key", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        remove_master_key_args args = new remove_master_key_args();
+        args.setKey_seq(key_seq);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public boolean getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_remove_master_key();
+      }
+    }
+
+    public void get_master_keys(org.apache.thrift.async.AsyncMethodCallback<get_master_keys_call> resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      get_master_keys_call method_call = new get_master_keys_call(resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class get_master_keys_call extends org.apache.thrift.async.TAsyncMethodCall {
+      public get_master_keys_call(org.apache.thrift.async.AsyncMethodCallback<get_master_keys_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_master_keys", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        get_master_keys_args args = new get_master_keys_args();
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public List<String> getResult() throws org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_get_master_keys();
+      }
+    }
+
     public void get_open_txns(org.apache.thrift.async.AsyncMethodCallback<get_open_txns_call> resultHandler) throws org.apache.thrift.TException {
       checkReady();
       get_open_txns_call method_call = new get_open_txns_call(resultHandler, this, ___protocolFactory, ___transport);
@@ -8997,6 +9475,14 @@ protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ?
       processMap.put("get_delegation_token", new get_delegation_token());
       processMap.put("renew_delegation_token", new renew_delegation_token());
       processMap.put("cancel_delegation_token", new cancel_delegation_token());
+      processMap.put("add_token", new add_token());
+      processMap.put("remove_token", new remove_token());
+      processMap.put("get_token", new get_token());
+      processMap.put("get_all_token_identifiers", new get_all_token_identifiers());
+      processMap.put("add_master_key", new add_master_key());
+      processMap.put("update_master_key", new update_master_key());
+      processMap.put("remove_master_key", new remove_master_key());
+      processMap.put("get_master_keys", new get_master_keys());
       processMap.put("get_open_txns", new get_open_txns());
       processMap.put("get_open_txns_info", new get_open_txns_info());
       processMap.put("open_txns", new open_txns());
@@ -11935,6 +12421,180 @@ public cancel_delegation_token_result getResult(I iface, cancel_delegation_token
       }
     }
 
+    public static class add_token<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_token_args> {
+      public add_token() {
+        super("add_token");
+      }
+
+      public add_token_args getEmptyArgsInstance() {
+        return new add_token_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public add_token_result getResult(I iface, add_token_args args) throws org.apache.thrift.TException {
+        add_token_result result = new add_token_result();
+        result.success = iface.add_token(args.token_identifier, args.delegation_token);
+        result.setSuccessIsSet(true);
+        return result;
+      }
+    }
+
+    public static class remove_token<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_token_args> {
+      public remove_token() {
+        super("remove_token");
+      }
+
+      public remove_token_args getEmptyArgsInstance() {
+        return new remove_token_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public remove_token_result getResult(I iface, remove_token_args args) throws org.apache.thrift.TException {
+        remove_token_result result = new remove_token_result();
+        result.success = iface.remove_token(args.token_identifier);
+        result.setSuccessIsSet(true);
+        return result;
+      }
+    }
+
+    public static class get_token<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_token_args> {
+      public get_token() {
+        super("get_token");
+      }
+
+      public get_token_args getEmptyArgsInstance() {
+        return new get_token_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_token_result getResult(I iface, get_token_args args) throws org.apache.thrift.TException {
+        get_token_result result = new get_token_result();
+        result.success = iface.get_token(args.token_identifier);
+        return result;
+      }
+    }
+
+    public static class get_all_token_identifiers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_all_token_identifiers_args> {
+      public get_all_token_identifiers() {
+        super("get_all_token_identifiers");
+      }
+
+      public get_all_token_identifiers_args getEmptyArgsInstance() {
+        return new get_all_token_identifiers_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_all_token_identifiers_result getResult(I iface, get_all_token_identifiers_args args) throws org.apache.thrift.TException {
+        get_all_token_identifiers_result result = new get_all_token_identifiers_result();
+        result.success = iface.get_all_token_identifiers();
+        return result;
+      }
+    }
+
+    public static class add_master_key<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_master_key_args> {
+      public add_master_key() {
+        super("add_master_key");
+      }
+
+      public add_master_key_args getEmptyArgsInstance() {
+        return new add_master_key_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public add_master_key_result getResult(I iface, add_master_key_args args) throws org.apache.thrift.TException {
+        add_master_key_result result = new add_master_key_result();
+        try {
+          result.success = iface.add_master_key(args.key);
+          result.setSuccessIsSet(true);
+        } catch (MetaException o1) {
+          result.o1 = o1;
+        }
+        return result;
+      }
+    }
+
+    public static class update_master_key<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_master_key_args> {
+      public update_master_key() {
+        super("update_master_key");
+      }
+
+      public update_master_key_args getEmptyArgsInstance() {
+        return new update_master_key_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public update_master_key_result getResult(I iface, update_master_key_args args) throws org.apache.thrift.TException {
+        update_master_key_result result = new update_master_key_result();
+        try {
+          iface.update_master_key(args.seq_number, args.key);
+        } catch (NoSuchObjectException o1) {
+          result.o1 = o1;
+        } catch (MetaException o2) {
+          result.o2 = o2;
+        }
+        return result;
+      }
+    }
+
+    public static class remove_master_key<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_master_key_args> {
+      public remove_master_key() {
+        super("remove_master_key");
+      }
+
+      public remove_master_key_args getEmptyArgsInstance() {
+        return new remove_master_key_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public remove_master_key_result getResult(I iface, remove_master_key_args args) throws org.apache.thrift.TException {
+        remove_master_key_result result = new remove_master_key_result();
+        result.success = iface.remove_master_key(args.key_seq);
+        result.setSuccessIsSet(true);
+        return result;
+      }
+    }
+
+    public static class get_master_keys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_master_keys_args> {
+      public get_master_keys() {
+        super("get_master_keys");
+      }
+
+      public get_master_keys_args getEmptyArgsInstance() {
+        return new get_master_keys_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public get_master_keys_result getResult(I iface, get_master_keys_args args) throws org.apache.thrift.TException {
+        get_master_keys_result result = new get_master_keys_result();
+        result.success = iface.get_master_keys();
+        return result;
+      }
+    }
+
     public static class get_open_txns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_open_txns_args> {
       public get_open_txns() {
         super("get_open_txns");
@@ -131458,21 +132118,6251 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof set_ugi_result)
-        return this.equals((set_ugi_result)that);
+      if (that instanceof set_ugi_result)
+        return this.equals((set_ugi_result)that);
+      return false;
+    }
+
+    public boolean equals(set_ugi_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(set_ugi_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      set_ugi_result typedOther = (set_ugi_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("set_ugi_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class set_ugi_resultStandardSchemeFactory implements SchemeFactory {
+      public set_ugi_resultStandardScheme getScheme() {
+        return new set_ugi_resultStandardScheme();
+      }
+    }
+
+    private static class set_ugi_resultStandardScheme extends StandardScheme<set_ugi_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list992 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list992.size);
+                  for (int _i993 = 0; _i993 < _list992.size; ++_i993)
+                  {
+                    String _elem994; // required
+                    _elem994 = iprot.readString();
+                    struct.success.add(_elem994);
+                  }
+                  iprot.readListEnd();
+                }
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
+            for (String _iter995 : struct.success)
+            {
+              oprot.writeString(_iter995);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class set_ugi_resultTupleSchemeFactory implements SchemeFactory {
+      public set_ugi_resultTupleScheme getScheme() {
+        return new set_ugi_resultTupleScheme();
+      }
+    }
+
+    private static class set_ugi_resultTupleScheme extends TupleScheme<set_ugi_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetSuccess()) {
+          {
+            oprot.writeI32(struct.success.size());
+            for (String _iter996 : struct.success)
+            {
+              oprot.writeString(_iter996);
+            }
+          }
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          {
+            org.apache.thrift.protocol.TList _list997 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list997.size);
+            for (int _i998 = 0; _i998 < _list997.size; ++_i998)
+            {
+              String _elem999; // required
+              _elem999 = iprot.readString();
+              struct.success.add(_elem999);
+            }
+          }
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_delegation_token_args implements org.apache.thrift.TBase<get_delegation_token_args, get_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_delegation_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("token_owner", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField RENEWER_KERBEROS_PRINCIPAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("renewer_kerberos_principal_name", org.apache.thrift.protocol.TType.STRING, (short)2);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_delegation_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_delegation_token_argsTupleSchemeFactory());
+    }
+
+    private String token_owner; // required
+    private String renewer_kerberos_principal_name; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_OWNER((short)1, "token_owner"),
+      RENEWER_KERBEROS_PRINCIPAL_NAME((short)2, "renewer_kerberos_principal_name");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_OWNER
+            return TOKEN_OWNER;
+          case 2: // RENEWER_KERBEROS_PRINCIPAL_NAME
+            return RENEWER_KERBEROS_PRINCIPAL_NAME;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_OWNER, new org.apache.thrift.meta_data.FieldMetaData("token_owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.RENEWER_KERBEROS_PRINCIPAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("renewer_kerberos_principal_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_delegation_token_args.class, metaDataMap);
+    }
+
+    public get_delegation_token_args() {
+    }
+
+    public get_delegation_token_args(
+      String token_owner,
+      String renewer_kerberos_principal_name)
+    {
+      this();
+      this.token_owner = token_owner;
+      this.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_delegation_token_args(get_delegation_token_args other) {
+      if (other.isSetToken_owner()) {
+        this.token_owner = other.token_owner;
+      }
+      if (other.isSetRenewer_kerberos_principal_name()) {
+        this.renewer_kerberos_principal_name = other.renewer_kerberos_principal_name;
+      }
+    }
+
+    public get_delegation_token_args deepCopy() {
+      return new get_delegation_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_owner = null;
+      this.renewer_kerberos_principal_name = null;
+    }
+
+    public String getToken_owner() {
+      return this.token_owner;
+    }
+
+    public void setToken_owner(String token_owner) {
+      this.token_owner = token_owner;
+    }
+
+    public void unsetToken_owner() {
+      this.token_owner = null;
+    }
+
+    /** Returns true if field token_owner is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_owner() {
+      return this.token_owner != null;
+    }
+
+    public void setToken_ownerIsSet(boolean value) {
+      if (!value) {
+        this.token_owner = null;
+      }
+    }
+
+    public String getRenewer_kerberos_principal_name() {
+      return this.renewer_kerberos_principal_name;
+    }
+
+    public void setRenewer_kerberos_principal_name(String renewer_kerberos_principal_name) {
+      this.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
+    }
+
+    public void unsetRenewer_kerberos_principal_name() {
+      this.renewer_kerberos_principal_name = null;
+    }
+
+    /** Returns true if field renewer_kerberos_principal_name is set (has been assigned a value) and false otherwise */
+    public boolean isSetRenewer_kerberos_principal_name() {
+      return this.renewer_kerberos_principal_name != null;
+    }
+
+    public void setRenewer_kerberos_principal_nameIsSet(boolean value) {
+      if (!value) {
+        this.renewer_kerberos_principal_name = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_OWNER:
+        if (value == null) {
+          unsetToken_owner();
+        } else {
+          setToken_owner((String)value);
+        }
+        break;
+
+      case RENEWER_KERBEROS_PRINCIPAL_NAME:
+        if (value == null) {
+          unsetRenewer_kerberos_principal_name();
+        } else {
+          setRenewer_kerberos_principal_name((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_OWNER:
+        return getToken_owner();
+
+      case RENEWER_KERBEROS_PRINCIPAL_NAME:
+        return getRenewer_kerberos_principal_name();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_OWNER:
+        return isSetToken_owner();
+      case RENEWER_KERBEROS_PRINCIPAL_NAME:
+        return isSetRenewer_kerberos_principal_name();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_delegation_token_args)
+        return this.equals((get_delegation_token_args)that);
+      return false;
+    }
+
+    public boolean equals(get_delegation_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_owner = true && this.isSetToken_owner();
+      boolean that_present_token_owner = true && that.isSetToken_owner();
+      if (this_present_token_owner || that_present_token_owner) {
+        if (!(this_present_token_owner && that_present_token_owner))
+          return false;
+        if (!this.token_owner.equals(that.token_owner))
+          return false;
+      }
+
+      boolean this_present_renewer_kerberos_principal_name = true && this.isSetRenewer_kerberos_principal_name();
+      boolean that_present_renewer_kerberos_principal_name = true && that.isSetRenewer_kerberos_principal_name();
+      if (this_present_renewer_kerberos_principal_name || that_present_renewer_kerberos_principal_name) {
+        if (!(this_present_renewer_kerberos_principal_name && that_present_renewer_kerberos_principal_name))
+          return false;
+        if (!this.renewer_kerberos_principal_name.equals(that.renewer_kerberos_principal_name))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_owner = true && (isSetToken_owner());
+      builder.append(present_token_owner);
+      if (present_token_owner)
+        builder.append(token_owner);
+
+      boolean present_renewer_kerberos_principal_name = true && (isSetRenewer_kerberos_principal_name());
+      builder.append(present_renewer_kerberos_principal_name);
+      if (present_renewer_kerberos_principal_name)
+        builder.append(renewer_kerberos_principal_name);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_delegation_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_delegation_token_args typedOther = (get_delegation_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_owner()).compareTo(typedOther.isSetToken_owner());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_owner()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_owner, typedOther.token_owner);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetRenewer_kerberos_principal_name()).compareTo(typedOther.isSetRenewer_kerberos_principal_name());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetRenewer_kerberos_principal_name()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renewer_kerberos_principal_name, typedOther.renewer_kerberos_principal_name);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_delegation_token_args(");
+      boolean first = true;
+
+      sb.append("token_owner:");
+      if (this.token_owner == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_owner);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("renewer_kerberos_principal_name:");
+      if (this.renewer_kerberos_principal_name == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.renewer_kerberos_principal_name);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
+      public get_delegation_token_argsStandardScheme getScheme() {
+        return new get_delegation_token_argsStandardScheme();
+      }
+    }
+
+    private static class get_delegation_token_argsStandardScheme extends StandardScheme<get_delegation_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_OWNER
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_owner = iprot.readString();
+                struct.setToken_ownerIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // RENEWER_KERBEROS_PRINCIPAL_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.renewer_kerberos_principal_name = iprot.readString();
+                struct.setRenewer_kerberos_principal_nameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_owner != null) {
+          oprot.writeFieldBegin(TOKEN_OWNER_FIELD_DESC);
+          oprot.writeString(struct.token_owner);
+          oprot.writeFieldEnd();
+        }
+        if (struct.renewer_kerberos_principal_name != null) {
+          oprot.writeFieldBegin(RENEWER_KERBEROS_PRINCIPAL_NAME_FIELD_DESC);
+          oprot.writeString(struct.renewer_kerberos_principal_name);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
+      public get_delegation_token_argsTupleScheme getScheme() {
+        return new get_delegation_token_argsTupleScheme();
+      }
+    }
+
+    private static class get_delegation_token_argsTupleScheme extends TupleScheme<get_delegation_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_owner()) {
+          optionals.set(0);
+        }
+        if (struct.isSetRenewer_kerberos_principal_name()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetToken_owner()) {
+          oprot.writeString(struct.token_owner);
+        }
+        if (struct.isSetRenewer_kerberos_principal_name()) {
+          oprot.writeString(struct.renewer_kerberos_principal_name);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.token_owner = iprot.readString();
+          struct.setToken_ownerIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.renewer_kerberos_principal_name = iprot.readString();
+          struct.setRenewer_kerberos_principal_nameIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_delegation_token_result implements org.apache.thrift.TBase<get_delegation_token_result, get_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_delegation_token_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_delegation_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_delegation_token_resultTupleSchemeFactory());
+    }
+
+    private String success; // required
+    private MetaException o1; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // O1
+            return O1;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_delegation_token_result.class, metaDataMap);
+    }
+
+    public get_delegation_token_result() {
+    }
+
+    public get_delegation_token_result(
+      String success,
+      MetaException o1)
+    {
+      this();
+      this.success = success;
+      this.o1 = o1;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_delegation_token_result(get_delegation_token_result other) {
+      if (other.isSetSuccess()) {
+        this.success = other.success;
+      }
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+    }
+
+    public get_delegation_token_result deepCopy() {
+      return new get_delegation_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+      this.o1 = null;
+    }
+
+    public String getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(String success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((String)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      case O1:
+        return getO1();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_delegation_token_result)
+        return this.equals((get_delegation_token_result)that);
+      return false;
+    }
+
+    public boolean equals(get_delegation_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_delegation_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_delegation_token_result typedOther = (get_delegation_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_delegation_token_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
+      public get_delegation_token_resultStandardScheme getScheme() {
+        return new get_delegation_token_resultStandardScheme();
+      }
+    }
+
+    private static class get_delegation_token_resultStandardScheme extends StandardScheme<get_delegation_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeString(struct.success);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
+      public get_delegation_token_resultTupleScheme getScheme() {
+        return new get_delegation_token_resultTupleScheme();
+      }
+    }
+
+    private static class get_delegation_token_resultTupleScheme extends TupleScheme<get_delegation_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetSuccess()) {
+          oprot.writeString(struct.success);
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.success = iprot.readString();
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class renew_delegation_token_args implements org.apache.thrift.TBase<renew_delegation_token_args, renew_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renew_delegation_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_STR_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("token_str_form", org.apache.thrift.protocol.TType.STRING, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new renew_delegation_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new renew_delegation_token_argsTupleSchemeFactory());
+    }
+
+    private String token_str_form; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_STR_FORM((short)1, "token_str_form");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_STR_FORM
+            return TOKEN_STR_FORM;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_STR_FORM, new org.apache.thrift.meta_data.FieldMetaData("token_str_form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renew_delegation_token_args.class, metaDataMap);
+    }
+
+    public renew_delegation_token_args() {
+    }
+
+    public renew_delegation_token_args(
+      String token_str_form)
+    {
+      this();
+      this.token_str_form = token_str_form;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public renew_delegation_token_args(renew_delegation_token_args other) {
+      if (other.isSetToken_str_form()) {
+        this.token_str_form = other.token_str_form;
+      }
+    }
+
+    public renew_delegation_token_args deepCopy() {
+      return new renew_delegation_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_str_form = null;
+    }
+
+    public String getToken_str_form() {
+      return this.token_str_form;
+    }
+
+    public void setToken_str_form(String token_str_form) {
+      this.token_str_form = token_str_form;
+    }
+
+    public void unsetToken_str_form() {
+      this.token_str_form = null;
+    }
+
+    /** Returns true if field token_str_form is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_str_form() {
+      return this.token_str_form != null;
+    }
+
+    public void setToken_str_formIsSet(boolean value) {
+      if (!value) {
+        this.token_str_form = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_STR_FORM:
+        if (value == null) {
+          unsetToken_str_form();
+        } else {
+          setToken_str_form((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_STR_FORM:
+        return getToken_str_form();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_STR_FORM:
+        return isSetToken_str_form();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof renew_delegation_token_args)
+        return this.equals((renew_delegation_token_args)that);
+      return false;
+    }
+
+    public boolean equals(renew_delegation_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_str_form = true && this.isSetToken_str_form();
+      boolean that_present_token_str_form = true && that.isSetToken_str_form();
+      if (this_present_token_str_form || that_present_token_str_form) {
+        if (!(this_present_token_str_form && that_present_token_str_form))
+          return false;
+        if (!this.token_str_form.equals(that.token_str_form))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_str_form = true && (isSetToken_str_form());
+      builder.append(present_token_str_form);
+      if (present_token_str_form)
+        builder.append(token_str_form);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(renew_delegation_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      renew_delegation_token_args typedOther = (renew_delegation_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_str_form()).compareTo(typedOther.isSetToken_str_form());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_str_form()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_str_form, typedOther.token_str_form);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("renew_delegation_token_args(");
+      boolean first = true;
+
+      sb.append("token_str_form:");
+      if (this.token_str_form == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_str_form);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class renew_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
+      public renew_delegation_token_argsStandardScheme getScheme() {
+        return new renew_delegation_token_argsStandardScheme();
+      }
+    }
+
+    private static class renew_delegation_token_argsStandardScheme extends StandardScheme<renew_delegation_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_STR_FORM
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_str_form = iprot.readString();
+                struct.setToken_str_formIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_str_form != null) {
+          oprot.writeFieldBegin(TOKEN_STR_FORM_FIELD_DESC);
+          oprot.writeString(struct.token_str_form);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class renew_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
+      public renew_delegation_token_argsTupleScheme getScheme() {
+        return new renew_delegation_token_argsTupleScheme();
+      }
+    }
+
+    private static class renew_delegation_token_argsTupleScheme extends TupleScheme<renew_delegation_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_str_form()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetToken_str_form()) {
+          oprot.writeString(struct.token_str_form);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.token_str_form = iprot.readString();
+          struct.setToken_str_formIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class renew_delegation_token_result implements org.apache.thrift.TBase<renew_delegation_token_result, renew_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renew_delegation_token_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new renew_delegation_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new renew_delegation_token_resultTupleSchemeFactory());
+    }
+
+    private long success; // required
+    private MetaException o1; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // O1
+            return O1;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renew_delegation_token_result.class, metaDataMap);
+    }
+
+    public renew_delegation_token_result() {
+    }
+
+    public renew_delegation_token_result(
+      long success,
+      MetaException o1)
+    {
+      this();
+      this.success = success;
+      setSuccessIsSet(true);
+      this.o1 = o1;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public renew_delegation_token_result(renew_delegation_token_result other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.success = other.success;
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+    }
+
+    public renew_delegation_token_result deepCopy() {
+      return new renew_delegation_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      setSuccessIsSet(false);
+      this.success = 0;
+      this.o1 = null;
+    }
+
+    public long getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(long success) {
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    public void unsetSuccess() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((Long)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return Long.valueOf(getSuccess());
+
+      case O1:
+        return getO1();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof renew_delegation_token_result)
+        return this.equals((renew_delegation_token_result)that);
+      return false;
+    }
+
+    public boolean equals(renew_delegation_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true;
+      boolean that_present_success = true;
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (this.success != that.success)
+          return false;
+      }
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(renew_delegation_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      renew_delegation_token_result typedOther = (renew_delegation_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("renew_delegation_token_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      sb.append(this.success);
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class renew_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
+      public renew_delegation_token_resultStandardScheme getScheme() {
+        return new renew_delegation_token_resultStandardScheme();
+      }
+    }
+
+    private static class renew_delegation_token_resultStandardScheme extends StandardScheme<renew_delegation_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
+                struct.success = iprot.readI64();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeI64(struct.success);
+          oprot.writeFieldEnd();
+        }
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class renew_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
+      public renew_delegation_token_resultTupleScheme getScheme() {
+        return new renew_delegation_token_resultTupleScheme();
+      }
+    }
+
+    private static class renew_delegation_token_resultTupleScheme extends TupleScheme<renew_delegation_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        if (struct.isSetO1()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetSuccess()) {
+          oprot.writeI64(struct.success);
+        }
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.success = iprot.readI64();
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class cancel_delegation_token_args implements org.apache.thrift.TBase<cancel_delegation_token_args, cancel_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_delegation_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_STR_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("token_str_form", org.apache.thrift.protocol.TType.STRING, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new cancel_delegation_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new cancel_delegation_token_argsTupleSchemeFactory());
+    }
+
+    private String token_str_form; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_STR_FORM((short)1, "token_str_form");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_STR_FORM
+            return TOKEN_STR_FORM;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_STR_FORM, new org.apache.thrift.meta_data.FieldMetaData("token_str_form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_delegation_token_args.class, metaDataMap);
+    }
+
+    public cancel_delegation_token_args() {
+    }
+
+    public cancel_delegation_token_args(
+      String token_str_form)
+    {
+      this();
+      this.token_str_form = token_str_form;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public cancel_delegation_token_args(cancel_delegation_token_args other) {
+      if (other.isSetToken_str_form()) {
+        this.token_str_form = other.token_str_form;
+      }
+    }
+
+    public cancel_delegation_token_args deepCopy() {
+      return new cancel_delegation_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_str_form = null;
+    }
+
+    public String getToken_str_form() {
+      return this.token_str_form;
+    }
+
+    public void setToken_str_form(String token_str_form) {
+      this.token_str_form = token_str_form;
+    }
+
+    public void unsetToken_str_form() {
+      this.token_str_form = null;
+    }
+
+    /** Returns true if field token_str_form is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_str_form() {
+      return this.token_str_form != null;
+    }
+
+    public void setToken_str_formIsSet(boolean value) {
+      if (!value) {
+        this.token_str_form = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_STR_FORM:
+        if (value == null) {
+          unsetToken_str_form();
+        } else {
+          setToken_str_form((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_STR_FORM:
+        return getToken_str_form();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_STR_FORM:
+        return isSetToken_str_form();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof cancel_delegation_token_args)
+        return this.equals((cancel_delegation_token_args)that);
+      return false;
+    }
+
+    public boolean equals(cancel_delegation_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_str_form = true && this.isSetToken_str_form();
+      boolean that_present_token_str_form = true && that.isSetToken_str_form();
+      if (this_present_token_str_form || that_present_token_str_form) {
+        if (!(this_present_token_str_form && that_present_token_str_form))
+          return false;
+        if (!this.token_str_form.equals(that.token_str_form))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_str_form = true && (isSetToken_str_form());
+      builder.append(present_token_str_form);
+      if (present_token_str_form)
+        builder.append(token_str_form);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(cancel_delegation_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      cancel_delegation_token_args typedOther = (cancel_delegation_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_str_form()).compareTo(typedOther.isSetToken_str_form());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_str_form()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_str_form, typedOther.token_str_form);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("cancel_delegation_token_args(");
+      boolean first = true;
+
+      sb.append("token_str_form:");
+      if (this.token_str_form == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_str_form);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class cancel_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
+      public cancel_delegation_token_argsStandardScheme getScheme() {
+        return new cancel_delegation_token_argsStandardScheme();
+      }
+    }
+
+    private static class cancel_delegation_token_argsStandardScheme extends StandardScheme<cancel_delegation_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_STR_FORM
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_str_form = iprot.readString();
+                struct.setToken_str_formIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_str_form != null) {
+          oprot.writeFieldBegin(TOKEN_STR_FORM_FIELD_DESC);
+          oprot.writeString(struct.token_str_form);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class cancel_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
+      public cancel_delegation_token_argsTupleScheme getScheme() {
+        return new cancel_delegation_token_argsTupleScheme();
+      }
+    }
+
+    private static class cancel_delegation_token_argsTupleScheme extends TupleScheme<cancel_delegation_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_str_form()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetToken_str_form()) {
+          oprot.writeString(struct.token_str_form);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.token_str_form = iprot.readString();
+          struct.setToken_str_formIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class cancel_delegation_token_result implements org.apache.thrift.TBase<cancel_delegation_token_result, cancel_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_delegation_token_result");
+
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new cancel_delegation_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new cancel_delegation_token_resultTupleSchemeFactory());
+    }
+
+    private MetaException o1; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      O1((short)1, "o1");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // O1
+            return O1;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_delegation_token_result.class, metaDataMap);
+    }
+
+    public cancel_delegation_token_result() {
+    }
+
+    public cancel_delegation_token_result(
+      MetaException o1)
+    {
+      this();
+      this.o1 = o1;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public cancel_delegation_token_result(cancel_delegation_token_result other) {
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+    }
+
+    public cancel_delegation_token_result deepCopy() {
+      return new cancel_delegation_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.o1 = null;
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case O1:
+        return getO1();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case O1:
+        return isSetO1();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof cancel_delegation_token_result)
+        return this.equals((cancel_delegation_token_result)that);
+      return false;
+    }
+
+    public boolean equals(cancel_delegation_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_o1 = true && this.isSetO1();
+      boolean that_present_o1 = true && that.isSetO1();
+      if (this_present_o1 || that_present_o1) {
+        if (!(this_present_o1 && that_present_o1))
+          return false;
+        if (!this.o1.equals(that.o1))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_o1 = true && (isSetO1());
+      builder.append(present_o1);
+      if (present_o1)
+        builder.append(o1);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(cancel_delegation_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      cancel_delegation_token_result typedOther = (cancel_delegation_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("cancel_delegation_token_result(");
+      boolean first = true;
+
+      sb.append("o1:");
+      if (this.o1 == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.o1);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class cancel_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
+      public cancel_delegation_token_resultStandardScheme getScheme() {
+        return new cancel_delegation_token_resultStandardScheme();
+      }
+    }
+
+    private static class cancel_delegation_token_resultStandardScheme extends StandardScheme<cancel_delegation_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new MetaException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.o1 != null) {
+          oprot.writeFieldBegin(O1_FIELD_DESC);
+          struct.o1.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class cancel_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
+      public cancel_delegation_token_resultTupleScheme getScheme() {
+        return new cancel_delegation_token_resultTupleScheme();
+      }
+    }
+
+    private static class cancel_delegation_token_resultTupleScheme extends TupleScheme<cancel_delegation_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetO1()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetO1()) {
+          struct.o1.write(oprot);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.o1 = new MetaException();
+          struct.o1.read(iprot);
+          struct.setO1IsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class add_token_args implements org.apache.thrift.TBase<add_token_args, add_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("token_identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField DELEGATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("delegation_token", org.apache.thrift.protocol.TType.STRING, (short)2);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new add_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new add_token_argsTupleSchemeFactory());
+    }
+
+    private String token_identifier; // required
+    private String delegation_token; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_IDENTIFIER((short)1, "token_identifier"),
+      DELEGATION_TOKEN((short)2, "delegation_token");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_IDENTIFIER
+            return TOKEN_IDENTIFIER;
+          case 2: // DELEGATION_TOKEN
+            return DELEGATION_TOKEN;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("token_identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.DELEGATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("delegation_token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_token_args.class, metaDataMap);
+    }
+
+    public add_token_args() {
+    }
+
+    public add_token_args(
+      String token_identifier,
+      String delegation_token)
+    {
+      this();
+      this.token_identifier = token_identifier;
+      this.delegation_token = delegation_token;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public add_token_args(add_token_args other) {
+      if (other.isSetToken_identifier()) {
+        this.token_identifier = other.token_identifier;
+      }
+      if (other.isSetDelegation_token()) {
+        this.delegation_token = other.delegation_token;
+      }
+    }
+
+    public add_token_args deepCopy() {
+      return new add_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_identifier = null;
+      this.delegation_token = null;
+    }
+
+    public String getToken_identifier() {
+      return this.token_identifier;
+    }
+
+    public void setToken_identifier(String token_identifier) {
+      this.token_identifier = token_identifier;
+    }
+
+    public void unsetToken_identifier() {
+      this.token_identifier = null;
+    }
+
+    /** Returns true if field token_identifier is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_identifier() {
+      return this.token_identifier != null;
+    }
+
+    public void setToken_identifierIsSet(boolean value) {
+      if (!value) {
+        this.token_identifier = null;
+      }
+    }
+
+    public String getDelegation_token() {
+      return this.delegation_token;
+    }
+
+    public void setDelegation_token(String delegation_token) {
+      this.delegation_token = delegation_token;
+    }
+
+    public void unsetDelegation_token() {
+      this.delegation_token = null;
+    }
+
+    /** Returns true if field delegation_token is set (has been assigned a value) and false otherwise */
+    public boolean isSetDelegation_token() {
+      return this.delegation_token != null;
+    }
+
+    public void setDelegation_tokenIsSet(boolean value) {
+      if (!value) {
+        this.delegation_token = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        if (value == null) {
+          unsetToken_identifier();
+        } else {
+          setToken_identifier((String)value);
+        }
+        break;
+
+      case DELEGATION_TOKEN:
+        if (value == null) {
+          unsetDelegation_token();
+        } else {
+          setDelegation_token((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return getToken_identifier();
+
+      case DELEGATION_TOKEN:
+        return getDelegation_token();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return isSetToken_identifier();
+      case DELEGATION_TOKEN:
+        return isSetDelegation_token();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof add_token_args)
+        return this.equals((add_token_args)that);
+      return false;
+    }
+
+    public boolean equals(add_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_identifier = true && this.isSetToken_identifier();
+      boolean that_present_token_identifier = true && that.isSetToken_identifier();
+      if (this_present_token_identifier || that_present_token_identifier) {
+        if (!(this_present_token_identifier && that_present_token_identifier))
+          return false;
+        if (!this.token_identifier.equals(that.token_identifier))
+          return false;
+      }
+
+      boolean this_present_delegation_token = true && this.isSetDelegation_token();
+      boolean that_present_delegation_token = true && that.isSetDelegation_token();
+      if (this_present_delegation_token || that_present_delegation_token) {
+        if (!(this_present_delegation_token && that_present_delegation_token))
+          return false;
+        if (!this.delegation_token.equals(that.delegation_token))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_identifier = true && (isSetToken_identifier());
+      builder.append(present_token_identifier);
+      if (present_token_identifier)
+        builder.append(token_identifier);
+
+      boolean present_delegation_token = true && (isSetDelegation_token());
+      builder.append(present_delegation_token);
+      if (present_delegation_token)
+        builder.append(delegation_token);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(add_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      add_token_args typedOther = (add_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_identifier()).compareTo(typedOther.isSetToken_identifier());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_identifier()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_identifier, typedOther.token_identifier);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetDelegation_token()).compareTo(typedOther.isSetDelegation_token());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetDelegation_token()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delegation_token, typedOther.delegation_token);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("add_token_args(");
+      boolean first = true;
+
+      sb.append("token_identifier:");
+      if (this.token_identifier == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_identifier);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("delegation_token:");
+      if (this.delegation_token == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.delegation_token);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class add_token_argsStandardSchemeFactory implements SchemeFactory {
+      public add_token_argsStandardScheme getScheme() {
+        return new add_token_argsStandardScheme();
+      }
+    }
+
+    private static class add_token_argsStandardScheme extends StandardScheme<add_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, add_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_IDENTIFIER
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_identifier = iprot.readString();
+                struct.setToken_identifierIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // DELEGATION_TOKEN
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.delegation_token = iprot.readString();
+                struct.setDelegation_tokenIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, add_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_identifier != null) {
+          oprot.writeFieldBegin(TOKEN_IDENTIFIER_FIELD_DESC);
+          oprot.writeString(struct.token_identifier);
+          oprot.writeFieldEnd();
+        }
+        if (struct.delegation_token != null) {
+          oprot.writeFieldBegin(DELEGATION_TOKEN_FIELD_DESC);
+          oprot.writeString(struct.delegation_token);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class add_token_argsTupleSchemeFactory implements SchemeFactory {
+      public add_token_argsTupleScheme getScheme() {
+        return new add_token_argsTupleScheme();
+      }
+    }
+
+    private static class add_token_argsTupleScheme extends TupleScheme<add_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, add_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_identifier()) {
+          optionals.set(0);
+        }
+        if (struct.isSetDelegation_token()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetToken_identifier()) {
+          oprot.writeString(struct.token_identifier);
+        }
+        if (struct.isSetDelegation_token()) {
+          oprot.writeString(struct.delegation_token);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, add_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.token_identifier = iprot.readString();
+          struct.setToken_identifierIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.delegation_token = iprot.readString();
+          struct.setDelegation_tokenIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class add_token_result implements org.apache.thrift.TBase<add_token_result, add_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_token_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new add_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new add_token_resultTupleSchemeFactory());
+    }
+
+    private boolean success; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_token_result.class, metaDataMap);
+    }
+
+    public add_token_result() {
+    }
+
+    public add_token_result(
+      boolean success)
+    {
+      this();
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public add_token_result(add_token_result other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.success = other.success;
+    }
+
+    public add_token_result deepCopy() {
+      return new add_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      setSuccessIsSet(false);
+      this.success = false;
+    }
+
+    public boolean isSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(boolean success) {
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    public void unsetSuccess() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((Boolean)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return Boolean.valueOf(isSuccess());
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof add_token_result)
+        return this.equals((add_token_result)that);
+      return false;
+    }
+
+    public boolean equals(add_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true;
+      boolean that_present_success = true;
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (this.success != that.success)
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(add_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      add_token_result typedOther = (add_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("add_token_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      sb.append(this.success);
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class add_token_resultStandardSchemeFactory implements SchemeFactory {
+      public add_token_resultStandardScheme getScheme() {
+        return new add_token_resultStandardScheme();
+      }
+    }
+
+    private static class add_token_resultStandardScheme extends StandardScheme<add_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, add_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
+                struct.success = iprot.readBool();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, add_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class add_token_resultTupleSchemeFactory implements SchemeFactory {
+      public add_token_resultTupleScheme getScheme() {
+        return new add_token_resultTupleScheme();
+      }
+    }
+
+    private static class add_token_resultTupleScheme extends TupleScheme<add_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, add_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          oprot.writeBool(struct.success);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, add_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.success = iprot.readBool();
+          struct.setSuccessIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class remove_token_args implements org.apache.thrift.TBase<remove_token_args, remove_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("token_identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new remove_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new remove_token_argsTupleSchemeFactory());
+    }
+
+    private String token_identifier; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_IDENTIFIER((short)1, "token_identifier");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_IDENTIFIER
+            return TOKEN_IDENTIFIER;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("token_identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_token_args.class, metaDataMap);
+    }
+
+    public remove_token_args() {
+    }
+
+    public remove_token_args(
+      String token_identifier)
+    {
+      this();
+      this.token_identifier = token_identifier;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public remove_token_args(remove_token_args other) {
+      if (other.isSetToken_identifier()) {
+        this.token_identifier = other.token_identifier;
+      }
+    }
+
+    public remove_token_args deepCopy() {
+      return new remove_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_identifier = null;
+    }
+
+    public String getToken_identifier() {
+      return this.token_identifier;
+    }
+
+    public void setToken_identifier(String token_identifier) {
+      this.token_identifier = token_identifier;
+    }
+
+    public void unsetToken_identifier() {
+      this.token_identifier = null;
+    }
+
+    /** Returns true if field token_identifier is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_identifier() {
+      return this.token_identifier != null;
+    }
+
+    public void setToken_identifierIsSet(boolean value) {
+      if (!value) {
+        this.token_identifier = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        if (value == null) {
+          unsetToken_identifier();
+        } else {
+          setToken_identifier((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return getToken_identifier();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return isSetToken_identifier();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof remove_token_args)
+        return this.equals((remove_token_args)that);
+      return false;
+    }
+
+    public boolean equals(remove_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_identifier = true && this.isSetToken_identifier();
+      boolean that_present_token_identifier = true && that.isSetToken_identifier();
+      if (this_present_token_identifier || that_present_token_identifier) {
+        if (!(this_present_token_identifier && that_present_token_identifier))
+          return false;
+        if (!this.token_identifier.equals(that.token_identifier))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_identifier = true && (isSetToken_identifier());
+      builder.append(present_token_identifier);
+      if (present_token_identifier)
+        builder.append(token_identifier);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(remove_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      remove_token_args typedOther = (remove_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_identifier()).compareTo(typedOther.isSetToken_identifier());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_identifier()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_identifier, typedOther.token_identifier);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("remove_token_args(");
+      boolean first = true;
+
+      sb.append("token_identifier:");
+      if (this.token_identifier == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_identifier);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class remove_token_argsStandardSchemeFactory implements SchemeFactory {
+      public remove_token_argsStandardScheme getScheme() {
+        return new remove_token_argsStandardScheme();
+      }
+    }
+
+    private static class remove_token_argsStandardScheme extends StandardScheme<remove_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_IDENTIFIER
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_identifier = iprot.readString();
+                struct.setToken_identifierIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_identifier != null) {
+          oprot.writeFieldBegin(TOKEN_IDENTIFIER_FIELD_DESC);
+          oprot.writeString(struct.token_identifier);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class remove_token_argsTupleSchemeFactory implements SchemeFactory {
+      public remove_token_argsTupleScheme getScheme() {
+        return new remove_token_argsTupleScheme();
+      }
+    }
+
+    private static class remove_token_argsTupleScheme extends TupleScheme<remove_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, remove_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_identifier()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetToken_identifier()) {
+          oprot.writeString(struct.token_identifier);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, remove_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.token_identifier = iprot.readString();
+          struct.setToken_identifierIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class remove_token_result implements org.apache.thrift.TBase<remove_token_result, remove_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_token_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new remove_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new remove_token_resultTupleSchemeFactory());
+    }
+
+    private boolean success; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_token_result.class, metaDataMap);
+    }
+
+    public remove_token_result() {
+    }
+
+    public remove_token_result(
+      boolean success)
+    {
+      this();
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public remove_token_result(remove_token_result other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.success = other.success;
+    }
+
+    public remove_token_result deepCopy() {
+      return new remove_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      setSuccessIsSet(false);
+      this.success = false;
+    }
+
+    public boolean isSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(boolean success) {
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    public void unsetSuccess() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((Boolean)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return Boolean.valueOf(isSuccess());
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof remove_token_result)
+        return this.equals((remove_token_result)that);
+      return false;
+    }
+
+    public boolean equals(remove_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true;
+      boolean that_present_success = true;
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (this.success != that.success)
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(remove_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      remove_token_result typedOther = (remove_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("remove_token_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      sb.append(this.success);
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class remove_token_resultStandardSchemeFactory implements SchemeFactory {
+      public remove_token_resultStandardScheme getScheme() {
+        return new remove_token_resultStandardScheme();
+      }
+    }
+
+    private static class remove_token_resultStandardScheme extends StandardScheme<remove_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
+                struct.success = iprot.readBool();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.isSetSuccess()) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeBool(struct.success);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class remove_token_resultTupleSchemeFactory implements SchemeFactory {
+      public remove_token_resultTupleScheme getScheme() {
+        return new remove_token_resultTupleScheme();
+      }
+    }
+
+    private static class remove_token_resultTupleScheme extends TupleScheme<remove_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, remove_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          oprot.writeBool(struct.success);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, remove_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.success = iprot.readBool();
+          struct.setSuccessIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_token_args implements org.apache.thrift.TBase<get_token_args, get_token_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_token_args");
+
+    private static final org.apache.thrift.protocol.TField TOKEN_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("token_identifier", org.apache.thrift.protocol.TType.STRING, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_token_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_token_argsTupleSchemeFactory());
+    }
+
+    private String token_identifier; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      TOKEN_IDENTIFIER((short)1, "token_identifier");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // TOKEN_IDENTIFIER
+            return TOKEN_IDENTIFIER;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.TOKEN_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("token_identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_token_args.class, metaDataMap);
+    }
+
+    public get_token_args() {
+    }
+
+    public get_token_args(
+      String token_identifier)
+    {
+      this();
+      this.token_identifier = token_identifier;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_token_args(get_token_args other) {
+      if (other.isSetToken_identifier()) {
+        this.token_identifier = other.token_identifier;
+      }
+    }
+
+    public get_token_args deepCopy() {
+      return new get_token_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.token_identifier = null;
+    }
+
+    public String getToken_identifier() {
+      return this.token_identifier;
+    }
+
+    public void setToken_identifier(String token_identifier) {
+      this.token_identifier = token_identifier;
+    }
+
+    public void unsetToken_identifier() {
+      this.token_identifier = null;
+    }
+
+    /** Returns true if field token_identifier is set (has been assigned a value) and false otherwise */
+    public boolean isSetToken_identifier() {
+      return this.token_identifier != null;
+    }
+
+    public void setToken_identifierIsSet(boolean value) {
+      if (!value) {
+        this.token_identifier = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        if (value == null) {
+          unsetToken_identifier();
+        } else {
+          setToken_identifier((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return getToken_identifier();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case TOKEN_IDENTIFIER:
+        return isSetToken_identifier();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_token_args)
+        return this.equals((get_token_args)that);
+      return false;
+    }
+
+    public boolean equals(get_token_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_token_identifier = true && this.isSetToken_identifier();
+      boolean that_present_token_identifier = true && that.isSetToken_identifier();
+      if (this_present_token_identifier || that_present_token_identifier) {
+        if (!(this_present_token_identifier && that_present_token_identifier))
+          return false;
+        if (!this.token_identifier.equals(that.token_identifier))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_token_identifier = true && (isSetToken_identifier());
+      builder.append(present_token_identifier);
+      if (present_token_identifier)
+        builder.append(token_identifier);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_token_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_token_args typedOther = (get_token_args)other;
+
+      lastComparison = Boolean.valueOf(isSetToken_identifier()).compareTo(typedOther.isSetToken_identifier());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetToken_identifier()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_identifier, typedOther.token_identifier);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_token_args(");
+      boolean first = true;
+
+      sb.append("token_identifier:");
+      if (this.token_identifier == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.token_identifier);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_token_argsStandardSchemeFactory implements SchemeFactory {
+      public get_token_argsStandardScheme getScheme() {
+        return new get_token_argsStandardScheme();
+      }
+    }
+
+    private static class get_token_argsStandardScheme extends StandardScheme<get_token_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_token_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // TOKEN_IDENTIFIER
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.token_identifier = iprot.readString();
+                struct.setToken_identifierIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_token_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.token_identifier != null) {
+          oprot.writeFieldBegin(TOKEN_IDENTIFIER_FIELD_DESC);
+          oprot.writeString(struct.token_identifier);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_token_argsTupleSchemeFactory implements SchemeFactory {
+      public get_token_argsTupleScheme getScheme() {
+        return new get_token_argsTupleScheme();
+      }
+    }
+
+    private static class get_token_argsTupleScheme extends TupleScheme<get_token_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetToken_identifier()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetToken_identifier()) {
+          oprot.writeString(struct.token_identifier);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_token_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.token_identifier = iprot.readString();
+          struct.setToken_identifierIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_token_result implements org.apache.thrift.TBase<get_token_result, get_token_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_token_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_token_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_token_resultTupleSchemeFactory());
+    }
+
+    private String success; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_token_result.class, metaDataMap);
+    }
+
+    public get_token_result() {
+    }
+
+    public get_token_result(
+      String success)
+    {
+      this();
+      this.success = success;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_token_result(get_token_result other) {
+      if (other.isSetSuccess()) {
+        this.success = other.success;
+      }
+    }
+
+    public get_token_result deepCopy() {
+      return new get_token_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+    }
+
+    public String getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(String success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_token_result)
+        return this.equals((get_token_result)that);
+      return false;
+    }
+
+    public boolean equals(get_token_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_token_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_token_result typedOther = (get_token_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_token_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_token_resultStandardSchemeFactory implements SchemeFactory {
+      public get_token_resultStandardScheme getScheme() {
+        return new get_token_resultStandardScheme();
+      }
+    }
+
+    private static class get_token_resultStandardScheme extends StandardScheme<get_token_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_token_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_token_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeString(struct.success);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_token_resultTupleSchemeFactory implements SchemeFactory {
+      public get_token_resultTupleScheme getScheme() {
+        return new get_token_resultTupleScheme();
+      }
+    }
+
+    private static class get_token_resultTupleScheme extends TupleScheme<get_token_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          oprot.writeString(struct.success);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_token_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.success = iprot.readString();
+          struct.setSuccessIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class get_all_token_identifiers_args implements org.apache.thrift.TBase<get_all_token_identifiers_args, get_all_token_identifiers_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_token_identifiers_args");
+
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_all_token_identifiers_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_all_token_identifiers_argsTupleSchemeFactory());
+    }
+
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+;
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_token_identifiers_args.class, metaDataMap);
+    }
+
+    public get_all_token_identifiers_args() {
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_all_token_identifiers_args(get_all_token_identifiers_args other) {
+    }
+
+    public get_all_token_identifiers_args deepCopy() {
+      return new get_all_token_identifiers_args(this);
+    }
+
+    @Override
+    public void clear() {
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_all_token_identifiers_args)
+        return this.equals((get_all_token_identifiers_args)that);
+      return false;
+    }
+
+    public boolean equals(get_all_token_identifiers_args that) {
+      if (that == null)
+        return false;
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_all_token_identifiers_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_all_token_identifiers_args typedOther = (get_all_token_identifiers_args)other;
+
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_all_token_identifiers_args(");
+      boolean first = true;
+
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_all_token_identifiers_argsStandardSchemeFactory implements SchemeFactory {
+      public get_all_token_identifiers_argsStandardScheme getScheme() {
+        return new get_all_token_identifiers_argsStandardScheme();
+      }
+    }
+
+    private static class get_all_token_identifiers_argsStandardScheme extends StandardScheme<get_all_token_identifiers_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_token_identifiers_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_token_identifiers_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_all_token_identifiers_argsTupleSchemeFactory implements SchemeFactory {
+      public get_all_token_identifiers_argsTupleScheme getScheme() {
+        return new get_all_token_identifiers_argsTupleScheme();
+      }
+    }
+
+    private static class get_all_token_identifiers_argsTupleScheme extends TupleScheme<get_all_token_identifiers_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_token_identifiers_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_token_identifiers_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+      }
+    }
+
+  }
+
+  public static class get_all_token_identifiers_result implements org.apache.thrift.TBase<get_all_token_identifiers_result, get_all_token_identifiers_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_all_token_identifiers_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new get_all_token_identifiers_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_all_token_identifiers_resultTupleSchemeFactory());
+    }
+
+    private List<String> success; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_all_token_identifiers_result.class, metaDataMap);
+    }
+
+    public get_all_token_identifiers_result() {
+    }
+
+    public get_all_token_identifiers_result(
+      List<String> success)
+    {
+      this();
+      this.success = success;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public get_all_token_identifiers_result(get_all_token_identifiers_result other) {
+      if (other.isSetSuccess()) {
+        List<String> __this__success = new ArrayList<String>();
+        for (String other_element : other.success) {
+          __this__success.add(other_element);
+        }
+        this.success = __this__success;
+      }
+    }
+
+    public get_all_token_identifiers_result deepCopy() {
+      return new get_all_token_identifiers_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+    }
+
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
+    }
+
+    public java.util.Iterator<String> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
+    }
+
+    public void addToSuccess(String elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<String>();
+      }
+      this.success.add(elem);
+    }
+
+    public List<String> getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(List<String> success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((List<String>)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof get_all_token_identifiers_result)
+        return this.equals((get_all_token_identifiers_result)that);
+      return false;
+    }
+
+    public boolean equals(get_all_token_identifiers_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(get_all_token_identifiers_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      get_all_token_identifiers_result typedOther = (get_all_token_identifiers_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+      }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("get_all_token_identifiers_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class get_all_token_identifiers_resultStandardSchemeFactory implements SchemeFactory {
+      public get_all_token_identifiers_resultStandardScheme getScheme() {
+        return new get_all_token_identifiers_resultStandardScheme();
+      }
+    }
+
+    private static class get_all_token_identifiers_resultStandardScheme extends StandardScheme<get_all_token_identifiers_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_all_token_identifiers_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list1000 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list1000.size);
+                  for (int _i1001 = 0; _i1001 < _list1000.size; ++_i1001)
+                  {
+                    String _elem1002; // required
+                    _elem1002 = iprot.readString();
+                    struct.success.add(_elem1002);
+                  }
+                  iprot.readListEnd();
+                }
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_all_token_identifiers_result struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
+            for (String _iter1003 : struct.success)
+            {
+              oprot.writeString(_iter1003);
+            }
+            oprot.writeListEnd();
+          }
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class get_all_token_identifiers_resultTupleSchemeFactory implements SchemeFactory {
+      public get_all_token_identifiers_resultTupleScheme getScheme() {
+        return new get_all_token_identifiers_resultTupleScheme();
+      }
+    }
+
+    private static class get_all_token_identifiers_resultTupleScheme extends TupleScheme<get_all_token_identifiers_result> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_all_token_identifiers_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetSuccess()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetSuccess()) {
+          {
+            oprot.writeI32(struct.success.size());
+            for (String _iter1004 : struct.success)
+            {
+              oprot.writeString(_iter1004);
+            }
+          }
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_all_token_identifiers_result struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          {
+            org.apache.thrift.protocol.TList _list1005 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list1005.size);
+            for (int _i1006 = 0; _i1006 < _list1005.size; ++_i1006)
+            {
+              String _elem1007; // required
+              _elem1007 = iprot.readString();
+              struct.success.add(_elem1007);
+            }
+          }
+          struct.setSuccessIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class add_master_key_args implements org.apache.thrift.TBase<add_master_key_args, add_master_key_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_master_key_args");
+
+    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new add_master_key_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new add_master_key_argsTupleSchemeFactory());
+    }
+
+    private String key; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      KEY((short)1, "key");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // KEY
+            return KEY;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_master_key_args.class, metaDataMap);
+    }
+
+    public add_master_key_args() {
+    }
+
+    public add_master_key_args(
+      String key)
+    {
+      this();
+      this.key = key;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public add_master_key_args(add_master_key_args other) {
+      if (other.isSetKey()) {
+        this.key = other.key;
+      }
+    }
+
+    public add_master_key_args deepCopy() {
+      return new add_master_key_args(this);
+    }
+
+    @Override
+    public void clear() {
+      this.key = null;
+    }
+
+    public String getKey() {
+      return this.key;
+    }
+
+    public void setKey(String key) {
+      this.key = key;
+    }
+
+    public void unsetKey() {
+      this.key = null;
+    }
+
+    /** Returns true if field key is set (has been assigned a value) and false otherwise */
+    public boolean isSetKey() {
+      return this.key != null;
+    }
+
+    public void setKeyIsSet(boolean value) {
+      if (!value) {
+        this.key = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case KEY:
+        if (value == null) {
+          unsetKey();
+        } else {
+          setKey((String)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case KEY:
+        return getKey();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case KEY:
+        return isSetKey();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof add_master_key_args)
+        return this.equals((add_master_key_args)that);
+      return false;
+    }
+
+    public boolean equals(add_master_key_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_key = true && this.isSetKey();
+      boolean that_present_key = true && that.isSetKey();
+      if (this_present_key || that_present_key) {
+        if (!(this_present_key && that_present_key))
+          return false;
+        if (!this.key.equals(that.key))
+          return false;
+      }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      return builder.toHashCode();
+    }
+
+    public int compareTo(add_master_key_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      add_master_key_args typedOther = (add_master_key_args)other;
+
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetKey()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
+      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
+    }
+
+    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
+      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
+    }
+
+    @Override
+    public String toString() {
+      StringBuilder sb = new StringBuilder("add_master_key_args(");
+      boolean first = true;
+
+      sb.append("key:");
+      if (this.key == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.key);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws org.apache.thrift.TException {
+      // check for required fields
+      // check for sub-struct validity
+    }
+
+    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
+      try {
+        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+      try {
+        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
+      } catch (org.apache.thrift.TException te) {
+        throw new java.io.IOException(te);
+      }
+    }
+
+    private static class add_master_key_argsStandardSchemeFactory implements SchemeFactory {
+      public add_master_key_argsStandardScheme getScheme() {
+        return new add_master_key_argsStandardScheme();
+      }
+    }
+
+    private static class add_master_key_argsStandardScheme extends StandardScheme<add_master_key_args> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, add_master_key_args struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
+            case 1: // KEY
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.key = iprot.readString();
+                struct.setKeyIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            default:
+              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+          }
+          iprot.readFieldEnd();
+        }
+        iprot.readStructEnd();
+        struct.validate();
+      }
+
+      public void write(org.apache.thrift.protocol.TProtocol oprot, add_master_key_args struct) throws org.apache.thrift.TException {
+        struct.validate();
+
+        oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.key != null) {
+          oprot.writeFieldBegin(KEY_FIELD_DESC);
+          oprot.writeString(struct.key);
+          oprot.writeFieldEnd();
+        }
+        oprot.writeFieldStop();
+        oprot.writeStructEnd();
+      }
+
+    }
+
+    private static class add_master_key_argsTupleSchemeFactory implements SchemeFactory {
+      public add_master_key_argsTupleScheme getScheme() {
+        return new add_master_key_argsTupleScheme();
+      }
+    }
+
+    private static class add_master_key_argsTupleScheme extends TupleScheme<add_master_key_args> {
+
+      @Override
+      public void write(org.apache.thrift.protocol.TProtocol prot, add_master_key_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetKey()) {
+          optionals.set(0);
+        }
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetKey()) {
+          oprot.writeString(struct.key);
+        }
+      }
+
+      @Override
+      public void read(org.apache.thrift.protocol.TProtocol prot, add_master_key_args struct) throws org.apache.thrift.TException {
+        TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(1);
+        if (incoming.get(0)) {
+          struct.key = iprot.readString();
+          struct.setKeyIsSet(true);
+        }
+      }
+    }
+
+  }
+
+  public static class add_master_key_result implements org.apache.thrift.TBase<add_master_key_result, add_master_key_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_master_key_result");
+
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
+    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+
+    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
+    static {
+      schemes.put(StandardScheme.class, new add_master_key_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new add_master_key_resultTupleSchemeFactory());
+    }
+
+    private int success; // required
+    private MetaException o1; // required
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      O1((short)1, "o1");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // O1
+            return O1;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
+      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_master_key_result.class, metaDataMap);
+    }
+
+    public add_master_key_result() {
+    }
+
+    public add_master_key_result(
+      int success,
+      MetaException o1)
+    {
+      this();
+      this.success = success;
+      setSuccessIsSet(true);
+      this.o1 = o1;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public add_master_key_result(add_master_key_result other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.success = other.success;
+      if (other.isSetO1()) {
+        this.o1 = new MetaException(other.o1);
+      }
+    }
+
+    public add_master_key_result deepCopy() {
+      return new add_master_key_result(this);
+    }
+
+    @Override
+    public void clear() {
+      setSuccessIsSet(false);
+      this.success = 0;
+      this.o1 = null;
+    }
+
+    public int getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(int success) {
+      this.success = success;
+      setSuccessIsSet(true);
+    }
+
+    public void unsetSuccess() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
+    }
+
+    public MetaException getO1() {
+      return this.o1;
+    }
+
+    public void setO1(MetaException o1) {
+      this.o1 = o1;
+    }
+
+    public void unsetO1() {
+      this.o1 = null;
+    }
+
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
+    }
+
+    public void setO1IsSet(boolean value) {
+      if (!value) {
+        this.o1 = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((Integer)value);
+        }
+        break;
+
+      case O1:
+        if (value == null) {
+          unsetO1();
+        } else {
+          setO1((MetaException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return Integer.valueOf(getSuccess());
+
+      case O1:
+        return getO1();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case O1:
+        return isSetO1();
+      }
+      throw new IllegalStateException();
+    }
+
+    @Override
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof add_master_key_result)
+        return this.equals((add_master_key_result)that);
       return false;
     }
 
-    public boolean equals(set_ugi_result that) {
+    public boolean equals(add_master_key_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -131492,7 +138382,7 @@ public boolean equals(set_ugi_result that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_success = true && (isSetSuccess());
+      boolean present_success = true;
       builder.append(present_success);
       if (present_success)
         builder.append(success);
@@ -131505,13 +138395,13 @@ public int hashCode() {
       return builder.toHashCode();
     }
 
-    public int compareTo(set_ugi_result other) {
+    public int compareTo(add_master_key_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      set_ugi_result typedOther = (set_ugi_result)other;
+      add_master_key_result typedOther = (add_master_key_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -131550,15 +138440,11 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("set_ugi_result(");
+      StringBuilder sb = new StringBuilder("add_master_key_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
+      sb.append(this.success);
       first = false;
       if (!first) sb.append(", ");
       sb.append("o1:");
@@ -131587,21 +138473,23 @@ private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExcept
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
       }
     }
 
-    private static class set_ugi_resultStandardSchemeFactory implements SchemeFactory {
-      public set_ugi_resultStandardScheme getScheme() {
-        return new set_ugi_resultStandardScheme();
+    private static class add_master_key_resultStandardSchemeFactory implements SchemeFactory {
+      public add_master_key_resultStandardScheme getScheme() {
+        return new add_master_key_resultStandardScheme();
       }
     }
 
-    private static class set_ugi_resultStandardScheme extends StandardScheme<set_ugi_result> {
+    private static class add_master_key_resultStandardScheme extends StandardScheme<add_master_key_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, add_master_key_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -131612,18 +138500,8 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result stru
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-                {
-                  org.apache.thrift.protocol.TList _list992 = iprot.readListBegin();
-                  struct.success = new ArrayList<String>(_list992.size);
-                  for (int _i993 = 0; _i993 < _list992.size; ++_i993)
-                  {
-                    String _elem994; // required
-                    _elem994 = iprot.readString();
-                    struct.success.add(_elem994);
-                  }
-                  iprot.readListEnd();
-                }
+              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
+                struct.success = iprot.readI32();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -131647,20 +138525,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, set_ugi_result stru
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, add_master_key_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
+        if (struct.isSetSuccess()) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
-            for (String _iter995 : struct.success)
-            {
-              oprot.writeString(_iter995);
-            }
-            oprot.writeListEnd();
-          }
+          oprot.writeI32(struct.success);
           oprot.writeFieldEnd();
         }
         if (struct.o1 != null) {
@@ -131674,16 +138545,16 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, set_ugi_result str
 
     }
 
-    private static class set_ugi_resultTupleSchemeFactory implements SchemeFactory {
-      public set_ugi_resultTupleScheme getScheme() {
-        return new set_ugi_resultTupleScheme();
+    private static class add_master_key_resultTupleSchemeFactory implements SchemeFactory {
+      public add_master_key_resultTupleScheme getScheme() {
+        return new add_master_key_resultTupleScheme();
       }
     }
 
-    private static class set_ugi_resultTupleScheme extends TupleScheme<set_ugi_result> {
+    private static class add_master_key_resultTupleScheme extends TupleScheme<add_master_key_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, add_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -131694,13 +138565,7 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result stru
         }
         oprot.writeBitSet(optionals, 2);
         if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (String _iter996 : struct.success)
-            {
-              oprot.writeString(_iter996);
-            }
-          }
+          oprot.writeI32(struct.success);
         }
         if (struct.isSetO1()) {
           struct.o1.write(oprot);
@@ -131708,20 +138573,11 @@ public void write(org.apache.thrift.protocol.TProtocol prot, set_ugi_result stru
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, add_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TList _list997 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
-            struct.success = new ArrayList<String>(_list997.size);
-            for (int _i998 = 0; _i998 < _list997.size; ++_i998)
-            {
-              String _elem999; // required
-              _elem999 = iprot.readString();
-              struct.success.add(_elem999);
-            }
-          }
+          struct.success = iprot.readI32();
           struct.setSuccessIsSet(true);
         }
         if (incoming.get(1)) {
@@ -131734,25 +138590,25 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struc
 
   }
 
-  public static class get_delegation_token_args implements org.apache.thrift.TBase<get_delegation_token_args, get_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_delegation_token_args");
+  public static class update_master_key_args implements org.apache.thrift.TBase<update_master_key_args, update_master_key_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_master_key_args");
 
-    private static final org.apache.thrift.protocol.TField TOKEN_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("token_owner", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField RENEWER_KERBEROS_PRINCIPAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("renewer_kerberos_principal_name", org.apache.thrift.protocol.TType.STRING, (short)2);
+    private static final org.apache.thrift.protocol.TField SEQ_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("seq_number", org.apache.thrift.protocol.TType.I32, (short)1);
+    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_delegation_token_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_delegation_token_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new update_master_key_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new update_master_key_argsTupleSchemeFactory());
     }
 
-    private String token_owner; // required
-    private String renewer_kerberos_principal_name; // required
+    private int seq_number; // required
+    private String key; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      TOKEN_OWNER((short)1, "token_owner"),
-      RENEWER_KERBEROS_PRINCIPAL_NAME((short)2, "renewer_kerberos_principal_name");
+      SEQ_NUMBER((short)1, "seq_number"),
+      KEY((short)2, "key");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -131767,10 +138623,10 @@ public void read(org.apache.thrift.protocol.TProtocol prot, set_ugi_result struc
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // TOKEN_OWNER
-            return TOKEN_OWNER;
-          case 2: // RENEWER_KERBEROS_PRINCIPAL_NAME
-            return RENEWER_KERBEROS_PRINCIPAL_NAME;
+          case 1: // SEQ_NUMBER
+            return SEQ_NUMBER;
+          case 2: // KEY
+            return KEY;
           default:
             return null;
         }
@@ -131811,112 +138667,114 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SEQ_NUMBER_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.TOKEN_OWNER, new org.apache.thrift.meta_data.FieldMetaData("token_owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.RENEWER_KERBEROS_PRINCIPAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("renewer_kerberos_principal_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+      tmpMap.put(_Fields.SEQ_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("seq_number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
+      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_delegation_token_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_master_key_args.class, metaDataMap);
     }
 
-    public get_delegation_token_args() {
+    public update_master_key_args() {
     }
 
-    public get_delegation_token_args(
-      String token_owner,
-      String renewer_kerberos_principal_name)
+    public update_master_key_args(
+      int seq_number,
+      String key)
     {
       this();
-      this.token_owner = token_owner;
-      this.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
+      this.seq_number = seq_number;
+      setSeq_numberIsSet(true);
+      this.key = key;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_delegation_token_args(get_delegation_token_args other) {
-      if (other.isSetToken_owner()) {
-        this.token_owner = other.token_owner;
-      }
-      if (other.isSetRenewer_kerberos_principal_name()) {
-        this.renewer_kerberos_principal_name = other.renewer_kerberos_principal_name;
+    public update_master_key_args(update_master_key_args other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.seq_number = other.seq_number;
+      if (other.isSetKey()) {
+        this.key = other.key;
       }
     }
 
-    public get_delegation_token_args deepCopy() {
-      return new get_delegation_token_args(this);
+    public update_master_key_args deepCopy() {
+      return new update_master_key_args(this);
     }
 
     @Override
     public void clear() {
-      this.token_owner = null;
-      this.renewer_kerberos_principal_name = null;
+      setSeq_numberIsSet(false);
+      this.seq_number = 0;
+      this.key = null;
     }
 
-    public String getToken_owner() {
-      return this.token_owner;
+    public int getSeq_number() {
+      return this.seq_number;
     }
 
-    public void setToken_owner(String token_owner) {
-      this.token_owner = token_owner;
+    public void setSeq_number(int seq_number) {
+      this.seq_number = seq_number;
+      setSeq_numberIsSet(true);
     }
 
-    public void unsetToken_owner() {
-      this.token_owner = null;
+    public void unsetSeq_number() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEQ_NUMBER_ISSET_ID);
     }
 
-    /** Returns true if field token_owner is set (has been assigned a value) and false otherwise */
-    public boolean isSetToken_owner() {
-      return this.token_owner != null;
+    /** Returns true if field seq_number is set (has been assigned a value) and false otherwise */
+    public boolean isSetSeq_number() {
+      return EncodingUtils.testBit(__isset_bitfield, __SEQ_NUMBER_ISSET_ID);
     }
 
-    public void setToken_ownerIsSet(boolean value) {
-      if (!value) {
-        this.token_owner = null;
-      }
+    public void setSeq_numberIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEQ_NUMBER_ISSET_ID, value);
     }
 
-    public String getRenewer_kerberos_principal_name() {
-      return this.renewer_kerberos_principal_name;
+    public String getKey() {
+      return this.key;
     }
 
-    public void setRenewer_kerberos_principal_name(String renewer_kerberos_principal_name) {
-      this.renewer_kerberos_principal_name = renewer_kerberos_principal_name;
+    public void setKey(String key) {
+      this.key = key;
     }
 
-    public void unsetRenewer_kerberos_principal_name() {
-      this.renewer_kerberos_principal_name = null;
+    public void unsetKey() {
+      this.key = null;
     }
 
-    /** Returns true if field renewer_kerberos_principal_name is set (has been assigned a value) and false otherwise */
-    public boolean isSetRenewer_kerberos_principal_name() {
-      return this.renewer_kerberos_principal_name != null;
+    /** Returns true if field key is set (has been assigned a value) and false otherwise */
+    public boolean isSetKey() {
+      return this.key != null;
     }
 
-    public void setRenewer_kerberos_principal_nameIsSet(boolean value) {
+    public void setKeyIsSet(boolean value) {
       if (!value) {
-        this.renewer_kerberos_principal_name = null;
+        this.key = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case TOKEN_OWNER:
+      case SEQ_NUMBER:
         if (value == null) {
-          unsetToken_owner();
+          unsetSeq_number();
         } else {
-          setToken_owner((String)value);
+          setSeq_number((Integer)value);
         }
         break;
 
-      case RENEWER_KERBEROS_PRINCIPAL_NAME:
+      case KEY:
         if (value == null) {
-          unsetRenewer_kerberos_principal_name();
+          unsetKey();
         } else {
-          setRenewer_kerberos_principal_name((String)value);
+          setKey((String)value);
         }
         break;
 
@@ -131925,11 +138783,11 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case TOKEN_OWNER:
-        return getToken_owner();
+      case SEQ_NUMBER:
+        return Integer.valueOf(getSeq_number());
 
-      case RENEWER_KERBEROS_PRINCIPAL_NAME:
-        return getRenewer_kerberos_principal_name();
+      case KEY:
+        return getKey();
 
       }
       throw new IllegalStateException();
@@ -131942,10 +138800,10 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case TOKEN_OWNER:
-        return isSetToken_owner();
-      case RENEWER_KERBEROS_PRINCIPAL_NAME:
-        return isSetRenewer_kerberos_principal_name();
+      case SEQ_NUMBER:
+        return isSetSeq_number();
+      case KEY:
+        return isSetKey();
       }
       throw new IllegalStateException();
     }
@@ -131954,30 +138812,30 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_delegation_token_args)
-        return this.equals((get_delegation_token_args)that);
+      if (that instanceof update_master_key_args)
+        return this.equals((update_master_key_args)that);
       return false;
     }
 
-    public boolean equals(get_delegation_token_args that) {
+    public boolean equals(update_master_key_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_token_owner = true && this.isSetToken_owner();
-      boolean that_present_token_owner = true && that.isSetToken_owner();
-      if (this_present_token_owner || that_present_token_owner) {
-        if (!(this_present_token_owner && that_present_token_owner))
+      boolean this_present_seq_number = true;
+      boolean that_present_seq_number = true;
+      if (this_present_seq_number || that_present_seq_number) {
+        if (!(this_present_seq_number && that_present_seq_number))
           return false;
-        if (!this.token_owner.equals(that.token_owner))
+        if (this.seq_number != that.seq_number)
           return false;
       }
 
-      boolean this_present_renewer_kerberos_principal_name = true && this.isSetRenewer_kerberos_principal_name();
-      boolean that_present_renewer_kerberos_principal_name = true && that.isSetRenewer_kerberos_principal_name();
-      if (this_present_renewer_kerberos_principal_name || that_present_renewer_kerberos_principal_name) {
-        if (!(this_present_renewer_kerberos_principal_name && that_present_renewer_kerberos_principal_name))
+      boolean this_present_key = true && this.isSetKey();
+      boolean that_present_key = true && that.isSetKey();
+      if (this_present_key || that_present_key) {
+        if (!(this_present_key && that_present_key))
           return false;
-        if (!this.renewer_kerberos_principal_name.equals(that.renewer_kerberos_principal_name))
+        if (!this.key.equals(that.key))
           return false;
       }
 
@@ -131988,43 +138846,43 @@ public boolean equals(get_delegation_token_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_token_owner = true && (isSetToken_owner());
-      builder.append(present_token_owner);
-      if (present_token_owner)
-        builder.append(token_owner);
+      boolean present_seq_number = true;
+      builder.append(present_seq_number);
+      if (present_seq_number)
+        builder.append(seq_number);
 
-      boolean present_renewer_kerberos_principal_name = true && (isSetRenewer_kerberos_principal_name());
-      builder.append(present_renewer_kerberos_principal_name);
-      if (present_renewer_kerberos_principal_name)
-        builder.append(renewer_kerberos_principal_name);
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(get_delegation_token_args other) {
+    public int compareTo(update_master_key_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_delegation_token_args typedOther = (get_delegation_token_args)other;
+      update_master_key_args typedOther = (update_master_key_args)other;
 
-      lastComparison = Boolean.valueOf(isSetToken_owner()).compareTo(typedOther.isSetToken_owner());
+      lastComparison = Boolean.valueOf(isSetSeq_number()).compareTo(typedOther.isSetSeq_number());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetToken_owner()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_owner, typedOther.token_owner);
+      if (isSetSeq_number()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq_number, typedOther.seq_number);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetRenewer_kerberos_principal_name()).compareTo(typedOther.isSetRenewer_kerberos_principal_name());
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetRenewer_kerberos_principal_name()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.renewer_kerberos_principal_name, typedOther.renewer_kerberos_principal_name);
+      if (isSetKey()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -132046,22 +138904,18 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_delegation_token_args(");
+      StringBuilder sb = new StringBuilder("update_master_key_args(");
       boolean first = true;
 
-      sb.append("token_owner:");
-      if (this.token_owner == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.token_owner);
-      }
+      sb.append("seq_number:");
+      sb.append(this.seq_number);
       first = false;
       if (!first) sb.append(", ");
-      sb.append("renewer_kerberos_principal_name:");
-      if (this.renewer_kerberos_principal_name == null) {
+      sb.append("key:");
+      if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.renewer_kerberos_principal_name);
+        sb.append(this.key);
       }
       first = false;
       sb.append(")");
@@ -132083,21 +138937,23 @@ private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExcept
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
       }
     }
 
-    private static class get_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
-      public get_delegation_token_argsStandardScheme getScheme() {
-        return new get_delegation_token_argsStandardScheme();
+    private static class update_master_key_argsStandardSchemeFactory implements SchemeFactory {
+      public update_master_key_argsStandardScheme getScheme() {
+        return new update_master_key_argsStandardScheme();
       }
     }
 
-    private static class get_delegation_token_argsStandardScheme extends StandardScheme<get_delegation_token_args> {
+    private static class update_master_key_argsStandardScheme extends StandardScheme<update_master_key_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, update_master_key_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -132107,18 +138963,18 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_toke
             break;
           }
           switch (schemeField.id) {
-            case 1: // TOKEN_OWNER
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.token_owner = iprot.readString();
-                struct.setToken_ownerIsSet(true);
+            case 1: // SEQ_NUMBER
+              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
+                struct.seq_number = iprot.readI32();
+                struct.setSeq_numberIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // RENEWER_KERBEROS_PRINCIPAL_NAME
+            case 2: // KEY
               if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.renewer_kerberos_principal_name = iprot.readString();
-                struct.setRenewer_kerberos_principal_nameIsSet(true);
+                struct.key = iprot.readString();
+                struct.setKeyIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -132132,18 +138988,16 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_toke
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, update_master_key_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.token_owner != null) {
-          oprot.writeFieldBegin(TOKEN_OWNER_FIELD_DESC);
-          oprot.writeString(struct.token_owner);
-          oprot.writeFieldEnd();
-        }
-        if (struct.renewer_kerberos_principal_name != null) {
-          oprot.writeFieldBegin(RENEWER_KERBEROS_PRINCIPAL_NAME_FIELD_DESC);
-          oprot.writeString(struct.renewer_kerberos_principal_name);
+        oprot.writeFieldBegin(SEQ_NUMBER_FIELD_DESC);
+        oprot.writeI32(struct.seq_number);
+        oprot.writeFieldEnd();
+        if (struct.key != null) {
+          oprot.writeFieldBegin(KEY_FIELD_DESC);
+          oprot.writeString(struct.key);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -132152,69 +139006,69 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, get_delegation_tok
 
     }
 
-    private static class get_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
-      public get_delegation_token_argsTupleScheme getScheme() {
-        return new get_delegation_token_argsTupleScheme();
+    private static class update_master_key_argsTupleSchemeFactory implements SchemeFactory {
+      public update_master_key_argsTupleScheme getScheme() {
+        return new update_master_key_argsTupleScheme();
       }
     }
 
-    private static class get_delegation_token_argsTupleScheme extends TupleScheme<get_delegation_token_args> {
+    private static class update_master_key_argsTupleScheme extends TupleScheme<update_master_key_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, update_master_key_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetToken_owner()) {
+        if (struct.isSetSeq_number()) {
           optionals.set(0);
         }
-        if (struct.isSetRenewer_kerberos_principal_name()) {
+        if (struct.isSetKey()) {
           optionals.set(1);
         }
         oprot.writeBitSet(optionals, 2);
-        if (struct.isSetToken_owner()) {
-          oprot.writeString(struct.token_owner);
+        if (struct.isSetSeq_number()) {
+          oprot.writeI32(struct.seq_number);
         }
-        if (struct.isSetRenewer_kerberos_principal_name()) {
-          oprot.writeString(struct.renewer_kerberos_principal_name);
+        if (struct.isSetKey()) {
+          oprot.writeString(struct.key);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, update_master_key_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.token_owner = iprot.readString();
-          struct.setToken_ownerIsSet(true);
+          struct.seq_number = iprot.readI32();
+          struct.setSeq_numberIsSet(true);
         }
         if (incoming.get(1)) {
-          struct.renewer_kerberos_principal_name = iprot.readString();
-          struct.setRenewer_kerberos_principal_nameIsSet(true);
+          struct.key = iprot.readString();
+          struct.setKeyIsSet(true);
         }
       }
     }
 
   }
 
-  public static class get_delegation_token_result implements org.apache.thrift.TBase<get_delegation_token_result, get_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_delegation_token_result");
+  public static class update_master_key_result implements org.apache.thrift.TBase<update_master_key_result, update_master_key_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_master_key_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
     private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField O2_FIELD_DESC = new org.apache.thrift.protocol.TField("o2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new get_delegation_token_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new get_delegation_token_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new update_master_key_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new update_master_key_resultTupleSchemeFactory());
     }
 
-    private String success; // required
-    private MetaException o1; // required
+    private NoSuchObjectException o1; // required
+    private MetaException o2; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      O1((short)1, "o1");
+      O1((short)1, "o1"),
+      O2((short)2, "o2");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -132229,10 +139083,10 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           case 1: // O1
             return O1;
+          case 2: // O2
+            return O2;
           default:
             return null;
         }
@@ -132276,109 +139130,109 @@ public String getFieldName() {
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.O2, new org.apache.thrift.meta_data.FieldMetaData("o2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_delegation_token_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_master_key_result.class, metaDataMap);
     }
 
-    public get_delegation_token_result() {
+    public update_master_key_result() {
     }
 
-    public get_delegation_token_result(
-      String success,
-      MetaException o1)
+    public update_master_key_result(
+      NoSuchObjectException o1,
+      MetaException o2)
     {
       this();
-      this.success = success;
       this.o1 = o1;
+      this.o2 = o2;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_delegation_token_result(get_delegation_token_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
+    public update_master_key_result(update_master_key_result other) {
       if (other.isSetO1()) {
-        this.o1 = new MetaException(other.o1);
+        this.o1 = new NoSuchObjectException(other.o1);
+      }
+      if (other.isSetO2()) {
+        this.o2 = new MetaException(other.o2);
       }
     }
 
-    public get_delegation_token_result deepCopy() {
-      return new get_delegation_token_result(this);
+    public update_master_key_result deepCopy() {
+      return new update_master_key_result(this);
     }
 
     @Override
     public void clear() {
-      this.success = null;
       this.o1 = null;
+      this.o2 = null;
     }
 
-    public String getSuccess() {
-      return this.success;
+    public NoSuchObjectException getO1() {
+      return this.o1;
     }
 
-    public void setSuccess(String success) {
-      this.success = success;
+    public void setO1(NoSuchObjectException o1) {
+      this.o1 = o1;
     }
 
-    public void unsetSuccess() {
-      this.success = null;
+    public void unsetO1() {
+      this.o1 = null;
     }
 
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
+    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO1() {
+      return this.o1 != null;
     }
 
-    public void setSuccessIsSet(boolean value) {
+    public void setO1IsSet(boolean value) {
       if (!value) {
-        this.success = null;
+        this.o1 = null;
       }
     }
 
-    public MetaException getO1() {
-      return this.o1;
+    public MetaException getO2() {
+      return this.o2;
     }
 
-    public void setO1(MetaException o1) {
-      this.o1 = o1;
+    public void setO2(MetaException o2) {
+      this.o2 = o2;
     }
 
-    public void unsetO1() {
-      this.o1 = null;
+    public void unsetO2() {
+      this.o2 = null;
     }
 
-    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
-    public boolean isSetO1() {
-      return this.o1 != null;
+    /** Returns true if field o2 is set (has been assigned a value) and false otherwise */
+    public boolean isSetO2() {
+      return this.o2 != null;
     }
 
-    public void setO1IsSet(boolean value) {
+    public void setO2IsSet(boolean value) {
       if (!value) {
-        this.o1 = null;
+        this.o2 = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
+      case O1:
         if (value == null) {
-          unsetSuccess();
+          unsetO1();
         } else {
-          setSuccess((String)value);
+          setO1((NoSuchObjectException)value);
         }
         break;
 
-      case O1:
+      case O2:
         if (value == null) {
-          unsetO1();
+          unsetO2();
         } else {
-          setO1((MetaException)value);
+          setO2((MetaException)value);
         }
         break;
 
@@ -132387,12 +139241,12 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       case O1:
         return getO1();
 
+      case O2:
+        return getO2();
+
       }
       throw new IllegalStateException();
     }
@@ -132404,10 +139258,10 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       case O1:
         return isSetO1();
+      case O2:
+        return isSetO2();
       }
       throw new IllegalStateException();
     }
@@ -132416,24 +139270,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_delegation_token_result)
-        return this.equals((get_delegation_token_result)that);
+      if (that instanceof update_master_key_result)
+        return this.equals((update_master_key_result)that);
       return false;
     }
 
-    public boolean equals(get_delegation_token_result that) {
+    public boolean equals(update_master_key_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       boolean this_present_o1 = true && this.isSetO1();
       boolean that_present_o1 = true && that.isSetO1();
       if (this_present_o1 || that_present_o1) {
@@ -132443,6 +139288,15 @@ public boolean equals(get_delegation_token_result that) {
           return false;
       }
 
+      boolean this_present_o2 = true && this.isSetO2();
+      boolean that_present_o2 = true && that.isSetO2();
+      if (this_present_o2 || that_present_o2) {
+        if (!(this_present_o2 && that_present_o2))
+          return false;
+        if (!this.o2.equals(that.o2))
+          return false;
+      }
+
       return true;
     }
 
@@ -132450,43 +139304,43 @@ public boolean equals(get_delegation_token_result that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_success = true && (isSetSuccess());
-      builder.append(present_success);
-      if (present_success)
-        builder.append(success);
-
       boolean present_o1 = true && (isSetO1());
       builder.append(present_o1);
       if (present_o1)
         builder.append(o1);
 
+      boolean present_o2 = true && (isSetO2());
+      builder.append(present_o2);
+      if (present_o2)
+        builder.append(o2);
+
       return builder.toHashCode();
     }
 
-    public int compareTo(get_delegation_token_result other) {
+    public int compareTo(update_master_key_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_delegation_token_result typedOther = (get_delegation_token_result)other;
+      update_master_key_result typedOther = (update_master_key_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
+      if (isSetO1()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      lastComparison = Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetO1()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+      if (isSetO2()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o2, typedOther.o2);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -132508,22 +139362,22 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_delegation_token_result(");
+      StringBuilder sb = new StringBuilder("update_master_key_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
+      sb.append("o1:");
+      if (this.o1 == null) {
         sb.append("null");
       } else {
-        sb.append(this.success);
+        sb.append(this.o1);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("o1:");
-      if (this.o1 == null) {
+      sb.append("o2:");
+      if (this.o2 == null) {
         sb.append("null");
       } else {
-        sb.append(this.o1);
+        sb.append(this.o2);
       }
       first = false;
       sb.append(")");
@@ -132551,15 +139405,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class get_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
-      public get_delegation_token_resultStandardScheme getScheme() {
-        return new get_delegation_token_resultStandardScheme();
+    private static class update_master_key_resultStandardSchemeFactory implements SchemeFactory {
+      public update_master_key_resultStandardScheme getScheme() {
+        return new update_master_key_resultStandardScheme();
       }
     }
 
-    private static class get_delegation_token_resultStandardScheme extends StandardScheme<get_delegation_token_result> {
+    private static class update_master_key_resultStandardScheme extends StandardScheme<update_master_key_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, update_master_key_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -132569,19 +139423,20 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_toke
             break;
           }
           switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.success = iprot.readString();
-                struct.setSuccessIsSet(true);
+            case 1: // O1
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.o1 = new NoSuchObjectException();
+                struct.o1.read(iprot);
+                struct.setO1IsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 1: // O1
+            case 2: // O2
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.o1 = new MetaException();
-                struct.o1.read(iprot);
-                struct.setO1IsSet(true);
+                struct.o2 = new MetaException();
+                struct.o2.read(iprot);
+                struct.setO2IsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -132595,87 +139450,88 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, get_delegation_toke
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, update_master_key_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeString(struct.success);
-          oprot.writeFieldEnd();
-        }
         if (struct.o1 != null) {
           oprot.writeFieldBegin(O1_FIELD_DESC);
           struct.o1.write(oprot);
           oprot.writeFieldEnd();
         }
+        if (struct.o2 != null) {
+          oprot.writeFieldBegin(O2_FIELD_DESC);
+          struct.o2.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class get_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
-      public get_delegation_token_resultTupleScheme getScheme() {
-        return new get_delegation_token_resultTupleScheme();
+    private static class update_master_key_resultTupleSchemeFactory implements SchemeFactory {
+      public update_master_key_resultTupleScheme getScheme() {
+        return new update_master_key_resultTupleScheme();
       }
     }
 
-    private static class get_delegation_token_resultTupleScheme extends TupleScheme<get_delegation_token_result> {
+    private static class update_master_key_resultTupleScheme extends TupleScheme<update_master_key_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, update_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
+        if (struct.isSetO1()) {
           optionals.set(0);
         }
-        if (struct.isSetO1()) {
+        if (struct.isSetO2()) {
           optionals.set(1);
         }
         oprot.writeBitSet(optionals, 2);
-        if (struct.isSetSuccess()) {
-          oprot.writeString(struct.success);
-        }
         if (struct.isSetO1()) {
           struct.o1.write(oprot);
         }
+        if (struct.isSetO2()) {
+          struct.o2.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, update_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.success = iprot.readString();
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.o1 = new MetaException();
+          struct.o1 = new NoSuchObjectException();
           struct.o1.read(iprot);
           struct.setO1IsSet(true);
         }
+        if (incoming.get(1)) {
+          struct.o2 = new MetaException();
+          struct.o2.read(iprot);
+          struct.setO2IsSet(true);
+        }
       }
     }
 
   }
 
-  public static class renew_delegation_token_args implements org.apache.thrift.TBase<renew_delegation_token_args, renew_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renew_delegation_token_args");
+  public static class remove_master_key_args implements org.apache.thrift.TBase<remove_master_key_args, remove_master_key_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_master_key_args");
 
-    private static final org.apache.thrift.protocol.TField TOKEN_STR_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("token_str_form", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField KEY_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("key_seq", org.apache.thrift.protocol.TType.I32, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new renew_delegation_token_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new renew_delegation_token_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new remove_master_key_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new remove_master_key_argsTupleSchemeFactory());
     }
 
-    private String token_str_form; // required
+    private int key_seq; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      TOKEN_STR_FORM((short)1, "token_str_form");
+      KEY_SEQ((short)1, "key_seq");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -132690,8 +139546,8 @@ public void read(org.apache.thrift.protocol.TProtocol prot, get_delegation_token
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // TOKEN_STR_FORM
-            return TOKEN_STR_FORM;
+          case 1: // KEY_SEQ
+            return KEY_SEQ;
           default:
             return null;
         }
@@ -132732,73 +139588,75 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __KEY_SEQ_ISSET_ID = 0;
+    private byte __isset_bitfield = 0;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.TOKEN_STR_FORM, new org.apache.thrift.meta_data.FieldMetaData("token_str_form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.KEY_SEQ, new org.apache.thrift.meta_data.FieldMetaData("key_seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renew_delegation_token_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_master_key_args.class, metaDataMap);
     }
 
-    public renew_delegation_token_args() {
+    public remove_master_key_args() {
     }
 
-    public renew_delegation_token_args(
-      String token_str_form)
+    public remove_master_key_args(
+      int key_seq)
     {
       this();
-      this.token_str_form = token_str_form;
+      this.key_seq = key_seq;
+      setKey_seqIsSet(true);
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public renew_delegation_token_args(renew_delegation_token_args other) {
-      if (other.isSetToken_str_form()) {
-        this.token_str_form = other.token_str_form;
-      }
+    public remove_master_key_args(remove_master_key_args other) {
+      __isset_bitfield = other.__isset_bitfield;
+      this.key_seq = other.key_seq;
     }
 
-    public renew_delegation_token_args deepCopy() {
-      return new renew_delegation_token_args(this);
+    public remove_master_key_args deepCopy() {
+      return new remove_master_key_args(this);
     }
 
     @Override
     public void clear() {
-      this.token_str_form = null;
+      setKey_seqIsSet(false);
+      this.key_seq = 0;
     }
 
-    public String getToken_str_form() {
-      return this.token_str_form;
+    public int getKey_seq() {
+      return this.key_seq;
     }
 
-    public void setToken_str_form(String token_str_form) {
-      this.token_str_form = token_str_form;
+    public void setKey_seq(int key_seq) {
+      this.key_seq = key_seq;
+      setKey_seqIsSet(true);
     }
 
-    public void unsetToken_str_form() {
-      this.token_str_form = null;
+    public void unsetKey_seq() {
+      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KEY_SEQ_ISSET_ID);
     }
 
-    /** Returns true if field token_str_form is set (has been assigned a value) and false otherwise */
-    public boolean isSetToken_str_form() {
-      return this.token_str_form != null;
+    /** Returns true if field key_seq is set (has been assigned a value) and false otherwise */
+    public boolean isSetKey_seq() {
+      return EncodingUtils.testBit(__isset_bitfield, __KEY_SEQ_ISSET_ID);
     }
 
-    public void setToken_str_formIsSet(boolean value) {
-      if (!value) {
-        this.token_str_form = null;
-      }
+    public void setKey_seqIsSet(boolean value) {
+      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KEY_SEQ_ISSET_ID, value);
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case TOKEN_STR_FORM:
+      case KEY_SEQ:
         if (value == null) {
-          unsetToken_str_form();
+          unsetKey_seq();
         } else {
-          setToken_str_form((String)value);
+          setKey_seq((Integer)value);
         }
         break;
 
@@ -132807,8 +139665,8 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case TOKEN_STR_FORM:
-        return getToken_str_form();
+      case KEY_SEQ:
+        return Integer.valueOf(getKey_seq());
 
       }
       throw new IllegalStateException();
@@ -132821,8 +139679,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case TOKEN_STR_FORM:
-        return isSetToken_str_form();
+      case KEY_SEQ:
+        return isSetKey_seq();
       }
       throw new IllegalStateException();
     }
@@ -132831,21 +139689,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof renew_delegation_token_args)
-        return this.equals((renew_delegation_token_args)that);
+      if (that instanceof remove_master_key_args)
+        return this.equals((remove_master_key_args)that);
       return false;
     }
 
-    public boolean equals(renew_delegation_token_args that) {
+    public boolean equals(remove_master_key_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_token_str_form = true && this.isSetToken_str_form();
-      boolean that_present_token_str_form = true && that.isSetToken_str_form();
-      if (this_present_token_str_form || that_present_token_str_form) {
-        if (!(this_present_token_str_form && that_present_token_str_form))
+      boolean this_present_key_seq = true;
+      boolean that_present_key_seq = true;
+      if (this_present_key_seq || that_present_key_seq) {
+        if (!(this_present_key_seq && that_present_key_seq))
           return false;
-        if (!this.token_str_form.equals(that.token_str_form))
+        if (this.key_seq != that.key_seq)
           return false;
       }
 
@@ -132856,28 +139714,28 @@ public boolean equals(renew_delegation_token_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_token_str_form = true && (isSetToken_str_form());
-      builder.append(present_token_str_form);
-      if (present_token_str_form)
-        builder.append(token_str_form);
+      boolean present_key_seq = true;
+      builder.append(present_key_seq);
+      if (present_key_seq)
+        builder.append(key_seq);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(renew_delegation_token_args other) {
+    public int compareTo(remove_master_key_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      renew_delegation_token_args typedOther = (renew_delegation_token_args)other;
+      remove_master_key_args typedOther = (remove_master_key_args)other;
 
-      lastComparison = Boolean.valueOf(isSetToken_str_form()).compareTo(typedOther.isSetToken_str_form());
+      lastComparison = Boolean.valueOf(isSetKey_seq()).compareTo(typedOther.isSetKey_seq());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetToken_str_form()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_str_form, typedOther.token_str_form);
+      if (isSetKey_seq()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_seq, typedOther.key_seq);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -132899,15 +139757,11 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("renew_delegation_token_args(");
+      StringBuilder sb = new StringBuilder("remove_master_key_args(");
       boolean first = true;
 
-      sb.append("token_str_form:");
-      if (this.token_str_form == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.token_str_form);
-      }
+      sb.append("key_seq:");
+      sb.append(this.key_seq);
       first = false;
       sb.append(")");
       return sb.toString();
@@ -132928,21 +139782,23 @@ private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOExcept
 
     private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
       try {
+        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
+        __isset_bitfield = 0;
         read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
       } catch (org.apache.thrift.TException te) {
         throw new java.io.IOException(te);
       }
     }
 
-    private static class renew_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
-      public renew_delegation_token_argsStandardScheme getScheme() {
-        return new renew_delegation_token_argsStandardScheme();
+    private static class remove_master_key_argsStandardSchemeFactory implements SchemeFactory {
+      public remove_master_key_argsStandardScheme getScheme() {
+        return new remove_master_key_argsStandardScheme();
       }
     }
 
-    private static class renew_delegation_token_argsStandardScheme extends StandardScheme<renew_delegation_token_args> {
+    private static class remove_master_key_argsStandardScheme extends StandardScheme<remove_master_key_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_master_key_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -132952,10 +139808,10 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_to
             break;
           }
           switch (schemeField.id) {
-            case 1: // TOKEN_STR_FORM
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.token_str_form = iprot.readString();
-                struct.setToken_str_formIsSet(true);
+            case 1: // KEY_SEQ
+              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
+                struct.key_seq = iprot.readI32();
+                struct.setKey_seqIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -132969,74 +139825,69 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_to
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_master_key_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.token_str_form != null) {
-          oprot.writeFieldBegin(TOKEN_STR_FORM_FIELD_DESC);
-          oprot.writeString(struct.token_str_form);
-          oprot.writeFieldEnd();
-        }
+        oprot.writeFieldBegin(KEY_SEQ_FIELD_DESC);
+        oprot.writeI32(struct.key_seq);
+        oprot.writeFieldEnd();
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class renew_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
-      public renew_delegation_token_argsTupleScheme getScheme() {
-        return new renew_delegation_token_argsTupleScheme();
+    private static class remove_master_key_argsTupleSchemeFactory implements SchemeFactory {
+      public remove_master_key_argsTupleScheme getScheme() {
+        return new remove_master_key_argsTupleScheme();
       }
     }
 
-    private static class renew_delegation_token_argsTupleScheme extends TupleScheme<renew_delegation_token_args> {
+    private static class remove_master_key_argsTupleScheme extends TupleScheme<remove_master_key_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, remove_master_key_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetToken_str_form()) {
+        if (struct.isSetKey_seq()) {
           optionals.set(0);
         }
         oprot.writeBitSet(optionals, 1);
-        if (struct.isSetToken_str_form()) {
-          oprot.writeString(struct.token_str_form);
+        if (struct.isSetKey_seq()) {
+          oprot.writeI32(struct.key_seq);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, remove_master_key_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.token_str_form = iprot.readString();
-          struct.setToken_str_formIsSet(true);
+          struct.key_seq = iprot.readI32();
+          struct.setKey_seqIsSet(true);
         }
       }
     }
 
   }
 
-  public static class renew_delegation_token_result implements org.apache.thrift.TBase<renew_delegation_token_result, renew_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("renew_delegation_token_result");
+  public static class remove_master_key_result implements org.apache.thrift.TBase<remove_master_key_result, remove_master_key_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_master_key_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
-    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new renew_delegation_token_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new renew_delegation_token_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new remove_master_key_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new remove_master_key_resultTupleSchemeFactory());
     }
 
-    private long success; // required
-    private MetaException o1; // required
+    private boolean success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      O1((short)1, "o1");
+      SUCCESS((short)0, "success");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -133053,8 +139904,6 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 0: // SUCCESS
             return SUCCESS;
-          case 1: // O1
-            return O1;
           default:
             return null;
         }
@@ -133101,53 +139950,45 @@ public String getFieldName() {
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
-      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renew_delegation_token_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_master_key_result.class, metaDataMap);
     }
 
-    public renew_delegation_token_result() {
+    public remove_master_key_result() {
     }
 
-    public renew_delegation_token_result(
-      long success,
-      MetaException o1)
+    public remove_master_key_result(
+      boolean success)
     {
       this();
       this.success = success;
       setSuccessIsSet(true);
-      this.o1 = o1;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public renew_delegation_token_result(renew_delegation_token_result other) {
+    public remove_master_key_result(remove_master_key_result other) {
       __isset_bitfield = other.__isset_bitfield;
       this.success = other.success;
-      if (other.isSetO1()) {
-        this.o1 = new MetaException(other.o1);
-      }
     }
 
-    public renew_delegation_token_result deepCopy() {
-      return new renew_delegation_token_result(this);
+    public remove_master_key_result deepCopy() {
+      return new remove_master_key_result(this);
     }
 
     @Override
     public void clear() {
       setSuccessIsSet(false);
-      this.success = 0;
-      this.o1 = null;
+      this.success = false;
     }
 
-    public long getSuccess() {
+    public boolean isSuccess() {
       return this.success;
     }
 
-    public void setSuccess(long success) {
+    public void setSuccess(boolean success) {
       this.success = success;
       setSuccessIsSet(true);
     }
@@ -133165,44 +140006,13 @@ public void setSuccessIsSet(boolean value) {
       __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
     }
 
-    public MetaException getO1() {
-      return this.o1;
-    }
-
-    public void setO1(MetaException o1) {
-      this.o1 = o1;
-    }
-
-    public void unsetO1() {
-      this.o1 = null;
-    }
-
-    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
-    public boolean isSetO1() {
-      return this.o1 != null;
-    }
-
-    public void setO1IsSet(boolean value) {
-      if (!value) {
-        this.o1 = null;
-      }
-    }
-
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case SUCCESS:
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Long)value);
-        }
-        break;
-
-      case O1:
-        if (value == null) {
-          unsetO1();
-        } else {
-          setO1((MetaException)value);
+          setSuccess((Boolean)value);
         }
         break;
 
@@ -133212,10 +140022,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return Long.valueOf(getSuccess());
-
-      case O1:
-        return getO1();
+        return Boolean.valueOf(isSuccess());
 
       }
       throw new IllegalStateException();
@@ -133230,8 +140037,6 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case SUCCESS:
         return isSetSuccess();
-      case O1:
-        return isSetO1();
       }
       throw new IllegalStateException();
     }
@@ -133240,12 +140045,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof renew_delegation_token_result)
-        return this.equals((renew_delegation_token_result)that);
+      if (that instanceof remove_master_key_result)
+        return this.equals((remove_master_key_result)that);
       return false;
     }
 
-    public boolean equals(renew_delegation_token_result that) {
+    public boolean equals(remove_master_key_result that) {
       if (that == null)
         return false;
 
@@ -133258,15 +140063,6 @@ public boolean equals(renew_delegation_token_result that) {
           return false;
       }
 
-      boolean this_present_o1 = true && this.isSetO1();
-      boolean that_present_o1 = true && that.isSetO1();
-      if (this_present_o1 || that_present_o1) {
-        if (!(this_present_o1 && that_present_o1))
-          return false;
-        if (!this.o1.equals(that.o1))
-          return false;
-      }
-
       return true;
     }
 
@@ -133279,21 +140075,16 @@ public int hashCode() {
       if (present_success)
         builder.append(success);
 
-      boolean present_o1 = true && (isSetO1());
-      builder.append(present_o1);
-      if (present_o1)
-        builder.append(o1);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(renew_delegation_token_result other) {
+    public int compareTo(remove_master_key_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      renew_delegation_token_result typedOther = (renew_delegation_token_result)other;
+      remove_master_key_result typedOther = (remove_master_key_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -133305,16 +140096,6 @@ public int compareTo(renew_delegation_token_result other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetO1()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -133332,20 +140113,12 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("renew_delegation_token_result(");
+      StringBuilder sb = new StringBuilder("remove_master_key_result(");
       boolean first = true;
 
       sb.append("success:");
       sb.append(this.success);
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("o1:");
-      if (this.o1 == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.o1);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -133373,15 +140146,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class renew_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
-      public renew_delegation_token_resultStandardScheme getScheme() {
-        return new renew_delegation_token_resultStandardScheme();
+    private static class remove_master_key_resultStandardSchemeFactory implements SchemeFactory {
+      public remove_master_key_resultStandardScheme getScheme() {
+        return new remove_master_key_resultStandardScheme();
       }
     }
 
-    private static class renew_delegation_token_resultStandardScheme extends StandardScheme<renew_delegation_token_result> {
+    private static class remove_master_key_resultStandardScheme extends StandardScheme<remove_master_key_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_master_key_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -133392,22 +140165,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_to
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
-                struct.success = iprot.readI64();
+              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
+                struct.success = iprot.readBool();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 1: // O1
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.o1 = new MetaException();
-                struct.o1.read(iprot);
-                struct.setO1IsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -133417,18 +140181,13 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, renew_delegation_to
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_master_key_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.isSetSuccess()) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeI64(struct.success);
-          oprot.writeFieldEnd();
-        }
-        if (struct.o1 != null) {
-          oprot.writeFieldBegin(O1_FIELD_DESC);
-          struct.o1.write(oprot);
+          oprot.writeBool(struct.success);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -133437,67 +140196,54 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, renew_delegation_t
 
     }
 
-    private static class renew_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
-      public renew_delegation_token_resultTupleScheme getScheme() {
-        return new renew_delegation_token_resultTupleScheme();
+    private static class remove_master_key_resultTupleSchemeFactory implements SchemeFactory {
+      public remove_master_key_resultTupleScheme getScheme() {
+        return new remove_master_key_resultTupleScheme();
       }
     }
 
-    private static class renew_delegation_token_resultTupleScheme extends TupleScheme<renew_delegation_token_result> {
+    private static class remove_master_key_resultTupleScheme extends TupleScheme<remove_master_key_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, remove_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        if (struct.isSetO1()) {
-          optionals.set(1);
-        }
-        oprot.writeBitSet(optionals, 2);
+        oprot.writeBitSet(optionals, 1);
         if (struct.isSetSuccess()) {
-          oprot.writeI64(struct.success);
-        }
-        if (struct.isSetO1()) {
-          struct.o1.write(oprot);
+          oprot.writeBool(struct.success);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, renew_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, remove_master_key_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(2);
+        BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.success = iprot.readI64();
+          struct.success = iprot.readBool();
           struct.setSuccessIsSet(true);
         }
-        if (incoming.get(1)) {
-          struct.o1 = new MetaException();
-          struct.o1.read(iprot);
-          struct.setO1IsSet(true);
-        }
       }
     }
 
   }
 
-  public static class cancel_delegation_token_args implements org.apache.thrift.TBase<cancel_delegation_token_args, cancel_delegation_token_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_delegation_token_args");
+  public static class get_master_keys_args implements org.apache.thrift.TBase<get_master_keys_args, get_master_keys_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_master_keys_args");
 
-    private static final org.apache.thrift.protocol.TField TOKEN_STR_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("token_str_form", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new cancel_delegation_token_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new cancel_delegation_token_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_master_keys_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_master_keys_argsTupleSchemeFactory());
     }
 
-    private String token_str_form; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      TOKEN_STR_FORM((short)1, "token_str_form");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -133512,8 +140258,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, renew_delegation_tok
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // TOKEN_STR_FORM
-            return TOKEN_STR_FORM;
           default:
             return null;
         }
@@ -133552,86 +140296,37 @@ public String getFieldName() {
         return _fieldName;
       }
     }
-
-    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.TOKEN_STR_FORM, new org.apache.thrift.meta_data.FieldMetaData("token_str_form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_delegation_token_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_master_keys_args.class, metaDataMap);
     }
 
-    public cancel_delegation_token_args() {
-    }
-
-    public cancel_delegation_token_args(
-      String token_str_form)
-    {
-      this();
-      this.token_str_form = token_str_form;
+    public get_master_keys_args() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public cancel_delegation_token_args(cancel_delegation_token_args other) {
-      if (other.isSetToken_str_form()) {
-        this.token_str_form = other.token_str_form;
-      }
+    public get_master_keys_args(get_master_keys_args other) {
     }
 
-    public cancel_delegation_token_args deepCopy() {
-      return new cancel_delegation_token_args(this);
+    public get_master_keys_args deepCopy() {
+      return new get_master_keys_args(this);
     }
 
     @Override
     public void clear() {
-      this.token_str_form = null;
-    }
-
-    public String getToken_str_form() {
-      return this.token_str_form;
-    }
-
-    public void setToken_str_form(String token_str_form) {
-      this.token_str_form = token_str_form;
-    }
-
-    public void unsetToken_str_form() {
-      this.token_str_form = null;
-    }
-
-    /** Returns true if field token_str_form is set (has been assigned a value) and false otherwise */
-    public boolean isSetToken_str_form() {
-      return this.token_str_form != null;
-    }
-
-    public void setToken_str_formIsSet(boolean value) {
-      if (!value) {
-        this.token_str_form = null;
-      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case TOKEN_STR_FORM:
-        if (value == null) {
-          unsetToken_str_form();
-        } else {
-          setToken_str_form((String)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case TOKEN_STR_FORM:
-        return getToken_str_form();
-
       }
       throw new IllegalStateException();
     }
@@ -133643,8 +140338,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case TOKEN_STR_FORM:
-        return isSetToken_str_form();
       }
       throw new IllegalStateException();
     }
@@ -133653,24 +140346,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof cancel_delegation_token_args)
-        return this.equals((cancel_delegation_token_args)that);
+      if (that instanceof get_master_keys_args)
+        return this.equals((get_master_keys_args)that);
       return false;
     }
 
-    public boolean equals(cancel_delegation_token_args that) {
+    public boolean equals(get_master_keys_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_token_str_form = true && this.isSetToken_str_form();
-      boolean that_present_token_str_form = true && that.isSetToken_str_form();
-      if (this_present_token_str_form || that_present_token_str_form) {
-        if (!(this_present_token_str_form && that_present_token_str_form))
-          return false;
-        if (!this.token_str_form.equals(that.token_str_form))
-          return false;
-      }
-
       return true;
     }
 
@@ -133678,32 +140362,17 @@ public boolean equals(cancel_delegation_token_args that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_token_str_form = true && (isSetToken_str_form());
-      builder.append(present_token_str_form);
-      if (present_token_str_form)
-        builder.append(token_str_form);
-
       return builder.toHashCode();
     }
 
-    public int compareTo(cancel_delegation_token_args other) {
+    public int compareTo(get_master_keys_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      cancel_delegation_token_args typedOther = (cancel_delegation_token_args)other;
+      get_master_keys_args typedOther = (get_master_keys_args)other;
 
-      lastComparison = Boolean.valueOf(isSetToken_str_form()).compareTo(typedOther.isSetToken_str_form());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetToken_str_form()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token_str_form, typedOther.token_str_form);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -133721,16 +140390,9 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("cancel_delegation_token_args(");
+      StringBuilder sb = new StringBuilder("get_master_keys_args(");
       boolean first = true;
 
-      sb.append("token_str_form:");
-      if (this.token_str_form == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.token_str_form);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -133756,15 +140418,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class cancel_delegation_token_argsStandardSchemeFactory implements SchemeFactory {
-      public cancel_delegation_token_argsStandardScheme getScheme() {
-        return new cancel_delegation_token_argsStandardScheme();
+    private static class get_master_keys_argsStandardSchemeFactory implements SchemeFactory {
+      public get_master_keys_argsStandardScheme getScheme() {
+        return new get_master_keys_argsStandardScheme();
       }
     }
 
-    private static class cancel_delegation_token_argsStandardScheme extends StandardScheme<cancel_delegation_token_args> {
+    private static class get_master_keys_argsStandardScheme extends StandardScheme<get_master_keys_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_master_keys_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -133774,14 +140436,6 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_t
             break;
           }
           switch (schemeField.id) {
-            case 1: // TOKEN_STR_FORM
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.token_str_form = iprot.readString();
-                struct.setToken_str_formIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -133791,71 +140445,53 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_t
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_master_keys_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.token_str_form != null) {
-          oprot.writeFieldBegin(TOKEN_STR_FORM_FIELD_DESC);
-          oprot.writeString(struct.token_str_form);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class cancel_delegation_token_argsTupleSchemeFactory implements SchemeFactory {
-      public cancel_delegation_token_argsTupleScheme getScheme() {
-        return new cancel_delegation_token_argsTupleScheme();
+    private static class get_master_keys_argsTupleSchemeFactory implements SchemeFactory {
+      public get_master_keys_argsTupleScheme getScheme() {
+        return new get_master_keys_argsTupleScheme();
       }
     }
 
-    private static class cancel_delegation_token_argsTupleScheme extends TupleScheme<cancel_delegation_token_args> {
+    private static class get_master_keys_argsTupleScheme extends TupleScheme<get_master_keys_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_master_keys_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetToken_str_form()) {
-          optionals.set(0);
-        }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetToken_str_form()) {
-          oprot.writeString(struct.token_str_form);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_master_keys_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
-        if (incoming.get(0)) {
-          struct.token_str_form = iprot.readString();
-          struct.setToken_str_formIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class cancel_delegation_token_result implements org.apache.thrift.TBase<cancel_delegation_token_result, cancel_delegation_token_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_delegation_token_result");
+  public static class get_master_keys_result implements org.apache.thrift.TBase<get_master_keys_result, get_master_keys_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_master_keys_result");
 
-    private static final org.apache.thrift.protocol.TField O1_FIELD_DESC = new org.apache.thrift.protocol.TField("o1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new cancel_delegation_token_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new cancel_delegation_token_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new get_master_keys_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new get_master_keys_resultTupleSchemeFactory());
     }
 
-    private MetaException o1; // required
+    private List<String> success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      O1((short)1, "o1");
+      SUCCESS((short)0, "success");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -133870,8 +140506,8 @@ public void read(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_to
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // O1
-            return O1;
+          case 0: // SUCCESS
+            return SUCCESS;
           default:
             return null;
         }
@@ -133915,70 +140551,90 @@ public String getFieldName() {
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.O1, new org.apache.thrift.meta_data.FieldMetaData("o1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_delegation_token_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_master_keys_result.class, metaDataMap);
     }
 
-    public cancel_delegation_token_result() {
+    public get_master_keys_result() {
     }
 
-    public cancel_delegation_token_result(
-      MetaException o1)
+    public get_master_keys_result(
+      List<String> success)
     {
       this();
-      this.o1 = o1;
+      this.success = success;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public cancel_delegation_token_result(cancel_delegation_token_result other) {
-      if (other.isSetO1()) {
-        this.o1 = new MetaException(other.o1);
+    public get_master_keys_result(get_master_keys_result other) {
+      if (other.isSetSuccess()) {
+        List<String> __this__success = new ArrayList<String>();
+        for (String other_element : other.success) {
+          __this__success.add(other_element);
+        }
+        this.success = __this__success;
       }
     }
 
-    public cancel_delegation_token_result deepCopy() {
-      return new cancel_delegation_token_result(this);
+    public get_master_keys_result deepCopy() {
+      return new get_master_keys_result(this);
     }
 
     @Override
     public void clear() {
-      this.o1 = null;
+      this.success = null;
     }
 
-    public MetaException getO1() {
-      return this.o1;
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
     }
 
-    public void setO1(MetaException o1) {
-      this.o1 = o1;
+    public java.util.Iterator<String> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
     }
 
-    public void unsetO1() {
-      this.o1 = null;
+    public void addToSuccess(String elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<String>();
+      }
+      this.success.add(elem);
     }
 
-    /** Returns true if field o1 is set (has been assigned a value) and false otherwise */
-    public boolean isSetO1() {
-      return this.o1 != null;
+    public List<String> getSuccess() {
+      return this.success;
     }
 
-    public void setO1IsSet(boolean value) {
+    public void setSuccess(List<String> success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
       if (!value) {
-        this.o1 = null;
+        this.success = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case O1:
+      case SUCCESS:
         if (value == null) {
-          unsetO1();
+          unsetSuccess();
         } else {
-          setO1((MetaException)value);
+          setSuccess((List<String>)value);
         }
         break;
 
@@ -133987,8 +140643,8 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case O1:
-        return getO1();
+      case SUCCESS:
+        return getSuccess();
 
       }
       throw new IllegalStateException();
@@ -134001,8 +140657,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case O1:
-        return isSetO1();
+      case SUCCESS:
+        return isSetSuccess();
       }
       throw new IllegalStateException();
     }
@@ -134011,21 +140667,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof cancel_delegation_token_result)
-        return this.equals((cancel_delegation_token_result)that);
+      if (that instanceof get_master_keys_result)
+        return this.equals((get_master_keys_result)that);
       return false;
     }
 
-    public boolean equals(cancel_delegation_token_result that) {
+    public boolean equals(get_master_keys_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_o1 = true && this.isSetO1();
-      boolean that_present_o1 = true && that.isSetO1();
-      if (this_present_o1 || that_present_o1) {
-        if (!(this_present_o1 && that_present_o1))
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
           return false;
-        if (!this.o1.equals(that.o1))
+        if (!this.success.equals(that.success))
           return false;
       }
 
@@ -134036,28 +140692,28 @@ public boolean equals(cancel_delegation_token_result that) {
     public int hashCode() {
       HashCodeBuilder builder = new HashCodeBuilder();
 
-      boolean present_o1 = true && (isSetO1());
-      builder.append(present_o1);
-      if (present_o1)
-        builder.append(o1);
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
 
       return builder.toHashCode();
     }
 
-    public int compareTo(cancel_delegation_token_result other) {
+    public int compareTo(get_master_keys_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      cancel_delegation_token_result typedOther = (cancel_delegation_token_result)other;
+      get_master_keys_result typedOther = (get_master_keys_result)other;
 
-      lastComparison = Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetO1()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o1, typedOther.o1);
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -134079,14 +140735,14 @@ public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("cancel_delegation_token_result(");
+      StringBuilder sb = new StringBuilder("get_master_keys_result(");
       boolean first = true;
 
-      sb.append("o1:");
-      if (this.o1 == null) {
+      sb.append("success:");
+      if (this.success == null) {
         sb.append("null");
       } else {
-        sb.append(this.o1);
+        sb.append(this.success);
       }
       first = false;
       sb.append(")");
@@ -134114,15 +140770,15 @@ private void readObject(java.io.ObjectInputStream in) throws java.io.IOException
       }
     }
 
-    private static class cancel_delegation_token_resultStandardSchemeFactory implements SchemeFactory {
-      public cancel_delegation_token_resultStandardScheme getScheme() {
-        return new cancel_delegation_token_resultStandardScheme();
+    private static class get_master_keys_resultStandardSchemeFactory implements SchemeFactory {
+      public get_master_keys_resultStandardScheme getScheme() {
+        return new get_master_keys_resultStandardScheme();
       }
     }
 
-    private static class cancel_delegation_token_resultStandardScheme extends StandardScheme<cancel_delegation_token_result> {
+    private static class get_master_keys_resultStandardScheme extends StandardScheme<get_master_keys_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, get_master_keys_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -134132,11 +140788,20 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_t
             break;
           }
           switch (schemeField.id) {
-            case 1: // O1
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.o1 = new MetaException();
-                struct.o1.read(iprot);
-                struct.setO1IsSet(true);
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list1008 = iprot.readListBegin();
+                  struct.success = new ArrayList<String>(_list1008.size);
+                  for (int _i1009 = 0; _i1009 < _list1008.size; ++_i1009)
+                  {
+                    String _elem1010; // required
+                    _elem1010 = iprot.readString();
+                    struct.success.add(_elem1010);
+                  }
+                  iprot.readListEnd();
+                }
+                struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -134150,13 +140815,20 @@ public void read(org.apache.thrift.protocol.TProtocol iprot, cancel_delegation_t
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, get_master_keys_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.o1 != null) {
-          oprot.writeFieldBegin(O1_FIELD_DESC);
-          struct.o1.write(oprot);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
+            for (String _iter1011 : struct.success)
+            {
+              oprot.writeString(_iter1011);
+            }
+            oprot.writeListEnd();
+          }
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -134165,35 +140837,49 @@ public void write(org.apache.thrift.protocol.TProtocol oprot, cancel_delegation_
 
     }
 
-    private static class cancel_delegation_token_resultTupleSchemeFactory implements SchemeFactory {
-      public cancel_delegation_token_resultTupleScheme getScheme() {
-        return new cancel_delegation_token_resultTupleScheme();
+    private static class get_master_keys_resultTupleSchemeFactory implements SchemeFactory {
+      public get_master_keys_resultTupleScheme getScheme() {
+        return new get_master_keys_resultTupleScheme();
       }
     }
 
-    private static class cancel_delegation_token_resultTupleScheme extends TupleScheme<cancel_delegation_token_result> {
+    private static class get_master_keys_resultTupleScheme extends TupleScheme<get_master_keys_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, get_master_keys_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetO1()) {
+        if (struct.isSetSuccess()) {
           optionals.set(0);
         }
         oprot.writeBitSet(optionals, 1);
-        if (struct.isSetO1()) {
-          struct.o1.write(oprot);
+        if (struct.isSetSuccess()) {
+          {
+            oprot.writeI32(struct.success.size());
+            for (String _iter1012 : struct.success)
+            {
+              oprot.writeString(_iter1012);
+            }
+          }
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, cancel_delegation_token_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, get_master_keys_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.o1 = new MetaException();
-          struct.o1.read(iprot);
-          struct.setO1IsSet(true);
+          {
+            org.apache.thrift.protocol.TList _list1013 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
+            struct.success = new ArrayList<String>(_list1013.size);
+            for (int _i1014 = 0; _i1014 < _list1013.size; ++_i1014)
+            {
+              String _elem1015; // required
+              _elem1015 = iprot.readString();
+              struct.success.add(_elem1015);
+            }
+          }
+          struct.setSuccessIsSet(true);
         }
       }
     }
diff --git a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
index 8bef609..b74fc53 100644
--- a/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
+++ b/metastore/src/gen/thrift/gen-php/metastore/ThriftHiveMetastore.php
@@ -126,6 +126,14 @@ interface ThriftHiveMetastoreIf extends \FacebookServiceIf {
   public function get_delegation_token($token_owner, $renewer_kerberos_principal_name);
   public function renew_delegation_token($token_str_form);
   public function cancel_delegation_token($token_str_form);
+  public function add_token($token_identifier, $delegation_token);
+  public function remove_token($token_identifier);
+  public function get_token($token_identifier);
+  public function get_all_token_identifiers();
+  public function add_master_key($key);
+  public function update_master_key($seq_number, $key);
+  public function remove_master_key($key_seq);
+  public function get_master_keys();
   public function get_open_txns();
   public function get_open_txns_info();
   public function open_txns(\metastore\OpenTxnRequest $rqst);
@@ -6568,6 +6576,420 @@ class ThriftHiveMetastoreClient extends \FacebookServiceClient implements \metas
     return;
   }
 
+  public function add_token($token_identifier, $delegation_token)
+  {
+    $this->send_add_token($token_identifier, $delegation_token);
+    return $this->recv_add_token();
+  }
+
+  public function send_add_token($token_identifier, $delegation_token)
+  {
+    $args = new \metastore\ThriftHiveMetastore_add_token_args();
+    $args->token_identifier = $token_identifier;
+    $args->delegation_token = $delegation_token;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'add_token', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('add_token', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_add_token()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_add_token_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_add_token_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("add_token failed: unknown result");
+  }
+
+  public function remove_token($token_identifier)
+  {
+    $this->send_remove_token($token_identifier);
+    return $this->recv_remove_token();
+  }
+
+  public function send_remove_token($token_identifier)
+  {
+    $args = new \metastore\ThriftHiveMetastore_remove_token_args();
+    $args->token_identifier = $token_identifier;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'remove_token', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('remove_token', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_remove_token()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_remove_token_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_remove_token_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("remove_token failed: unknown result");
+  }
+
+  public function get_token($token_identifier)
+  {
+    $this->send_get_token($token_identifier);
+    return $this->recv_get_token();
+  }
+
+  public function send_get_token($token_identifier)
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_token_args();
+    $args->token_identifier = $token_identifier;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_token', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_token', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_token()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_token_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_token_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("get_token failed: unknown result");
+  }
+
+  public function get_all_token_identifiers()
+  {
+    $this->send_get_all_token_identifiers();
+    return $this->recv_get_all_token_identifiers();
+  }
+
+  public function send_get_all_token_identifiers()
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_all_token_identifiers_args();
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_all_token_identifiers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_all_token_identifiers', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_all_token_identifiers()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_all_token_identifiers_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_all_token_identifiers_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("get_all_token_identifiers failed: unknown result");
+  }
+
+  public function add_master_key($key)
+  {
+    $this->send_add_master_key($key);
+    return $this->recv_add_master_key();
+  }
+
+  public function send_add_master_key($key)
+  {
+    $args = new \metastore\ThriftHiveMetastore_add_master_key_args();
+    $args->key = $key;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'add_master_key', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('add_master_key', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_add_master_key()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_add_master_key_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_add_master_key_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    throw new \Exception("add_master_key failed: unknown result");
+  }
+
+  public function update_master_key($seq_number, $key)
+  {
+    $this->send_update_master_key($seq_number, $key);
+    $this->recv_update_master_key();
+  }
+
+  public function send_update_master_key($seq_number, $key)
+  {
+    $args = new \metastore\ThriftHiveMetastore_update_master_key_args();
+    $args->seq_number = $seq_number;
+    $args->key = $key;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'update_master_key', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('update_master_key', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_update_master_key()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_update_master_key_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_update_master_key_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->o1 !== null) {
+      throw $result->o1;
+    }
+    if ($result->o2 !== null) {
+      throw $result->o2;
+    }
+    return;
+  }
+
+  public function remove_master_key($key_seq)
+  {
+    $this->send_remove_master_key($key_seq);
+    return $this->recv_remove_master_key();
+  }
+
+  public function send_remove_master_key($key_seq)
+  {
+    $args = new \metastore\ThriftHiveMetastore_remove_master_key_args();
+    $args->key_seq = $key_seq;
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'remove_master_key', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('remove_master_key', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_remove_master_key()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_remove_master_key_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_remove_master_key_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("remove_master_key failed: unknown result");
+  }
+
+  public function get_master_keys()
+  {
+    $this->send_get_master_keys();
+    return $this->recv_get_master_keys();
+  }
+
+  public function send_get_master_keys()
+  {
+    $args = new \metastore\ThriftHiveMetastore_get_master_keys_args();
+    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
+    if ($bin_accel)
+    {
+      thrift_protocol_write_binary($this->output_, 'get_master_keys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
+    }
+    else
+    {
+      $this->output_->writeMessageBegin('get_master_keys', TMessageType::CALL, $this->seqid_);
+      $args->write($this->output_);
+      $this->output_->writeMessageEnd();
+      $this->output_->getTransport()->flush();
+    }
+  }
+
+  public function recv_get_master_keys()
+  {
+    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
+    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\metastore\ThriftHiveMetastore_get_master_keys_result', $this->input_->isStrictRead());
+    else
+    {
+      $rseqid = 0;
+      $fname = null;
+      $mtype = 0;
+
+      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
+      if ($mtype == TMessageType::EXCEPTION) {
+        $x = new TApplicationException();
+        $x->read($this->input_);
+        $this->input_->readMessageEnd();
+        throw $x;
+      }
+      $result = new \metastore\ThriftHiveMetastore_get_master_keys_result();
+      $result->read($this->input_);
+      $this->input_->readMessageEnd();
+    }
+    if ($result->success !== null) {
+      return $result->success;
+    }
+    throw new \Exception("get_master_keys failed: unknown result");
+  }
+
   public function get_open_txns()
   {
     $this->send_get_open_txns();
@@ -33275,6 +33697,1252 @@ class ThriftHiveMetastore_cancel_delegation_token_result {
 
 }
 
+class ThriftHiveMetastore_add_token_args {
+  static $_TSPEC;
+
+  public $token_identifier = null;
+  public $delegation_token = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'token_identifier',
+          'type' => TType::STRING,
+          ),
+        2 => array(
+          'var' => 'delegation_token',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['token_identifier'])) {
+        $this->token_identifier = $vals['token_identifier'];
+      }
+      if (isset($vals['delegation_token'])) {
+        $this->delegation_token = $vals['delegation_token'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_add_token_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->token_identifier);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->delegation_token);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_add_token_args');
+    if ($this->token_identifier !== null) {
+      $xfer += $output->writeFieldBegin('token_identifier', TType::STRING, 1);
+      $xfer += $output->writeString($this->token_identifier);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->delegation_token !== null) {
+      $xfer += $output->writeFieldBegin('delegation_token', TType::STRING, 2);
+      $xfer += $output->writeString($this->delegation_token);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_add_token_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::BOOL,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_add_token_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::BOOL) {
+            $xfer += $input->readBool($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_add_token_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
+      $xfer += $output->writeBool($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_remove_token_args {
+  static $_TSPEC;
+
+  public $token_identifier = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'token_identifier',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['token_identifier'])) {
+        $this->token_identifier = $vals['token_identifier'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_remove_token_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->token_identifier);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_remove_token_args');
+    if ($this->token_identifier !== null) {
+      $xfer += $output->writeFieldBegin('token_identifier', TType::STRING, 1);
+      $xfer += $output->writeString($this->token_identifier);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_remove_token_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::BOOL,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_remove_token_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::BOOL) {
+            $xfer += $input->readBool($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_remove_token_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
+      $xfer += $output->writeBool($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_token_args {
+  static $_TSPEC;
+
+  public $token_identifier = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'token_identifier',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['token_identifier'])) {
+        $this->token_identifier = $vals['token_identifier'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_token_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->token_identifier);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_token_args');
+    if ($this->token_identifier !== null) {
+      $xfer += $output->writeFieldBegin('token_identifier', TType::STRING, 1);
+      $xfer += $output->writeString($this->token_identifier);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_token_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_token_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_token_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
+      $xfer += $output->writeString($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_all_token_identifiers_args {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_all_token_identifiers_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_all_token_identifiers_args');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_all_token_identifiers_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::LST,
+          'etype' => TType::STRING,
+          'elem' => array(
+            'type' => TType::STRING,
+            ),
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_all_token_identifiers_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::LST) {
+            $this->success = array();
+            $_size883 = 0;
+            $_etype886 = 0;
+            $xfer += $input->readListBegin($_etype886, $_size883);
+            for ($_i887 = 0; $_i887 < $_size883; ++$_i887)
+            {
+              $elem888 = null;
+              $xfer += $input->readString($elem888);
+              $this->success []= $elem888;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_all_token_identifiers_result');
+    if ($this->success !== null) {
+      if (!is_array($this->success)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
+      {
+        $output->writeListBegin(TType::STRING, count($this->success));
+        {
+          foreach ($this->success as $iter889)
+          {
+            $xfer += $output->writeString($iter889);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_add_master_key_args {
+  static $_TSPEC;
+
+  public $key = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'key',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['key'])) {
+        $this->key = $vals['key'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_add_master_key_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->key);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_add_master_key_args');
+    if ($this->key !== null) {
+      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
+      $xfer += $output->writeString($this->key);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_add_master_key_result {
+  static $_TSPEC;
+
+  public $success = null;
+  public $o1 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::I32,
+          ),
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_add_master_key_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::I32) {
+            $xfer += $input->readI32($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\MetaException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_add_master_key_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
+      $xfer += $output->writeI32($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_update_master_key_args {
+  static $_TSPEC;
+
+  public $seq_number = null;
+  public $key = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'seq_number',
+          'type' => TType::I32,
+          ),
+        2 => array(
+          'var' => 'key',
+          'type' => TType::STRING,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['seq_number'])) {
+        $this->seq_number = $vals['seq_number'];
+      }
+      if (isset($vals['key'])) {
+        $this->key = $vals['key'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_update_master_key_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::I32) {
+            $xfer += $input->readI32($this->seq_number);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRING) {
+            $xfer += $input->readString($this->key);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_update_master_key_args');
+    if ($this->seq_number !== null) {
+      $xfer += $output->writeFieldBegin('seq_number', TType::I32, 1);
+      $xfer += $output->writeI32($this->seq_number);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->key !== null) {
+      $xfer += $output->writeFieldBegin('key', TType::STRING, 2);
+      $xfer += $output->writeString($this->key);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_update_master_key_result {
+  static $_TSPEC;
+
+  public $o1 = null;
+  public $o2 = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'o1',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\NoSuchObjectException',
+          ),
+        2 => array(
+          'var' => 'o2',
+          'type' => TType::STRUCT,
+          'class' => '\metastore\MetaException',
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['o1'])) {
+        $this->o1 = $vals['o1'];
+      }
+      if (isset($vals['o2'])) {
+        $this->o2 = $vals['o2'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_update_master_key_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::STRUCT) {
+            $this->o1 = new \metastore\NoSuchObjectException();
+            $xfer += $this->o1->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        case 2:
+          if ($ftype == TType::STRUCT) {
+            $this->o2 = new \metastore\MetaException();
+            $xfer += $this->o2->read($input);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_update_master_key_result');
+    if ($this->o1 !== null) {
+      $xfer += $output->writeFieldBegin('o1', TType::STRUCT, 1);
+      $xfer += $this->o1->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    if ($this->o2 !== null) {
+      $xfer += $output->writeFieldBegin('o2', TType::STRUCT, 2);
+      $xfer += $this->o2->write($output);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_remove_master_key_args {
+  static $_TSPEC;
+
+  public $key_seq = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        1 => array(
+          'var' => 'key_seq',
+          'type' => TType::I32,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['key_seq'])) {
+        $this->key_seq = $vals['key_seq'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_remove_master_key_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 1:
+          if ($ftype == TType::I32) {
+            $xfer += $input->readI32($this->key_seq);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_remove_master_key_args');
+    if ($this->key_seq !== null) {
+      $xfer += $output->writeFieldBegin('key_seq', TType::I32, 1);
+      $xfer += $output->writeI32($this->key_seq);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_remove_master_key_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::BOOL,
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_remove_master_key_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::BOOL) {
+            $xfer += $input->readBool($this->success);
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_remove_master_key_result');
+    if ($this->success !== null) {
+      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
+      $xfer += $output->writeBool($this->success);
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_master_keys_args {
+  static $_TSPEC;
+
+
+  public function __construct() {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        );
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_master_keys_args';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_master_keys_args');
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
+class ThriftHiveMetastore_get_master_keys_result {
+  static $_TSPEC;
+
+  public $success = null;
+
+  public function __construct($vals=null) {
+    if (!isset(self::$_TSPEC)) {
+      self::$_TSPEC = array(
+        0 => array(
+          'var' => 'success',
+          'type' => TType::LST,
+          'etype' => TType::STRING,
+          'elem' => array(
+            'type' => TType::STRING,
+            ),
+          ),
+        );
+    }
+    if (is_array($vals)) {
+      if (isset($vals['success'])) {
+        $this->success = $vals['success'];
+      }
+    }
+  }
+
+  public function getName() {
+    return 'ThriftHiveMetastore_get_master_keys_result';
+  }
+
+  public function read($input)
+  {
+    $xfer = 0;
+    $fname = null;
+    $ftype = 0;
+    $fid = 0;
+    $xfer += $input->readStructBegin($fname);
+    while (true)
+    {
+      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
+      if ($ftype == TType::STOP) {
+        break;
+      }
+      switch ($fid)
+      {
+        case 0:
+          if ($ftype == TType::LST) {
+            $this->success = array();
+            $_size890 = 0;
+            $_etype893 = 0;
+            $xfer += $input->readListBegin($_etype893, $_size890);
+            for ($_i894 = 0; $_i894 < $_size890; ++$_i894)
+            {
+              $elem895 = null;
+              $xfer += $input->readString($elem895);
+              $this->success []= $elem895;
+            }
+            $xfer += $input->readListEnd();
+          } else {
+            $xfer += $input->skip($ftype);
+          }
+          break;
+        default:
+          $xfer += $input->skip($ftype);
+          break;
+      }
+      $xfer += $input->readFieldEnd();
+    }
+    $xfer += $input->readStructEnd();
+    return $xfer;
+  }
+
+  public function write($output) {
+    $xfer = 0;
+    $xfer += $output->writeStructBegin('ThriftHiveMetastore_get_master_keys_result');
+    if ($this->success !== null) {
+      if (!is_array($this->success)) {
+        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
+      }
+      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
+      {
+        $output->writeListBegin(TType::STRING, count($this->success));
+        {
+          foreach ($this->success as $iter896)
+          {
+            $xfer += $output->writeString($iter896);
+          }
+        }
+        $output->writeListEnd();
+      }
+      $xfer += $output->writeFieldEnd();
+    }
+    $xfer += $output->writeFieldStop();
+    $xfer += $output->writeStructEnd();
+    return $xfer;
+  }
+
+}
+
 class ThriftHiveMetastore_get_open_txns_args {
   static $_TSPEC;
 
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
index f263d4b..dfaa362 100755
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
@@ -133,6 +133,14 @@ if len(sys.argv) <= 1 or sys.argv[1] == '--help':
   print '  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)'
   print '  i64 renew_delegation_token(string token_str_form)'
   print '  void cancel_delegation_token(string token_str_form)'
+  print '  bool add_token(string token_identifier, string delegation_token)'
+  print '  bool remove_token(string token_identifier)'
+  print '  string get_token(string token_identifier)'
+  print '   get_all_token_identifiers()'
+  print '  i32 add_master_key(string key)'
+  print '  void update_master_key(i32 seq_number, string key)'
+  print '  bool remove_master_key(i32 key_seq)'
+  print '   get_master_keys()'
   print '  GetOpenTxnsResponse get_open_txns()'
   print '  GetOpenTxnsInfoResponse get_open_txns_info()'
   print '  OpenTxnsResponse open_txns(OpenTxnRequest rqst)'
@@ -861,6 +869,54 @@ elif cmd == 'cancel_delegation_token':
     sys.exit(1)
   pp.pprint(client.cancel_delegation_token(args[0],))
 
+elif cmd == 'add_token':
+  if len(args) != 2:
+    print 'add_token requires 2 args'
+    sys.exit(1)
+  pp.pprint(client.add_token(args[0],args[1],))
+
+elif cmd == 'remove_token':
+  if len(args) != 1:
+    print 'remove_token requires 1 args'
+    sys.exit(1)
+  pp.pprint(client.remove_token(args[0],))
+
+elif cmd == 'get_token':
+  if len(args) != 1:
+    print 'get_token requires 1 args'
+    sys.exit(1)
+  pp.pprint(client.get_token(args[0],))
+
+elif cmd == 'get_all_token_identifiers':
+  if len(args) != 0:
+    print 'get_all_token_identifiers requires 0 args'
+    sys.exit(1)
+  pp.pprint(client.get_all_token_identifiers())
+
+elif cmd == 'add_master_key':
+  if len(args) != 1:
+    print 'add_master_key requires 1 args'
+    sys.exit(1)
+  pp.pprint(client.add_master_key(args[0],))
+
+elif cmd == 'update_master_key':
+  if len(args) != 2:
+    print 'update_master_key requires 2 args'
+    sys.exit(1)
+  pp.pprint(client.update_master_key(eval(args[0]),args[1],))
+
+elif cmd == 'remove_master_key':
+  if len(args) != 1:
+    print 'remove_master_key requires 1 args'
+    sys.exit(1)
+  pp.pprint(client.remove_master_key(eval(args[0]),))
+
+elif cmd == 'get_master_keys':
+  if len(args) != 0:
+    print 'get_master_keys requires 0 args'
+    sys.exit(1)
+  pp.pprint(client.get_master_keys())
+
 elif cmd == 'get_open_txns':
   if len(args) != 0:
     print 'get_open_txns requires 0 args'
diff --git a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
index 54b2ba3..235d3f8 100644
--- a/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
+++ b/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore.py
@@ -943,6 +943,56 @@ def cancel_delegation_token(self, token_str_form):
     """
     pass
 
+  def add_token(self, token_identifier, delegation_token):
+    """
+    Parameters:
+     - token_identifier
+     - delegation_token
+    """
+    pass
+
+  def remove_token(self, token_identifier):
+    """
+    Parameters:
+     - token_identifier
+    """
+    pass
+
+  def get_token(self, token_identifier):
+    """
+    Parameters:
+     - token_identifier
+    """
+    pass
+
+  def get_all_token_identifiers(self, ):
+    pass
+
+  def add_master_key(self, key):
+    """
+    Parameters:
+     - key
+    """
+    pass
+
+  def update_master_key(self, seq_number, key):
+    """
+    Parameters:
+     - seq_number
+     - key
+    """
+    pass
+
+  def remove_master_key(self, key_seq):
+    """
+    Parameters:
+     - key_seq
+    """
+    pass
+
+  def get_master_keys(self, ):
+    pass
+
   def get_open_txns(self, ):
     pass
 
@@ -5097,6 +5147,244 @@ def recv_cancel_delegation_token(self, ):
       raise result.o1
     return
 
+  def add_token(self, token_identifier, delegation_token):
+    """
+    Parameters:
+     - token_identifier
+     - delegation_token
+    """
+    self.send_add_token(token_identifier, delegation_token)
+    return self.recv_add_token()
+
+  def send_add_token(self, token_identifier, delegation_token):
+    self._oprot.writeMessageBegin('add_token', TMessageType.CALL, self._seqid)
+    args = add_token_args()
+    args.token_identifier = token_identifier
+    args.delegation_token = delegation_token
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_add_token(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = add_token_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "add_token failed: unknown result");
+
+  def remove_token(self, token_identifier):
+    """
+    Parameters:
+     - token_identifier
+    """
+    self.send_remove_token(token_identifier)
+    return self.recv_remove_token()
+
+  def send_remove_token(self, token_identifier):
+    self._oprot.writeMessageBegin('remove_token', TMessageType.CALL, self._seqid)
+    args = remove_token_args()
+    args.token_identifier = token_identifier
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_remove_token(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = remove_token_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_token failed: unknown result");
+
+  def get_token(self, token_identifier):
+    """
+    Parameters:
+     - token_identifier
+    """
+    self.send_get_token(token_identifier)
+    return self.recv_get_token()
+
+  def send_get_token(self, token_identifier):
+    self._oprot.writeMessageBegin('get_token', TMessageType.CALL, self._seqid)
+    args = get_token_args()
+    args.token_identifier = token_identifier
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_token(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_token_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_token failed: unknown result");
+
+  def get_all_token_identifiers(self, ):
+    self.send_get_all_token_identifiers()
+    return self.recv_get_all_token_identifiers()
+
+  def send_get_all_token_identifiers(self, ):
+    self._oprot.writeMessageBegin('get_all_token_identifiers', TMessageType.CALL, self._seqid)
+    args = get_all_token_identifiers_args()
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_all_token_identifiers(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_all_token_identifiers_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_token_identifiers failed: unknown result");
+
+  def add_master_key(self, key):
+    """
+    Parameters:
+     - key
+    """
+    self.send_add_master_key(key)
+    return self.recv_add_master_key()
+
+  def send_add_master_key(self, key):
+    self._oprot.writeMessageBegin('add_master_key', TMessageType.CALL, self._seqid)
+    args = add_master_key_args()
+    args.key = key
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_add_master_key(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = add_master_key_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    if result.o1 is not None:
+      raise result.o1
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "add_master_key failed: unknown result");
+
+  def update_master_key(self, seq_number, key):
+    """
+    Parameters:
+     - seq_number
+     - key
+    """
+    self.send_update_master_key(seq_number, key)
+    self.recv_update_master_key()
+
+  def send_update_master_key(self, seq_number, key):
+    self._oprot.writeMessageBegin('update_master_key', TMessageType.CALL, self._seqid)
+    args = update_master_key_args()
+    args.seq_number = seq_number
+    args.key = key
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_update_master_key(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = update_master_key_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.o1 is not None:
+      raise result.o1
+    if result.o2 is not None:
+      raise result.o2
+    return
+
+  def remove_master_key(self, key_seq):
+    """
+    Parameters:
+     - key_seq
+    """
+    self.send_remove_master_key(key_seq)
+    return self.recv_remove_master_key()
+
+  def send_remove_master_key(self, key_seq):
+    self._oprot.writeMessageBegin('remove_master_key', TMessageType.CALL, self._seqid)
+    args = remove_master_key_args()
+    args.key_seq = key_seq
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_remove_master_key(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = remove_master_key_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "remove_master_key failed: unknown result");
+
+  def get_master_keys(self, ):
+    self.send_get_master_keys()
+    return self.recv_get_master_keys()
+
+  def send_get_master_keys(self, ):
+    self._oprot.writeMessageBegin('get_master_keys', TMessageType.CALL, self._seqid)
+    args = get_master_keys_args()
+    args.write(self._oprot)
+    self._oprot.writeMessageEnd()
+    self._oprot.trans.flush()
+
+  def recv_get_master_keys(self, ):
+    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
+    if mtype == TMessageType.EXCEPTION:
+      x = TApplicationException()
+      x.read(self._iprot)
+      self._iprot.readMessageEnd()
+      raise x
+    result = get_master_keys_result()
+    result.read(self._iprot)
+    self._iprot.readMessageEnd()
+    if result.success is not None:
+      return result.success
+    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_master_keys failed: unknown result");
+
   def get_open_txns(self, ):
     self.send_get_open_txns()
     return self.recv_get_open_txns()
@@ -5719,6 +6007,14 @@ def __init__(self, handler):
     self._processMap["get_delegation_token"] = Processor.process_get_delegation_token
     self._processMap["renew_delegation_token"] = Processor.process_renew_delegation_token
     self._processMap["cancel_delegation_token"] = Processor.process_cancel_delegation_token
+    self._processMap["add_token"] = Processor.process_add_token
+    self._processMap["remove_token"] = Processor.process_remove_token
+    self._processMap["get_token"] = Processor.process_get_token
+    self._processMap["get_all_token_identifiers"] = Processor.process_get_all_token_identifiers
+    self._processMap["add_master_key"] = Processor.process_add_master_key
+    self._processMap["update_master_key"] = Processor.process_update_master_key
+    self._processMap["remove_master_key"] = Processor.process_remove_master_key
+    self._processMap["get_master_keys"] = Processor.process_get_master_keys
     self._processMap["get_open_txns"] = Processor.process_get_open_txns
     self._processMap["get_open_txns_info"] = Processor.process_get_open_txns_info
     self._processMap["open_txns"] = Processor.process_open_txns
@@ -7546,6 +7842,102 @@ def process_cancel_delegation_token(self, seqid, iprot, oprot):
     oprot.writeMessageEnd()
     oprot.trans.flush()
 
+  def process_add_token(self, seqid, iprot, oprot):
+    args = add_token_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = add_token_result()
+    result.success = self._handler.add_token(args.token_identifier, args.delegation_token)
+    oprot.writeMessageBegin("add_token", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_remove_token(self, seqid, iprot, oprot):
+    args = remove_token_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = remove_token_result()
+    result.success = self._handler.remove_token(args.token_identifier)
+    oprot.writeMessageBegin("remove_token", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_get_token(self, seqid, iprot, oprot):
+    args = get_token_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_token_result()
+    result.success = self._handler.get_token(args.token_identifier)
+    oprot.writeMessageBegin("get_token", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_get_all_token_identifiers(self, seqid, iprot, oprot):
+    args = get_all_token_identifiers_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_all_token_identifiers_result()
+    result.success = self._handler.get_all_token_identifiers()
+    oprot.writeMessageBegin("get_all_token_identifiers", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_add_master_key(self, seqid, iprot, oprot):
+    args = add_master_key_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = add_master_key_result()
+    try:
+      result.success = self._handler.add_master_key(args.key)
+    except MetaException as o1:
+      result.o1 = o1
+    oprot.writeMessageBegin("add_master_key", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_update_master_key(self, seqid, iprot, oprot):
+    args = update_master_key_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = update_master_key_result()
+    try:
+      self._handler.update_master_key(args.seq_number, args.key)
+    except NoSuchObjectException as o1:
+      result.o1 = o1
+    except MetaException as o2:
+      result.o2 = o2
+    oprot.writeMessageBegin("update_master_key", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_remove_master_key(self, seqid, iprot, oprot):
+    args = remove_master_key_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = remove_master_key_result()
+    result.success = self._handler.remove_master_key(args.key_seq)
+    oprot.writeMessageBegin("remove_master_key", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
+  def process_get_master_keys(self, seqid, iprot, oprot):
+    args = get_master_keys_args()
+    args.read(iprot)
+    iprot.readMessageEnd()
+    result = get_master_keys_result()
+    result.success = self._handler.get_master_keys()
+    oprot.writeMessageBegin("get_master_keys", TMessageType.REPLY, seqid)
+    result.write(oprot)
+    oprot.writeMessageEnd()
+    oprot.trans.flush()
+
   def process_get_open_txns(self, seqid, iprot, oprot):
     args = get_open_txns_args()
     args.read(iprot)
@@ -26188,6 +26580,990 @@ def __eq__(self, other):
   def __ne__(self, other):
     return not (self == other)
 
+class add_token_args:
+  """
+  Attributes:
+   - token_identifier
+   - delegation_token
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'token_identifier', None, None, ), # 1
+    (2, TType.STRING, 'delegation_token', None, None, ), # 2
+  )
+
+  def __init__(self, token_identifier=None, delegation_token=None,):
+    self.token_identifier = token_identifier
+    self.delegation_token = delegation_token
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.token_identifier = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRING:
+          self.delegation_token = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('add_token_args')
+    if self.token_identifier is not None:
+      oprot.writeFieldBegin('token_identifier', TType.STRING, 1)
+      oprot.writeString(self.token_identifier)
+      oprot.writeFieldEnd()
+    if self.delegation_token is not None:
+      oprot.writeFieldBegin('delegation_token', TType.STRING, 2)
+      oprot.writeString(self.delegation_token)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class add_token_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.BOOL, 'success', None, None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.BOOL:
+          self.success = iprot.readBool();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('add_token_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.BOOL, 0)
+      oprot.writeBool(self.success)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class remove_token_args:
+  """
+  Attributes:
+   - token_identifier
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'token_identifier', None, None, ), # 1
+  )
+
+  def __init__(self, token_identifier=None,):
+    self.token_identifier = token_identifier
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.token_identifier = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('remove_token_args')
+    if self.token_identifier is not None:
+      oprot.writeFieldBegin('token_identifier', TType.STRING, 1)
+      oprot.writeString(self.token_identifier)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class remove_token_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.BOOL, 'success', None, None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.BOOL:
+          self.success = iprot.readBool();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('remove_token_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.BOOL, 0)
+      oprot.writeBool(self.success)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_token_args:
+  """
+  Attributes:
+   - token_identifier
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'token_identifier', None, None, ), # 1
+  )
+
+  def __init__(self, token_identifier=None,):
+    self.token_identifier = token_identifier
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.token_identifier = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_token_args')
+    if self.token_identifier is not None:
+      oprot.writeFieldBegin('token_identifier', TType.STRING, 1)
+      oprot.writeString(self.token_identifier)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_token_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.STRING, 'success', None, None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.STRING:
+          self.success = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_token_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.STRING, 0)
+      oprot.writeString(self.success)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_all_token_identifiers_args:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_all_token_identifiers_args')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_all_token_identifiers_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.LIST:
+          self.success = []
+          (_etype883, _size880) = iprot.readListBegin()
+          for _i884 in xrange(_size880):
+            _elem885 = iprot.readString();
+            self.success.append(_elem885)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_all_token_identifiers_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.LIST, 0)
+      oprot.writeListBegin(TType.STRING, len(self.success))
+      for iter886 in self.success:
+        oprot.writeString(iter886)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class add_master_key_args:
+  """
+  Attributes:
+   - key
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRING, 'key', None, None, ), # 1
+  )
+
+  def __init__(self, key=None,):
+    self.key = key
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRING:
+          self.key = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('add_master_key_args')
+    if self.key is not None:
+      oprot.writeFieldBegin('key', TType.STRING, 1)
+      oprot.writeString(self.key)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class add_master_key_result:
+  """
+  Attributes:
+   - success
+   - o1
+  """
+
+  thrift_spec = (
+    (0, TType.I32, 'success', None, None, ), # 0
+    (1, TType.STRUCT, 'o1', (MetaException, MetaException.thrift_spec), None, ), # 1
+  )
+
+  def __init__(self, success=None, o1=None,):
+    self.success = success
+    self.o1 = o1
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.I32:
+          self.success = iprot.readI32();
+        else:
+          iprot.skip(ftype)
+      elif fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = MetaException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('add_master_key_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.I32, 0)
+      oprot.writeI32(self.success)
+      oprot.writeFieldEnd()
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class update_master_key_args:
+  """
+  Attributes:
+   - seq_number
+   - key
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.I32, 'seq_number', None, None, ), # 1
+    (2, TType.STRING, 'key', None, None, ), # 2
+  )
+
+  def __init__(self, seq_number=None, key=None,):
+    self.seq_number = seq_number
+    self.key = key
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.I32:
+          self.seq_number = iprot.readI32();
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRING:
+          self.key = iprot.readString();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('update_master_key_args')
+    if self.seq_number is not None:
+      oprot.writeFieldBegin('seq_number', TType.I32, 1)
+      oprot.writeI32(self.seq_number)
+      oprot.writeFieldEnd()
+    if self.key is not None:
+      oprot.writeFieldBegin('key', TType.STRING, 2)
+      oprot.writeString(self.key)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class update_master_key_result:
+  """
+  Attributes:
+   - o1
+   - o2
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.STRUCT, 'o1', (NoSuchObjectException, NoSuchObjectException.thrift_spec), None, ), # 1
+    (2, TType.STRUCT, 'o2', (MetaException, MetaException.thrift_spec), None, ), # 2
+  )
+
+  def __init__(self, o1=None, o2=None,):
+    self.o1 = o1
+    self.o2 = o2
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.STRUCT:
+          self.o1 = NoSuchObjectException()
+          self.o1.read(iprot)
+        else:
+          iprot.skip(ftype)
+      elif fid == 2:
+        if ftype == TType.STRUCT:
+          self.o2 = MetaException()
+          self.o2.read(iprot)
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('update_master_key_result')
+    if self.o1 is not None:
+      oprot.writeFieldBegin('o1', TType.STRUCT, 1)
+      self.o1.write(oprot)
+      oprot.writeFieldEnd()
+    if self.o2 is not None:
+      oprot.writeFieldBegin('o2', TType.STRUCT, 2)
+      self.o2.write(oprot)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class remove_master_key_args:
+  """
+  Attributes:
+   - key_seq
+  """
+
+  thrift_spec = (
+    None, # 0
+    (1, TType.I32, 'key_seq', None, None, ), # 1
+  )
+
+  def __init__(self, key_seq=None,):
+    self.key_seq = key_seq
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 1:
+        if ftype == TType.I32:
+          self.key_seq = iprot.readI32();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('remove_master_key_args')
+    if self.key_seq is not None:
+      oprot.writeFieldBegin('key_seq', TType.I32, 1)
+      oprot.writeI32(self.key_seq)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class remove_master_key_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.BOOL, 'success', None, None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.BOOL:
+          self.success = iprot.readBool();
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('remove_master_key_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.BOOL, 0)
+      oprot.writeBool(self.success)
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_master_keys_args:
+
+  thrift_spec = (
+  )
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_master_keys_args')
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
+class get_master_keys_result:
+  """
+  Attributes:
+   - success
+  """
+
+  thrift_spec = (
+    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
+  )
+
+  def __init__(self, success=None,):
+    self.success = success
+
+  def read(self, iprot):
+    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
+      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
+      return
+    iprot.readStructBegin()
+    while True:
+      (fname, ftype, fid) = iprot.readFieldBegin()
+      if ftype == TType.STOP:
+        break
+      if fid == 0:
+        if ftype == TType.LIST:
+          self.success = []
+          (_etype890, _size887) = iprot.readListBegin()
+          for _i891 in xrange(_size887):
+            _elem892 = iprot.readString();
+            self.success.append(_elem892)
+          iprot.readListEnd()
+        else:
+          iprot.skip(ftype)
+      else:
+        iprot.skip(ftype)
+      iprot.readFieldEnd()
+    iprot.readStructEnd()
+
+  def write(self, oprot):
+    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
+      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
+      return
+    oprot.writeStructBegin('get_master_keys_result')
+    if self.success is not None:
+      oprot.writeFieldBegin('success', TType.LIST, 0)
+      oprot.writeListBegin(TType.STRING, len(self.success))
+      for iter893 in self.success:
+        oprot.writeString(iter893)
+      oprot.writeListEnd()
+      oprot.writeFieldEnd()
+    oprot.writeFieldStop()
+    oprot.writeStructEnd()
+
+  def validate(self):
+    return
+
+
+  def __repr__(self):
+    L = ['%s=%r' % (key, value)
+      for key, value in self.__dict__.iteritems()]
+    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))
+
+  def __eq__(self, other):
+    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__
+
+  def __ne__(self, other):
+    return not (self == other)
+
 class get_open_txns_args:
 
   thrift_spec = (
diff --git a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
index 22081a9..596cb36 100644
--- a/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
+++ b/metastore/src/gen/thrift/gen-rb/thrift_hive_metastore.rb
@@ -1878,6 +1878,128 @@ module ThriftHiveMetastore
       return
     end
 
+    def add_token(token_identifier, delegation_token)
+      send_add_token(token_identifier, delegation_token)
+      return recv_add_token()
+    end
+
+    def send_add_token(token_identifier, delegation_token)
+      send_message('add_token', Add_token_args, :token_identifier => token_identifier, :delegation_token => delegation_token)
+    end
+
+    def recv_add_token()
+      result = receive_message(Add_token_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_token failed: unknown result')
+    end
+
+    def remove_token(token_identifier)
+      send_remove_token(token_identifier)
+      return recv_remove_token()
+    end
+
+    def send_remove_token(token_identifier)
+      send_message('remove_token', Remove_token_args, :token_identifier => token_identifier)
+    end
+
+    def recv_remove_token()
+      result = receive_message(Remove_token_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove_token failed: unknown result')
+    end
+
+    def get_token(token_identifier)
+      send_get_token(token_identifier)
+      return recv_get_token()
+    end
+
+    def send_get_token(token_identifier)
+      send_message('get_token', Get_token_args, :token_identifier => token_identifier)
+    end
+
+    def recv_get_token()
+      result = receive_message(Get_token_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_token failed: unknown result')
+    end
+
+    def get_all_token_identifiers()
+      send_get_all_token_identifiers()
+      return recv_get_all_token_identifiers()
+    end
+
+    def send_get_all_token_identifiers()
+      send_message('get_all_token_identifiers', Get_all_token_identifiers_args)
+    end
+
+    def recv_get_all_token_identifiers()
+      result = receive_message(Get_all_token_identifiers_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_all_token_identifiers failed: unknown result')
+    end
+
+    def add_master_key(key)
+      send_add_master_key(key)
+      return recv_add_master_key()
+    end
+
+    def send_add_master_key(key)
+      send_message('add_master_key', Add_master_key_args, :key => key)
+    end
+
+    def recv_add_master_key()
+      result = receive_message(Add_master_key_result)
+      return result.success unless result.success.nil?
+      raise result.o1 unless result.o1.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_master_key failed: unknown result')
+    end
+
+    def update_master_key(seq_number, key)
+      send_update_master_key(seq_number, key)
+      recv_update_master_key()
+    end
+
+    def send_update_master_key(seq_number, key)
+      send_message('update_master_key', Update_master_key_args, :seq_number => seq_number, :key => key)
+    end
+
+    def recv_update_master_key()
+      result = receive_message(Update_master_key_result)
+      raise result.o1 unless result.o1.nil?
+      raise result.o2 unless result.o2.nil?
+      return
+    end
+
+    def remove_master_key(key_seq)
+      send_remove_master_key(key_seq)
+      return recv_remove_master_key()
+    end
+
+    def send_remove_master_key(key_seq)
+      send_message('remove_master_key', Remove_master_key_args, :key_seq => key_seq)
+    end
+
+    def recv_remove_master_key()
+      result = receive_message(Remove_master_key_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove_master_key failed: unknown result')
+    end
+
+    def get_master_keys()
+      send_get_master_keys()
+      return recv_get_master_keys()
+    end
+
+    def send_get_master_keys()
+      send_message('get_master_keys', Get_master_keys_args)
+    end
+
+    def recv_get_master_keys()
+      result = receive_message(Get_master_keys_result)
+      return result.success unless result.success.nil?
+      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_master_keys failed: unknown result')
+    end
+
     def get_open_txns()
       send_get_open_txns()
       return recv_get_open_txns()
@@ -3611,6 +3733,72 @@ module ThriftHiveMetastore
       write_result(result, oprot, 'cancel_delegation_token', seqid)
     end
 
+    def process_add_token(seqid, iprot, oprot)
+      args = read_args(iprot, Add_token_args)
+      result = Add_token_result.new()
+      result.success = @handler.add_token(args.token_identifier, args.delegation_token)
+      write_result(result, oprot, 'add_token', seqid)
+    end
+
+    def process_remove_token(seqid, iprot, oprot)
+      args = read_args(iprot, Remove_token_args)
+      result = Remove_token_result.new()
+      result.success = @handler.remove_token(args.token_identifier)
+      write_result(result, oprot, 'remove_token', seqid)
+    end
+
+    def process_get_token(seqid, iprot, oprot)
+      args = read_args(iprot, Get_token_args)
+      result = Get_token_result.new()
+      result.success = @handler.get_token(args.token_identifier)
+      write_result(result, oprot, 'get_token', seqid)
+    end
+
+    def process_get_all_token_identifiers(seqid, iprot, oprot)
+      args = read_args(iprot, Get_all_token_identifiers_args)
+      result = Get_all_token_identifiers_result.new()
+      result.success = @handler.get_all_token_identifiers()
+      write_result(result, oprot, 'get_all_token_identifiers', seqid)
+    end
+
+    def process_add_master_key(seqid, iprot, oprot)
+      args = read_args(iprot, Add_master_key_args)
+      result = Add_master_key_result.new()
+      begin
+        result.success = @handler.add_master_key(args.key)
+      rescue ::MetaException => o1
+        result.o1 = o1
+      end
+      write_result(result, oprot, 'add_master_key', seqid)
+    end
+
+    def process_update_master_key(seqid, iprot, oprot)
+      args = read_args(iprot, Update_master_key_args)
+      result = Update_master_key_result.new()
+      begin
+        @handler.update_master_key(args.seq_number, args.key)
+      rescue ::NoSuchObjectException => o1
+        result.o1 = o1
+      rescue ::MetaException => o2
+        result.o2 = o2
+      end
+      write_result(result, oprot, 'update_master_key', seqid)
+    end
+
+    def process_remove_master_key(seqid, iprot, oprot)
+      args = read_args(iprot, Remove_master_key_args)
+      result = Remove_master_key_result.new()
+      result.success = @handler.remove_master_key(args.key_seq)
+      write_result(result, oprot, 'remove_master_key', seqid)
+    end
+
+    def process_get_master_keys(seqid, iprot, oprot)
+      args = read_args(iprot, Get_master_keys_args)
+      result = Get_master_keys_result.new()
+      result.success = @handler.get_master_keys()
+      write_result(result, oprot, 'get_master_keys', seqid)
+    end
+
     def process_get_open_txns(seqid, iprot, oprot)
       args = read_args(iprot, Get_open_txns_args)
       result = Get_open_txns_result.new()
@@ -8072,6 +8260,268 @@ module ThriftHiveMetastore
     ::Thrift::Struct.generate_accessors self
   end
 
+  class Add_token_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    TOKEN_IDENTIFIER = 1
+    DELEGATION_TOKEN = 2
+
+    FIELDS = {
+      TOKEN_IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'token_identifier'},
+      DELEGATION_TOKEN => {:type => ::Thrift::Types::STRING, :name => 'delegation_token'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Add_token_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Remove_token_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    TOKEN_IDENTIFIER = 1
+
+    FIELDS = {
+      TOKEN_IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'token_identifier'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Remove_token_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_token_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    TOKEN_IDENTIFIER = 1
+
+    FIELDS = {
+      TOKEN_IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'token_identifier'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_token_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_all_token_identifiers_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+
+    FIELDS = {
+
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_all_token_identifiers_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Add_master_key_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    KEY = 1
+
+    FIELDS = {
+      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Add_master_key_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+    O1 = 1
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::MetaException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Update_master_key_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SEQ_NUMBER = 1
+    KEY = 2
+
+    FIELDS = {
+      SEQ_NUMBER => {:type => ::Thrift::Types::I32, :name => 'seq_number'},
+      KEY => {:type => ::Thrift::Types::STRING, :name => 'key'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Update_master_key_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    O1 = 1
+    O2 = 2
+
+    FIELDS = {
+      O1 => {:type => ::Thrift::Types::STRUCT, :name => 'o1', :class => ::NoSuchObjectException},
+      O2 => {:type => ::Thrift::Types::STRUCT, :name => 'o2', :class => ::MetaException}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Remove_master_key_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    KEY_SEQ = 1
+
+    FIELDS = {
+      KEY_SEQ => {:type => ::Thrift::Types::I32, :name => 'key_seq'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Remove_master_key_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_master_keys_args
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+
+    FIELDS = {
+
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
+  class Get_master_keys_result
+    include ::Thrift::Struct, ::Thrift::Struct_Union
+    SUCCESS = 0
+
+    FIELDS = {
+      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
+    }
+
+    def struct_fields; FIELDS; end
+
+    def validate
+    end
+
+    ::Thrift::Struct.generate_accessors self
+  end
+
   class Get_open_txns_args
     include ::Thrift::Struct, ::Thrift::Struct_Union
 
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
index 19ef05d..c293026 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStore.java
@@ -5753,6 +5753,165 @@ public String get_delegation_token(String token_owner,
     }
 
     @Override
+    public boolean add_token(String token_identifier, String delegation_token) throws TException {
+      startFunction("add_token", ": " + token_identifier);
+      boolean ret = false;
+      Exception ex = null;
+      try {
+        ret = getMS().addToken(token_identifier, delegation_token);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("add_token", ret == true, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public boolean remove_token(String token_identifier) throws TException {
+      startFunction("remove_token", ": " + token_identifier);
+      boolean ret = false;
+      Exception ex = null;
+      try {
+        ret = getMS().removeToken(token_identifier);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("remove_token", ret == true, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public String get_token(String token_identifier) throws TException {
+      startFunction("get_token for", ": " + token_identifier);
+      String ret = null;
+      Exception ex = null;
+      try {
+        ret = getMS().getToken(token_identifier);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("get_token", ret != null, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public List<String> get_all_token_identifiers() throws TException {
+      startFunction("get_all_token_identifiers.");
+      List<String> ret = null;
+      Exception ex = null;
+      try {
+        ret = getMS().getAllTokenIdentifiers();
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("get_all_token_identifiers.", ex == null, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public int add_master_key(String key) throws MetaException, TException {
+      startFunction("add_master_key.");
+      int ret = -1;
+      Exception ex = null;
+      try {
+        ret = getMS().addMasterKey(key);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("add_master_key.", ex == null, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public void update_master_key(int seq_number, String key) throws NoSuchObjectException,
+      MetaException, TException {
+      startFunction("update_master_key.");
+      Exception ex = null;
+      try {
+        getMS().updateMasterKey(seq_number, key);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("update_master_key.", ex == null, ex);
+      }
+    }
+
+    @Override
+    public boolean remove_master_key(int key_seq) throws TException {
+      startFunction("remove_master_key.");
+      Exception ex = null;
+      boolean ret;
+      try {
+        ret = getMS().removeMasterKey(key_seq);
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("remove_master_key.", ex == null, ex);
+      }
+      return ret;
+    }
+
+    @Override
+    public List<String> get_master_keys() throws TException {
+      startFunction("get_master_keys.");
+      Exception ex = null;
+      String [] ret = null;
+      try {
+        ret = getMS().getMasterKeys();
+      } catch (Exception e) {
+        ex = e;
+        if (e instanceof MetaException) {
+          throw (MetaException) e;
+        } else {
+          throw newMetaException(e);
+        }
+      } finally {
+        endFunction("get_master_keys.", ret != null, ex);
+      }
+      return Arrays.asList(ret);
+    }
+
+    @Override
     public void markPartitionForEvent(final String db_name, final String tbl_name,
         final Map<String, String> partName, final PartitionEventType evtType) throws
         MetaException, TException, NoSuchObjectException, UnknownDBException,
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
index 346c82c..7cdb082 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/HiveMetaStoreClient.java
@@ -1919,6 +1919,48 @@ public void cancelDelegationToken(String tokenStrForm) throws MetaException, TEx
   }
 
   @Override
+  public boolean addToken(String tokenIdentifier, String delegationToken) throws TException {
+     return client.add_token(tokenIdentifier, delegationToken);
+  }
+
+  @Override
+  public boolean removeToken(String tokenIdentifier) throws TException {
+    return client.remove_token(tokenIdentifier);
+  }
+
+  @Override
+  public String getToken(String tokenIdentifier) throws TException {
+    return client.get_token(tokenIdentifier);
+  }
+
+  @Override
+  public List<String> getAllTokenIdentifiers() throws TException {
+    return client.get_all_token_identifiers();
+  }
+
+  @Override
+  public int addMasterKey(String key) throws MetaException, TException {
+    return client.add_master_key(key);
+  }
+
+  @Override
+  public void updateMasterKey(Integer seqNo, String key)
+      throws NoSuchObjectException, MetaException, TException {
+    client.update_master_key(seqNo, key);
+  }
+
+  @Override
+  public boolean removeMasterKey(Integer keySeq) throws TException {
+    return client.remove_master_key(keySeq);
+  }
+
+  @Override
+  public String[] getMasterKeys() throws TException {
+    List<String> keyList = client.get_master_keys();
+    return keyList.toArray(new String[keyList.size()]);
+  }
+
+  @Override
   public ValidTxnList getValidTxns() throws TException {
     return TxnHandler.createValidReadTxnList(client.get_open_txns(), 0);
   }
diff --git a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
index 7a94cd6..164699c 100644
--- a/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
+++ b/metastore/src/java/org/apache/hadoop/hive/metastore/IMetaStoreClient.java
@@ -39,6 +39,7 @@
 import org.apache.hadoop.hive.metastore.partition.spec.PartitionSpecProxy;
 import org.apache.thrift.TException;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.Map;
 
@@ -1168,6 +1169,25 @@ String getDelegationToken(String owner, String renewerKerberosPrincipalName)
    */
   void cancelDelegationToken(String tokenStrForm) throws MetaException, TException;
 
+  String getTokenStrForm() throws IOException;
+
+  boolean addToken(String tokenIdentifier, String delegationToken) throws TException;
+
+  boolean removeToken(String tokenIdentifier) throws TException;
+
+  String getToken(String tokenIdentifier) throws TException;
+
+  List<String> getAllTokenIdentifiers() throws TException;
+
+  int addMasterKey(String key) throws MetaException, TException;
+
+  void updateMasterKey(Integer seqNo, String key)
+      throws NoSuchObjectException, MetaException, TException;
+
+  boolean removeMasterKey(Integer keySeq) throws TException;
+
+  String[] getMasterKeys() throws TException;
+
   void createFunction(Function func)
       throws InvalidObjectException, MetaException, TException;
 
diff --git a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
index cc92c23..d4a11be 100644
--- a/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
+++ b/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
@@ -28,9 +28,9 @@
 
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
-import org.apache.hadoop.hive.metastore.HiveMetaStore;
-import org.apache.hadoop.hive.metastore.HiveMetaStore.HMSHandler;
+import org.apache.hadoop.hive.metastore.IMetaStoreClient;
 import org.apache.hadoop.hive.metastore.api.MetaException;
+import org.apache.hadoop.hive.ql.metadata.Hive;
 import org.apache.hadoop.hive.shims.HadoopShims.KerberosNameShim;
 import org.apache.hadoop.hive.shims.ShimLoader;
 import org.apache.hadoop.hive.thrift.DBTokenStore;
@@ -107,23 +107,25 @@ public HiveAuthFactory(HiveConf conf) throws TTransportException {
 
       if (isSASLWithKerberizedHadoop()) {
         saslServer = ShimLoader.getHadoopThriftAuthBridge()
-          .createServer(conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB),
-                        conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL));
+            .createServer(conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_KEYTAB), conf.getVar(ConfVars.HIVE_SERVER2_KERBEROS_PRINCIPAL));
         // start delegation token manager
         try {
           // rawStore is only necessary for DBTokenStore
-          HMSHandler baseHandler = null;
+          Object baseHandler = null;
           String tokenStoreClass = conf.getVar(HiveConf.ConfVars.METASTORE_CLUSTER_DELEGATION_TOKEN_STORE_CLS);
           if (tokenStoreClass.equals(DBTokenStore.class.getName())) {
-            baseHandler = new HiveMetaStore.HMSHandler("new db based metaserver", conf, true);
+            // IMetaStoreClient is needed to access token store if DBTokenStore is to be used. It
+            // will be got via Hive.get(conf).getMSC in a thread where the DelegationTokenStore
+            // is called. To avoid the cyclic reference, we pass the Hive class to DBTokenStore where
+            // it is used to get a threadLocal Hive object with a synchronized MetaStoreClient using
+            // Java reflection.
+            // Note: there will be two HS2 life-long opened MSCs, one is stored in HS2 thread local
+            // Hive object, the other is in a daemon thread spawned in DelegationTokenSecretManager
+            // to remove expired tokens.
+            baseHandler = Hive.class;
           }
-
           saslServer.startDelegationTokenSecretManager(conf, baseHandler, ServerMode.HIVESERVER2);
-        }
-        catch (MetaException e) {
-          throw new TTransportException("Failed to start token manager", e);
-        }
-        catch (IOException e) {
+        } catch (IOException e) {
           throw new TTransportException("Failed to start token manager", e);
         }
       }
diff --git a/shims/common/src/main/java/org/apache/hadoop/hive/thrift/DBTokenStore.java b/shims/common/src/main/java/org/apache/hadoop/hive/thrift/DBTokenStore.java
index de39d3d..d6dc079 100644
--- a/shims/common/src/main/java/org/apache/hadoop/hive/thrift/DBTokenStore.java
+++ b/shims/common/src/main/java/org/apache/hadoop/hive/thrift/DBTokenStore.java
@@ -33,13 +33,14 @@
 
 public class DBTokenStore implements DelegationTokenStore {
   private static final Logger LOG = LoggerFactory.getLogger(DBTokenStore.class);
+  private Configuration conf;
 
   @Override
   public int addMasterKey(String s) throws TokenStoreException {
     if (LOG.isTraceEnabled()) {
       LOG.trace("addMasterKey: s = " + s);
     }
-    return (Integer)invokeOnRawStore("addMasterKey", new Object[]{s},String.class);
+    return (Integer)invokeOnTokenStore("addMasterKey", new Object[]{s},String.class);
   }
 
   @Override
@@ -47,19 +48,19 @@ public void updateMasterKey(int keySeq, String s) throws TokenStoreException {
     if (LOG.isTraceEnabled()) {
       LOG.trace("updateMasterKey: s = " + s + ", keySeq = " + keySeq);
     }
-    invokeOnRawStore("updateMasterKey", new Object[] {Integer.valueOf(keySeq), s},
+    invokeOnTokenStore("updateMasterKey", new Object[] {Integer.valueOf(keySeq), s},
         Integer.class, String.class);
   }
 
   @Override
   public boolean removeMasterKey(int keySeq) {
-    return (Boolean)invokeOnRawStore("removeMasterKey", new Object[] {Integer.valueOf(keySeq)},
+    return (Boolean)invokeOnTokenStore("removeMasterKey", new Object[] {Integer.valueOf(keySeq)},
       Integer.class);
   }
 
   @Override
   public String[] getMasterKeys() throws TokenStoreException {
-    return (String[])invokeOnRawStore("getMasterKeys", new Object[0]);
+    return (String[])invokeOnTokenStore("getMasterKeys", new Object[0]);
   }
 
   @Override
@@ -70,7 +71,7 @@ public boolean addToken(DelegationTokenIdentifier tokenIdentifier,
       String identifier = TokenStoreDelegationTokenSecretManager.encodeWritable(tokenIdentifier);
       String tokenStr = Base64.encodeBase64URLSafeString(
         HiveDelegationTokenSupport.encodeDelegationTokenInformation(token));
-      boolean result = (Boolean)invokeOnRawStore("addToken", new Object[] {identifier, tokenStr},
+      boolean result = (Boolean)invokeOnTokenStore("addToken", new Object[] {identifier, tokenStr},
         String.class, String.class);
       if (LOG.isTraceEnabled()) {
         LOG.trace("addToken: tokenIdentifier = " + tokenIdentifier + ", added = " + result);
@@ -85,7 +86,7 @@ public boolean addToken(DelegationTokenIdentifier tokenIdentifier,
   public DelegationTokenInformation getToken(DelegationTokenIdentifier tokenIdentifier)
       throws TokenStoreException {
     try {
-      String tokenStr = (String)invokeOnRawStore("getToken", new Object[] {
+      String tokenStr = (String)invokeOnTokenStore("getToken", new Object[] {
           TokenStoreDelegationTokenSecretManager.encodeWritable(tokenIdentifier)}, String.class);
       DelegationTokenInformation result = null;
       if (tokenStr != null) {
@@ -103,7 +104,7 @@ public DelegationTokenInformation getToken(DelegationTokenIdentifier tokenIdenti
   @Override
   public boolean removeToken(DelegationTokenIdentifier tokenIdentifier) throws TokenStoreException{
     try {
-      boolean result = (Boolean)invokeOnRawStore("removeToken", new Object[] {
+      boolean result = (Boolean)invokeOnTokenStore("removeToken", new Object[] {
         TokenStoreDelegationTokenSecretManager.encodeWritable(tokenIdentifier)}, String.class);
       if (LOG.isTraceEnabled()) {
         LOG.trace("removeToken: tokenIdentifier = " + tokenIdentifier + ", removed = " + result);
@@ -117,7 +118,7 @@ public boolean removeToken(DelegationTokenIdentifier tokenIdentifier) throws Tok
   @Override
   public List<DelegationTokenIdentifier> getAllDelegationTokenIdentifiers() throws TokenStoreException{
 
-    List<String> tokenIdents = (List<String>)invokeOnRawStore("getAllTokenIdentifiers", new Object[0]);
+    List<String> tokenIdents = (List<String>)invokeOnTokenStore("getAllTokenIdentifiers", new Object[0]);
     List<DelegationTokenIdentifier> delTokenIdents = new ArrayList<DelegationTokenIdentifier>(tokenIdents.size());
 
     for (String tokenIdent : tokenIdents) {
@@ -132,19 +133,33 @@ public boolean removeToken(DelegationTokenIdentifier tokenIdentifier) throws Tok
     return delTokenIdents;
   }
 
-  private Object hmsHandler;
+  private Object handler;
+  private ServerMode smode;
 
   @Override
-  public void init(Object hms, ServerMode smode) throws TokenStoreException {
-    this.hmsHandler = hms;
+  public void init(Object handler, ServerMode smode) throws TokenStoreException {
+    this.handler = handler;
+    this.smode = smode;
   }
 
-  private Object invokeOnRawStore(String methName, Object[] params, Class<?> ... paramTypes)
+  private Object invokeOnTokenStore(String methName, Object[] params, Class<?> ... paramTypes)
       throws TokenStoreException{
-
+    Object tokenStore;
     try {
-      Object rawStore = hmsHandler.getClass().getMethod("getMS").invoke(hmsHandler);
-      return rawStore.getClass().getMethod(methName, paramTypes).invoke(rawStore, params);
+      switch (smode) {
+        case METASTORE :
+          tokenStore = handler.getClass().getMethod("getMS").invoke(handler);
+          break;
+        case HIVESERVER2 :
+          Object hiveObject = ((Class<?>)handler)
+            .getMethod("get", org.apache.hadoop.conf.Configuration.class, java.lang.Class.class)
+            .invoke(handler, conf, DBTokenStore.class);
+          tokenStore = ((Class<?>)handler).getMethod("getMSC").invoke(hiveObject);
+          break;
+       default:
+         throw new TokenStoreException(new Exception("unknown server mode"));
+      }
+      return tokenStore.getClass().getMethod(methName, paramTypes).invoke(tokenStore, params);
     } catch (IllegalArgumentException e) {
         throw new TokenStoreException(e);
     } catch (SecurityException e) {
@@ -160,12 +175,12 @@ private Object invokeOnRawStore(String methName, Object[] params, Class<?> ... p
 
   @Override
   public void setConf(Configuration conf) {
-    // No-op
+    this.conf = conf;
   }
 
   @Override
   public Configuration getConf() {
-    return null;
+    return conf;
   }
 
   @Override
-- 
1.7.9.5

